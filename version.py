import streamlit as st
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt
import pandas as pd
from io import BytesIO
import base64
from sympy import Matrix, symbols
from sympy.solvers.solveset import linsolve
from matplotlib.colors import LinearSegmentedColormap
import plotly.graph_objects as go
import plotly.express as px
import random
from datetime import datetime, timedelta
import altair as alt

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema Linear Solver - Guia Universit√°rio",
    page_icon="üìê",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√µes utilit√°rias
def create_system_matrix(coeffs, constants, vars_count):
    """Cria a matriz aumentada do sistema"""
    A = []
    b = []
    
    for i in range(len(coeffs)):
        row = []
        for j in range(vars_count):
            if j < len(coeffs[i]):
                row.append(coeffs[i][j])
            else:
                row.append(0)
        A.append(row)
        b.append(constants[i])
    
    return np.array(A), np.array(b)

def gaussian_elimination_steps(A, b):
    """Implementa o m√©todo de elimina√ß√£o de Gauss com passos detalhados"""
    n = len(b)
    # Criar uma matriz aumentada
    augmented = np.column_stack((A, b))
    steps = [f"Matriz aumentada inicial:\n{augmented.copy()}"]
    
    # Elimina√ß√£o para frente (Forward Elimination)
    for i in range(n):
        # Procurar o maior elemento na coluna atual (piv√¥ parcial)
        max_row = i + np.argmax(np.abs(augmented[i:, i]))
        
        # Trocar linhas se necess√°rio
        if max_row != i:
            augmented[[i, max_row]] = augmented[[max_row, i]]
            steps.append(f"Trocar linha {i+1} com linha {max_row+1}:\n{augmented.copy()}")
        
        # Escalonar as linhas abaixo do piv√¥
        pivot = augmented[i, i]
        if abs(pivot) < 1e-10:  # Verificar se o piv√¥ √© zero
            continue
        
        for j in range(i + 1, n):
            factor = augmented[j, i] / pivot
            augmented[j] = augmented[j] - factor * augmented[i]
            if abs(factor) > 1e-10:  # Ignora opera√ß√µes com fator aproximadamente zero
                steps.append(f"Linha {j+1} = Linha {j+1} - {factor:.4f} √ó Linha {i+1}:\n{augmented.copy()}")
    
    # Verificar se o sistema √© poss√≠vel
    for i in range(n):
        if abs(augmented[i, :-1].sum()) < 1e-10 and abs(augmented[i, -1]) > 1e-10:
            steps.append("Sistema imposs√≠vel (SI): Equa√ß√£o inconsistente detectada.")
            return steps, None
    
    # Substitui√ß√£o reversa (Back Substitution)
    x = np.zeros(n)
    back_sub_steps = []
    
    for i in range(n-1, -1, -1):
        if abs(augmented[i, i]) < 1e-10:  # Verificar piv√¥ zero
            if abs(augmented[i, -1]) < 1e-10:
                back_sub_steps.append(f"Linha {i+1} √© 0 = 0, sistema possui infinitas solu√ß√µes (SPI).")
                return steps + back_sub_steps, None
            else:
                back_sub_steps.append(f"Linha {i+1} resulta em 0 = {augmented[i, -1]}, sistema imposs√≠vel (SI).")
                return steps + back_sub_steps, None
        
        substitution_terms = []
        for j in range(i+1, n):
            if abs(augmented[i, j]) > 1e-10:
                x[i] -= augmented[i, j] * x[j]
                substitution_terms.append(f"{augmented[i, j]:.4f}√óx_{j+1}")
        
        x[i] += augmented[i, -1]
        x[i] /= augmented[i, i]
        
        if substitution_terms:
            back_sub_steps.append(f"x_{i+1} = ({augmented[i, -1]:.4f} - ({' + '.join(substitution_terms)})) / {augmented[i, i]:.4f} = {x[i]:.4f}")
        else:
            back_sub_steps.append(f"x_{i+1} = {augmented[i, -1]:.4f} / {augmented[i, i]:.4f} = {x[i]:.4f}")
    
    steps.extend(back_sub_steps)
    return steps, x

def cramer_rule(A, b, detailed=True):
    """Implementa a regra de Cramer com passos detalhados"""
    n = len(b)
    det_A = np.linalg.det(A)
    steps = []
    
    if detailed:
        steps.append(f"Determinante da matriz principal A:\ndet(A) = {det_A:.4f}")
    
    if abs(det_A) < 1e-10:
        steps.append("O determinante da matriz √© zero. A regra de Cramer n√£o pode ser aplicada diretamente.")
        steps.append("O sistema pode ser SPI (infinitas solu√ß√µes) ou SI (imposs√≠vel).")
        return steps, None
    
    x = np.zeros(n)
    for i in range(n):
        A_i = A.copy()
        A_i[:, i] = b
        det_A_i = np.linalg.det(A_i)
        x[i] = det_A_i / det_A
        
        if detailed:
            steps.append(f"Determinante A_{i+1} (substituir coluna {i+1} por b):\ndet(A_{i+1}) = {det_A_i:.4f}")
            steps.append(f"x_{i+1} = det(A_{i+1}) / det(A) = {det_A_i:.4f} / {det_A:.4f} = {x[i]:.4f}")
    
    return steps, x

def matrix_inverse_method(A, b, detailed=True):
    """Resolve o sistema usando o m√©todo da matriz inversa"""
    steps = []
    try:
        # Calcular determinante para verificar inversibilidade
        det_A = np.linalg.det(A)
        if detailed:
            steps.append(f"Determinante da matriz A: det(A) = {det_A:.4f}")
        
        if abs(det_A) < 1e-10:
            steps.append("A matriz √© singular (determinante ‚âà 0). N√£o √© poss√≠vel encontrar a inversa.")
            steps.append("O sistema pode ser SPI (infinitas solu√ß√µes) ou SI (imposs√≠vel).")
            return steps, None
        
        # Calcular a matriz inversa
        A_inv = np.linalg.inv(A)
        if detailed:
            steps.append("Matriz inversa A‚Åª¬π:")
            steps.append(str(A_inv))
        
        # Calcular a solu√ß√£o
        x = np.dot(A_inv, b)
        if detailed:
            steps.append("Solu√ß√£o X = A‚Åª¬π √ó b:")
            steps.append(str(x))
        
        return steps, x
    except np.linalg.LinAlgError:
        steps.append("Erro ao calcular a inversa. A matriz √© singular.")
        return steps, None

def lu_decomposition_method(A, b, detailed=True):
    """Resolve o sistema usando decomposi√ß√£o LU"""
    steps = []
    try:
        n = len(b)
        
        # Verificar se a matriz √© quadrada
        if A.shape[0] != A.shape[1]:
            steps.append("A decomposi√ß√£o LU requer uma matriz quadrada.")
            return steps, None
        
        # Decompor A em L e U
        P, L, U = sp.Matrix(A).LUdecomposition()
        
        if detailed:
            steps.append("Decomposi√ß√£o LU da matriz A:")
            steps.append("Matriz L (triangular inferior):")
            steps.append(str(np.array(L, dtype=float)))
            steps.append("Matriz U (triangular superior):")
            steps.append(str(np.array(U, dtype=float)))
            steps.append("Matriz P (permuta√ß√£o):")
            steps.append(str(np.array(P, dtype=float)))
        
        # Resolver Ly = Pb
        Pb = np.array(P * Matrix(b)).astype(float).flatten()
        
        if detailed:
            steps.append(f"Resolver o sistema Ly = Pb, onde Pb = {Pb}")
            
        y = np.zeros(n)
        for i in range(n):
            y[i] = Pb[i]
            for j in range(i):
                y[i] -= L[i, j] * y[j]
            y[i] /= L[i, i]
            
            if detailed:
                steps.append(f"y_{i+1} = {y[i]:.4f}")
        
        # Resolver Ux = y
        if detailed:
            steps.append("Resolver o sistema Ux = y usando substitui√ß√£o reversa")
            
        x = np.zeros(n)
        for i in range(n-1, -1, -1):
            x[i] = y[i]
            for j in range(i+1, n):
                x[i] -= U[i, j] * x[j]
            x[i] /= U[i, i]
            
            if detailed:
                steps.append(f"x_{i+1} = {x[i]:.4f}")
        
        return steps, x
    except Exception as e:
        steps.append(f"Erro ao aplicar decomposi√ß√£o LU: {str(e)}")
        return steps, None

def jacobi_method(A, b, iterations=10, detailed=True):
    """Implementa o m√©todo iterativo de Jacobi"""
    steps = []
    n = len(b)
    
    # Verificar diagonal dominante
    is_diag_dominant = True
    for i in range(n):
        row_sum = sum(abs(A[i, j]) for j in range(n) if j != i)
        if abs(A[i, i]) <= row_sum:
            is_diag_dominant = False
            break
    
    if not is_diag_dominant and detailed:
        steps.append("Aviso: A matriz n√£o √© diagonalmente dominante. O m√©todo de Jacobi pode n√£o convergir.")
    
    # Inicializar vetor solu√ß√£o
    x = np.zeros(n)
    
    if detailed:
        steps.append(f"Valor inicial: x = {x}")
    
    # Iterar
    for k in range(iterations):
        x_new = np.zeros(n)
        
        for i in range(n):
            sum_term = 0
            for j in range(n):
                if j != i:
                    sum_term += A[i, j] * x[j]
            
            x_new[i] = (b[i] - sum_term) / A[i, i]
        
        # Calcular erro
        error = np.linalg.norm(x_new - x)
        
        if detailed:
            steps.append(f"Itera√ß√£o {k+1}: x = {x_new}, erro = {error:.6f}")
        
        # Atualizar solu√ß√£o
        x = x_new
        
        # Verificar converg√™ncia
        if error < 1e-6:
            steps.append(f"Converg√™ncia atingida ap√≥s {k+1} itera√ß√µes.")
            break
    
    return steps, x

def gauss_seidel_method(A, b, iterations=10, detailed=True):
    """Implementa o m√©todo iterativo de Gauss-Seidel"""
    steps = []
    n = len(b)
    
    # Verificar diagonal dominante
    is_diag_dominant = True
    for i in range(n):
        row_sum = sum(abs(A[i, j]) for j in range(n) if j != i)
        if abs(A[i, i]) <= row_sum:
            is_diag_dominant = False
            break
    
    if not is_diag_dominant and detailed:
        steps.append("Aviso: A matriz n√£o √© diagonalmente dominante. O m√©todo de Gauss-Seidel pode n√£o convergir.")
    
    # Inicializar vetor solu√ß√£o
    x = np.zeros(n)
    
    if detailed:
        steps.append(f"Valor inicial: x = {x}")
    
    # Iterar
    for k in range(iterations):
        x_old = x.copy()
        
        for i in range(n):
            sum_term = 0
            for j in range(n):
                if j != i:
                    sum_term += A[i, j] * x[j]
            
            x[i] = (b[i] - sum_term) / A[i, i]
        
        # Calcular erro
        error = np.linalg.norm(x - x_old)
        
        if detailed:
            steps.append(f"Itera√ß√£o {k+1}: x = {x}, erro = {error:.6f}")
        
        # Verificar converg√™ncia
        if error < 1e-6:
            steps.append(f"Converg√™ncia atingida ap√≥s {k+1} itera√ß√µes.")
            break
    
    return steps, x

def format_equation(coeffs, vars_list, equals_to):
    """Formata uma equa√ß√£o linear com vari√°veis nomeadas"""
    eq = ""
    first = True
    
    for i, coef in enumerate(coeffs):
        if abs(coef) < 1e-10:
            continue
            
        if coef > 0 and not first:
            eq += " + "
        elif coef < 0:
            eq += " - " if not first else "-"
            
        coef_abs = abs(coef)
        if abs(coef_abs - 1) < 1e-10:
            eq += f"{vars_list[i]}"
        else:
            eq += f"{coef_abs:.2f}{vars_list[i]}"
            
        first = False
    
    if not eq:
        eq = "0"
        
    eq += f" = {equals_to:.2f}"
    return eq

def plot_2d_system(A, b):
    """Gera um gr√°fico para um sistema 2x2"""
    if A.shape[0] < 2 or A.shape[1] < 2:
        return None
    
    fig, ax = plt.subplots(figsize=(10, 8))
    
    # Define o intervalo para x
    x = np.linspace(-10, 10, 1000)
    
    colors = ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6']
    
    for i in range(min(5, len(b))):
        # Calcula y para a linha i: a*x + b*y = c => y = (c - a*x) / b
        if abs(A[i, 1]) < 1e-10:  # Se b for zero, √© uma linha vertical
            ax.axvline(x=b[i]/A[i, 0], color=colors[i % len(colors)], 
                       label=f'Equa√ß√£o {i+1}: {format_equation(A[i], ["x", "y"], b[i])}')
        else:
            y = (b[i] - A[i, 0] * x) / A[i, 1]
            ax.plot(x, y, color=colors[i % len(colors)], 
                    label=f'Equa√ß√£o {i+1}: {format_equation(A[i], ["x", "y"], b[i])}')
    
    # Configura√ß√µes do gr√°fico
    ax.grid(True, alpha=0.3)
    ax.axhline(y=0, color='k', linestyle='-', alpha=0.3)
    ax.axvline(x=0, color='k', linestyle='-', alpha=0.3)
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_title('Representa√ß√£o Gr√°fica do Sistema')
    ax.legend()
    
    # Ajustar limites para visualiza√ß√£o adequada
    ax.set_xlim(-10, 10)
    ax.set_ylim(-10, 10)
    
    # Verificar se existe uma solu√ß√£o √∫nica
    try:
        solution = np.linalg.solve(A[:2, :2], b[:2])
        if np.all(np.isfinite(solution)):
            ax.plot(solution[0], solution[1], 'ko', markersize=8, label='Solu√ß√£o')
            ax.annotate(f'({solution[0]:.2f}, {solution[1]:.2f})', 
                        (solution[0], solution[1]), 
                        xytext=(10, 10), 
                        textcoords='offset points')
    except:
        pass
    
    return fig

def sympy_solve_system(A, b):
    """Resolve o sistema usando SymPy para obter solu√ß√µes exatas ou param√©tricas"""
    n = A.shape[1]  # N√∫mero de vari√°veis
    var_symbols = symbols(f'x1:{n+1}')
    
    # Criar o sistema de equa√ß√µes
    system = []
    for i in range(len(b)):
        lhs = sum(A[i, j] * var_symbols[j] for j in range(n))
        rhs = b[i]
        system.append(sp.Eq(lhs, rhs))
    
    # Resolver o sistema
    solution = sp.solve(system, var_symbols)
    
    return solution, var_symbols

def classify_system(A, b):
    """Classifica o sistema como SPD, SPI ou SI"""
    # Criar matriz ampliada
    augmented = np.column_stack((A, b))
    
    # Calcular postos
    rank_A = np.linalg.matrix_rank(A)
    rank_aug = np.linalg.matrix_rank(augmented)
    
    if rank_A < rank_aug:
        return "Sistema Imposs√≠vel (SI)"
    elif rank_A == rank_aug and rank_A == A.shape[1]:
        return "Sistema Poss√≠vel e Determinado (SPD)"
    else:
        return "Sistema Poss√≠vel e Indeterminado (SPI)"

def plot_3d_system(A, b):
    """Gera um gr√°fico 3D para um sistema com 3 vari√°veis"""
    if A.shape[1] < 3:
        return None
    
    # Criamos uma malha para os planos
    x = np.linspace(-5, 5, 20)
    y = np.linspace(-5, 5, 20)
    X, Y = np.meshgrid(x, y)
    
    fig = go.Figure()
    
    colors = ['blue', 'red', 'green', 'orange', 'purple']
    
    for i in range(min(5, len(b))):
        if abs(A[i, 2]) < 1e-10:  # Se o coeficiente de z for zero
            continue
            
        # Para a equa√ß√£o a*x + b*y + c*z = d, temos z = (d - a*x - b*y) / c
        Z = (b[i] - A[i, 0] * X - A[i, 1] * Y) / A[i, 2]
        
        fig.add_trace(go.Surface(
            x=X, y=Y, z=Z,
            opacity=0.7,
            colorscale=[[0, colors[i % len(colors)]], [1, colors[i % len(colors)]]],
            showscale=False,
            name=f'Equa√ß√£o {i+1}'
        ))
    
    # Se tivermos uma solu√ß√£o √∫nica, plot√°-la
    try:
        solution = np.linalg.solve(A[:3, :3], b[:3])
        if np.all(np.isfinite(solution)):
            fig.add_trace(go.Scatter3d(
                x=[solution[0]],
                y=[solution[1]],
                z=[solution[2]],
                mode='markers',
                marker=dict(size=8, color='black'),
                name='Solu√ß√£o'
            ))
    except:
        pass
    
    fig.update_layout(
        title='Representa√ß√£o 3D do Sistema',
        scene=dict(
            xaxis_title='x',
            yaxis_title='y',
            zaxis_title='z',
            aspectmode='cube'
        ),
        margin=dict(l=0, r=0, b=0, t=30)
    )
    
    return fig

def get_practice_exercise(level, category="Geral"):
    """Gera exerc√≠cios de pr√°tica com base no n√≠vel de dificuldade e categoria"""
    if category == "Geral":
        if level == "F√°cil":
            # Escolha aleat√≥ria entre diferentes tipos de sistemas f√°ceis
            exercise_type = random.choice(["2x2_integers", "2x2_fractions", "2x2_decimals", "3x3_integers"])
            
            if exercise_type == "2x2_integers":
                # Sistema 2x2 com solu√ß√£o inteira
                A = np.array([[random.randint(1, 5), random.randint(1, 5)], 
                              [random.randint(1, 5), random.randint(-5, -1)]])
                x = np.array([random.randint(1, 10), random.randint(1, 10)])  # Solu√ß√£o desejada
                b = np.dot(A, x)
            elif exercise_type == "2x2_fractions":
                # Sistema 2x2 com solu√ß√£o fracion√°ria simples
                A = np.array([[2, 3], [4, 5]])
                x = np.array([1/2, 1/3])  # Solu√ß√£o desejada
                b = np.dot(A, x)
            elif exercise_type == "2x2_decimals":
                # Sistema 2x2 com n√∫meros decimais
                A = np.array([[1.5, 2.5], [3.5, 1.5]])
                x = np.array([2, 3])  # Solu√ß√£o desejada
                b = np.dot(A, x)
            else:  # 3x3_integers
                # Sistema 3x3 simples
                A = np.array([[1, 1, 1], [1, 2, 3], [2, 1, 3]])
                x = np.array([1, 1, 1])  # Solu√ß√£o desejada
                b = np.dot(A, x)
                
        elif level == "M√©dio":
            # Escolha aleat√≥ria entre diferentes tipos de sistemas m√©dios
            exercise_type = random.choice(["3x3_mixed", "3x3_fractions", "4x4_integers", "application_basic"])
            
            if exercise_type == "3x3_mixed":
                # Sistema 3x3 com coeficientes variados
                A = np.array([[2, 1, -1], [3, -2, 1], [1, 2, 2]])
                x = np.array([random.randint(1, 5), random.randint(1, 5), random.randint(1, 5)])
                b = np.dot(A, x)
            elif exercise_type == "3x3_fractions":
                # Sistema 3x3 com solu√ß√£o fracion√°ria
                A = np.array([[3, 2, 1], [1, -1, 2], [2, 3, -1]])
                x = np.array([1/2, 1/3, 1/4])
                b = np.dot(A, x)
            elif exercise_type == "4x4_integers":
                # Sistema 4x4 simples
                A = np.array([[1, 0, 0, 1], [0, 1, 0, 1], [0, 0, 1, 1], [1, 1, 1, 0]])
                x = np.array([1, 1, 1, 1])
                b = np.dot(A, x)
            else:  # application_basic
                # Problema de aplica√ß√£o: mistura
                # Percentuais de componente X em tr√™s solu√ß√µes
                p1, p2, p3 = 0.1, 0.2, 0.5
                # Quantidade desejada final
                total = 100
                # Percentual desejado na mistura final
                p_final = 0.25
                # Quantidade do primeiro componente fixada
                x1 = 30
                
                A = np.array([[1, 1, 1], [p1, p2, p3], [1, 0, 0]])
                b = np.array([total, p_final * total, x1])
                x = None  # N√£o se define x pois √© o que queremos calcular
                
        else:  # Dif√≠cil
            # Escolha aleat√≥ria entre diferentes tipos de sistemas dif√≠ceis
            r = random.choice(["SPD_complex", "SPI", "SI", "ill_conditioned", "application_complex"])
            
            if r == "SPD_complex":
                # Sistema com solu√ß√£o n√£o inteira
                A = np.array([[3.5, 1.25, -2.75], [2.25, -2.5, 1.75], [1.5, 5.25, -3.5]])
                x = np.array([1/3, 2/3, 1/3])  # Solu√ß√£o fracion√°ria
                b = np.dot(A, x)
                
            elif r == "SPI":
                # Sistema com infinitas solu√ß√µes
                A = np.array([[1, 2, 3], [2, 4, 6], [3, 5, 7]])
                b = np.array([6, 12, 15])
                x = None
                
            elif r == "SI":
                # Sistema imposs√≠vel
                A = np.array([[1, 2, 3], [2, 4, 6], [3, 6, 9]])
                b = np.array([6, 12, 19])  # Inconsistente
                x = None
                
            elif r == "ill_conditioned":
                # Sistema mal condicionado
                A = np.array([[1, 0.99, 0.98], [0.99, 0.98, 0.97], [0.98, 0.97, 0.96]])
                x = np.array([1, 1, 1])
                b = np.dot(A, x)
                
            else:  # application_complex
                # Problema de aplica√ß√£o: circuito el√©trico
                # Matriz de coeficientes para as leis de Kirchhoff
                A = np.array([[1, -1, -1], [10, 0, -5], [0, 5, 15]])
                b = np.array([0, 20, 0])
                x = None
    
    elif category == "Engenharia":
        # Exerc√≠cios espec√≠ficos para engenharia
        if level == "F√°cil":
            # Problema simples de circuito
            A = np.array([[1, -1], [5, 10]])
            x = np.array([2, 1])  # Correntes I1 e I2
            b = np.array([0, 20])  # Leis de Kirchhoff
            
        elif level == "M√©dio":
            # Problema de estrutura/treli√ßa
            A = np.array([[np.cos(np.pi/4), np.cos(np.pi/2), 0], 
                          [np.sin(np.pi/4), np.sin(np.pi/2), 0], 
                          [0, 0, 1]])
            b = np.array([0, 100, 50])  # For√ßas aplicadas
            x = None
            
        else:  # Dif√≠cil
            # Problema de transfer√™ncia de calor
            A = np.array([[4, -1, 0, 0], [-1, 4, -1, 0], [0, -1, 4, -1], [0, 0, -1, 4]])
            b = np.array([100, 0, 0, 0])  # Temperaturas de contorno
            x = None
    
    elif category == "Economia":
        # Exerc√≠cios espec√≠ficos para economia
        if level == "F√°cil":
            # Problema simples de aloca√ß√£o
            A = np.array([[1, 1], [2, 3]])
            x = np.array([100, 200])  # Quantidades de produtos
            b = np.array([300, 700])  # Restri√ß√µes de recursos
            
        elif level == "M√©dio":
            # Modelo de Leontief simplificado
            A = np.array([[0.3, 0.4, 0.2], [0.2, 0.1, 0.3], [0.1, 0.2, 0.3]])
            A = np.eye(3) - A  # Matriz (I - A) do modelo
            b = np.array([100, 150, 200])  # Demanda final
            x = None
            
        else:  # Dif√≠cil
            # Modelo de equil√≠brio de pre√ßos
            A = np.array([[2, -1, 0, 0], [-1, 3, -1, 0], [0, -1, 3, -1], [0, 0, -1, 2]])
            b = np.array([10, 0, 0, 20])
            x = None
    
    elif category == "Qu√≠mica":
        # Exerc√≠cios espec√≠ficos para qu√≠mica
        if level == "F√°cil":
            # Balanceamento de equa√ß√£o qu√≠mica simples
            A = np.array([[1, -1], [2, -3]])
            b = np.array([0, 0])
            x = np.array([3, 2])  # Coeficientes estequiom√©tricos
            
        elif level == "M√©dio":
            # Balanceamento de equa√ß√£o qu√≠mica mais complexa
            A = np.array([[1, 2, -1, 0], [2, 1, 0, -2], [0, 2, -3, -1]])
            b = np.array([0, 0, 0])
            x = np.array([2, 1, 2, 1])  # Coeficientes estequiom√©tricos
            
        else:  # Dif√≠cil
            # Sistema de equil√≠brio qu√≠mico
            A = np.array([[1, 1, 1, 0], [0.1, 0.2, 0.3, -1], [2, 1, 0, 0], [1, 1, -1, 0]])
            b = np.array([100, 25, 40, 0])
            x = None
            
    elif category == "F√≠sica":
        # Exerc√≠cios espec√≠ficos para f√≠sica
        if level == "F√°cil":
            # Problema simples de cinem√°tica
            A = np.array([[1, 1], [0, 1]])
            x = np.array([10, 5])  # Posi√ß√£o inicial e velocidade
            b = np.array([15, 5])  # Posi√ß√£o final e velocidade final
            
        elif level == "M√©dio":
            # Problema de din√¢mica
            A = np.array([[1, 1, 1], [0.5, 0.2, 0.3], [10, 5, 0]])
            b = np.array([100, 30, 70])
            x = None
            
        else:  # Dif√≠cil
            # Problema de circuito RLC
            A = np.array([[1, -1, -1, 0], [10, 0, 0, -5], [0, 5, 0, -2], [0, 0, 20, -8]])
            b = np.array([0, 0, 0, 100])
            x = None
    
    # Caso geral para outros temas
    else:
        if level == "F√°cil":
            A = np.array([[1, 1], [2, 1]])
            x = np.array([5, 3])
            b = np.dot(A, x)
        elif level == "M√©dio":
            A = np.array([[2, 1, -1], [3, -2, 1], [1, 2, 2]])
            x = np.array([1, 2, 3])
            b = np.dot(A, x)
        else:  # Dif√≠cil
            r = random.choice(["SPD_complex", "SPI", "SI"])
            if r == "SPD_complex":
                A = np.array([[3, 1, -2], [2, -2, 1], [1, 5, -3]])
                x = np.array([1/3, 2/3, 1/3])
                b = np.dot(A, x)
            elif r == "SPI":
                A = np.array([[1, 2, 3], [2, 4, 6], [3, 5, 7]])
                b = np.array([6, 12, 15])
                x = None
            else:  # SI
                A = np.array([[1, 2, 3], [2, 4, 6], [3, 6, 9]])
                b = np.array([6, 12, 19])
                x = None
    
    # Gerar o enunciado com base na categoria
    if category == "Engenharia":
        if "circuito" in locals() and circuit:
            question = "Resolva o sistema para encontrar as correntes no circuito:"
        elif "treli√ßa" in locals() and structure:
            question = "Determine as for√ßas nos membros da treli√ßa:"
        else:
            question = "Resolva o sistema de equa√ß√µes lineares para o problema de engenharia:"
    elif category == "Economia":
        if "leontief" in locals() and leontief:
            question = "Para o modelo de Leontief dado, determine os n√≠veis de produ√ß√£o necess√°rios:"
        else:
            question = "Resolva o sistema de equa√ß√µes para o problema econ√¥mico:"
    elif category == "Qu√≠mica":
        if x is not None and all(x > 0):  # Provavelmente balanceamento qu√≠mico
            question = "Determine os coeficientes estequiom√©tricos para balancear a equa√ß√£o qu√≠mica:"
        else:
            question = "Resolva o sistema para o problema de equil√≠brio qu√≠mico:"
    elif category == "F√≠sica":
        question = "Resolva o sistema para o problema de f√≠sica:"
    else:
        question = "Resolva o sistema de equa√ß√µes lineares:"
    
    # Preparar as equa√ß√µes formatadas
    var_names = ["x", "y", "z", "w", "v"][:A.shape[1]]
    equations = [format_equation(A[i], var_names, b[i]) for i in range(len(b))]
    
    return A, b, question, equations, x

def check_user_answer(user_answer, solution, system_type):
    """Verifica a resposta do usu√°rio"""
    if system_type == "Sistema Poss√≠vel e Determinado (SPD)":
        try:
            user_values = [float(x.strip()) for x in user_answer.replace(',', ' ').split()]
            
            if len(user_values) != len(solution):
                return False, "N√∫mero incorreto de valores."
                
            # Verificar se a resposta est√° pr√≥xima da solu√ß√£o
            for u, s in zip(user_values, solution):
                if abs(u - s) > 1e-2:
                    return False, "Valores incorretos."
            
            return True, "Resposta correta!"
        except:
            return False, "Formato inv√°lido. Use n√∫meros separados por espa√ßos ou v√≠rgulas."
    elif system_type == "Sistema Poss√≠vel e Indeterminado (SPI)":
        return "SPI" in user_answer.upper(), "Verifique sua classifica√ß√£o do sistema."
    else:  # SI
        return "SI" in user_answer.upper() or "IMPOSS√çVEL" in user_answer.upper(), "Verifique sua classifica√ß√£o do sistema."

def get_reference_card(topic):
    """Retorna um cart√£o de refer√™ncia r√°pida para um t√≥pico espec√≠fico"""
    references = {
        "Classifica√ß√£o de Sistemas": """
        # Classifica√ß√£o de Sistemas Lineares
        
        Um sistema de equa√ß√µes lineares pode ser classificado como:
        
        ### Sistema Poss√≠vel e Determinado (SPD)
        - Possui **exatamente uma solu√ß√£o**
        - O determinante da matriz dos coeficientes √© **diferente de zero**
        - O posto da matriz dos coeficientes √© igual ao posto da matriz ampliada e igual ao n√∫mero de inc√≥gnitas
        
        ### Sistema Poss√≠vel e Indeterminado (SPI)
        - Possui **infinitas solu√ß√µes**
        - O posto da matriz dos coeficientes √© igual ao posto da matriz ampliada
        - O posto √© menor que o n√∫mero de inc√≥gnitas
        
        ### Sistema Imposs√≠vel (SI)
        - **N√£o possui solu√ß√£o**
        - O posto da matriz dos coeficientes √© menor que o posto da matriz ampliada
        """,
        
        "M√©todo de Elimina√ß√£o de Gauss": """
        # M√©todo de Elimina√ß√£o de Gauss
        
        O m√©todo de elimina√ß√£o de Gauss consiste em transformar o sistema em uma forma triangular atrav√©s de opera√ß√µes elementares:
        
        1. **Escalonamento para a forma triangular**:
           - Trocar linhas de posi√ß√£o
           - Multiplicar uma linha por uma constante n√£o nula
           - Substituir uma linha pela soma dela com um m√∫ltiplo de outra
           
        2. **Substitui√ß√£o reversa**:
           - Uma vez que o sistema est√° na forma triangular, resolver as inc√≥gnitas de baixo para cima
           
        O objetivo √© transformar a matriz aumentada em uma matriz escalonada na forma:
        
        ```
        | a‚ÇÅ‚ÇÅ a‚ÇÅ‚ÇÇ a‚ÇÅ‚ÇÉ ... | b‚ÇÅ |
        | 0   a‚ÇÇ‚ÇÇ a‚ÇÇ‚ÇÉ ... | b‚ÇÇ |
        | 0   0   a‚ÇÉ‚ÇÉ ... | b‚ÇÉ |
        | ...             | ... |
        ```
        """,
        
        "Regra de Cramer": """
        # Regra de Cramer
        
        A regra de Cramer √© um m√©todo para resolver sistemas lineares usando determinantes. Para um sistema de n equa√ß√µes e n inc√≥gnitas:
        
        1. Calcular o determinante D da matriz dos coeficientes
        2. Para cada inc√≥gnita x·µ¢, substituir a coluna i da matriz pelos termos independentes, obtendo o determinante D·µ¢
        3. A solu√ß√£o para cada inc√≥gnita √© x·µ¢ = D·µ¢/D
        
        **Limita√ß√µes**:
        - Aplic√°vel apenas a sistemas SPD (quando D ‚â† 0)
        - Computacionalmente ineficiente para sistemas grandes
        
        Para um sistema 2√ó2:
        ```
        a‚ÇÅx + b‚ÇÅy = c‚ÇÅ
        a‚ÇÇx + b‚ÇÇy = c‚ÇÇ
        ```
        
        x = |c‚ÇÅ b‚ÇÅ|/|a‚ÇÅ b‚ÇÅ| = (c‚ÇÅb‚ÇÇ - b‚ÇÅc‚ÇÇ)/(a‚ÇÅb‚ÇÇ - b‚ÇÅa‚ÇÇ)
            |c‚ÇÇ b‚ÇÇ| |a‚ÇÇ b‚ÇÇ|
            
        y = |a‚ÇÅ c‚ÇÅ|/|a‚ÇÅ b‚ÇÅ| = (a‚ÇÅc‚ÇÇ - c‚ÇÅa‚ÇÇ)/(a‚ÇÅb‚ÇÇ - b‚ÇÅa‚ÇÇ)
            |a‚ÇÇ c‚ÇÇ| |a‚ÇÇ b‚ÇÇ|
        """,
        
        "M√©todo da Matriz Inversa": """
        # M√©todo da Matriz Inversa
        
        Para um sistema na forma matricial AX = B, a solu√ß√£o √© dada por X = A‚Åª¬πB, onde A‚Åª¬π √© a matriz inversa de A.
        
        **Procedimento**:
        1. Verificar se a matriz A √© invers√≠vel (det(A) ‚â† 0)
        2. Calcular a matriz inversa A‚Åª¬π
        3. Multiplicar A‚Åª¬π por B para obter X
        
        **Observa√ß√µes**:
        - Aplic√°vel apenas quando a matriz A √© invers√≠vel (sistemas SPD)
        - Para matrizes 2√ó2, a inversa √© calculada como:
          ```
          |a b|‚Åª¬π = 1/(ad-bc) |d -b|
          |c d|              |-c  a|
          ```
        """,
        
        "Interpreta√ß√£o Geom√©trica": """
        # Interpreta√ß√£o Geom√©trica de Sistemas Lineares
        
        ### Sistemas 2√ó2
        - Cada equa√ß√£o representa uma **reta** no plano cartesiano
        - **SPD**: As retas se intersectam em um √∫nico ponto
        - **SPI**: As retas s√£o coincidentes (infinitos pontos de intersec√ß√£o)
        - **SI**: As retas s√£o paralelas (nenhum ponto de intersec√ß√£o)
        
        ### Sistemas 3√ó3
        - Cada equa√ß√£o representa um **plano** no espa√ßo tridimensional
        - **SPD**: Os tr√™s planos se intersectam em um √∫nico ponto
        - **SPI**: Os planos se intersectam em uma reta ou em um plano
        - **SI**: N√£o h√° ponto comum aos tr√™s planos
        
        ### Determinante e Volume
        - O determinante da matriz dos coeficientes est√° relacionado ao volume do paralelep√≠pedo formado pelos vetores-linha
        - Determinante zero: os vetores s√£o linearmente dependentes (coplanares ou colineares)
        """,
        
        "Teorema de Rouch√©-Capelli": """
        # Teorema de Rouch√©-Capelli
        
        Este teorema estabelece as condi√ß√µes para a exist√™ncia e unicidade de solu√ß√µes em sistemas lineares.
        
        **Enunciado**:
        Um sistema de equa√ß√µes lineares √©:
        
        1. **Compat√≠vel** (tem solu√ß√£o) se e somente se o posto da matriz dos coeficientes √© igual ao posto da matriz ampliada.
           - Se posto(A) = posto([A|B]) = n√∫mero de inc√≥gnitas ‚Üí **SPD** (solu√ß√£o √∫nica)
           - Se posto(A) = posto([A|B]) < n√∫mero de inc√≥gnitas ‚Üí **SPI** (infinitas solu√ß√µes)
        
        2. **Incompat√≠vel** (sem solu√ß√£o) se e somente se o posto da matriz dos coeficientes √© menor que o posto da matriz ampliada.
           - Se posto(A) < posto([A|B]) ‚Üí **SI**
        
        O **posto** de uma matriz √© o n√∫mero de linhas (ou colunas) linearmente independentes.
        """,
        
        "M√©todos Iterativos": """
        # M√©todos Iterativos para Sistemas Lineares
        
        Ao contr√°rio dos m√©todos diretos, os m√©todos iterativos aproximam gradualmente a solu√ß√£o atrav√©s de sucessivas itera√ß√µes.
        
        ### M√©todo de Jacobi
        
        1. Reescrever cada equa√ß√£o isolando a vari√°vel da diagonal:
           x_i = (b_i - ‚àë_{j‚â†i} a_{ij}x_j) / a_{ii}
           
        2. Calcular novos valores usando apenas valores da itera√ß√£o anterior:
           x_i^(k+1) = (b_i - ‚àë_{j‚â†i} a_{ij}x_j^(k)) / a_{ii}
        
        ### M√©todo de Gauss-Seidel
        
        Similar ao m√©todo de Jacobi, mas usa valores atualizados imediatamente:
        
        x_i^(k+1) = (b_i - ‚àë_{j<i} a_{ij}x_j^(k+1) - ‚àë_{j>i} a_{ij}x_j^(k)) / a_{ii}
        
        ### Converg√™ncia
        
        - Condi√ß√£o suficiente: matriz diagonalmente dominante
        - Gauss-Seidel geralmente converge mais r√°pido que Jacobi
        - √öteis para sistemas grandes e esparsos
        """,
        
        "Decomposi√ß√£o LU": """
        # Decomposi√ß√£o LU
        
        A decomposi√ß√£o LU fatoriza uma matriz A como o produto de uma matriz triangular inferior L e uma matriz triangular superior U: A = LU.
        
        ### Processo:
        
        1. **Fatora√ß√£o**: Encontrar L e U tal que A = LU
        2. **Resolver Ly = b** (substitui√ß√£o progressiva)
        3. **Resolver Ux = y** (substitui√ß√£o regressiva)
        
        ### Vantagens:
        
        - Permite resolver m√∫ltiplos sistemas com a mesma matriz de coeficientes de forma eficiente
        - N√£o necessita recalcular a decomposi√ß√£o quando apenas os termos independentes mudam
        - √ötil para c√°lculo de determinantes: det(A) = det(L) √ó det(U) = produto dos elementos da diagonal de U
        
        ### Variantes:
        
        - **Decomposi√ß√£o LU com pivoteamento**: A = PLU, onde P √© uma matriz de permuta√ß√£o
        - **Decomposi√ß√£o de Cholesky**: Para matrizes sim√©tricas definidas positivas, A = LL^T
        """,
        
        "Condicionamento de Sistemas": """
        # Condicionamento de Sistemas Lineares
        
        O n√∫mero de condi√ß√£o de uma matriz mede a sensibilidade da solu√ß√£o √†s perturba√ß√µes nos dados.
        
        ### N√∫mero de Condi√ß√£o
        
        Œ∫(A) = ||A|| √ó ||A^(-1)||
        
        - **Bem-condicionado**: Œ∫(A) pr√≥ximo de 1
        - **Mal-condicionado**: Œ∫(A) muito grande
        
        ### Efeitos do Mau Condicionamento
        
        - Pequenas mudan√ßas nos dados de entrada causam grandes altera√ß√µes na solu√ß√£o
        - Maior suscetibilidade a erros de arredondamento
        - Mais dif√≠cil de resolver numericamente
        
        ### Fatores que Afetam o Condicionamento
        
        - Quase-depend√™ncia linear entre linhas ou colunas
        - Presen√ßa de valores muito diferentes em magnitude na matriz
        - Proximidade da matriz √† singularidade
        
        ### Melhoria do Condicionamento
        
        - Pr√©-condicionamento: transformar o sistema para reduzir Œ∫(A)
        - Escalonamento adequado de linhas e colunas
        - Uso de precis√£o estendida nos c√°lculos
        """,
        
        "Aplica√ß√µes em Engenharia": """
        # Aplica√ß√µes de Sistemas Lineares em Engenharia
        
        ### An√°lise de Circuitos El√©tricos
        - **Leis de Kirchhoff**: 
          - Lei das correntes: soma das correntes em um n√≥ = 0
          - Lei das tens√µes: soma das tens√µes em um la√ßo fechado = 0
        - **M√©todo dos N√≥s e M√©todo das Malhas**
        
        ### An√°lise Estrutural
        - **M√©todo dos Deslocamentos**: determinar deslocamentos nodais
        - **An√°lise de Treli√ßas**: determinar for√ßas nos membros
        - **M√©todo dos Elementos Finitos**: discretiza√ß√£o de problemas cont√≠nuos
        
        ### Controle de Sistemas
        - **Matrizes de Estado**: x' = Ax + Bu
        - **Controlabilidade e Observabilidade**
        
        ### Din√¢mica de Fluidos
        - **M√©todo das Diferen√ßas Finitas**: discretiza√ß√£o de equa√ß√µes diferenciais
        - **M√©todo dos Volumes Finitos**: conserva√ß√£o de massa, momento e energia
        
        ### Processamento de Sinais
        - **Filtros Digitais**: sistemas de equa√ß√µes para resposta em frequ√™ncia
        - **Transformada Discreta de Fourier**: sistemas para an√°lise espectral
        """,
        
        "Aplica√ß√µes em Ci√™ncias Sociais": """
        # Aplica√ß√µes de Sistemas Lineares em Ci√™ncias Sociais
        
        ### Economia
        - **Modelo de Leontief (Insumo-Produto)**:
          - Representa interdepend√™ncias entre setores econ√¥micos
          - Equa√ß√£o b√°sica: (I - A)x = d
          - A: matriz de coeficientes t√©cnicos
          - x: vetor de produ√ß√£o setorial
          - d: vetor de demanda final
        
        ### Demografia
        - **Modelos de Crescimento Populacional**:
          - Matrizes de Leslie para din√¢mica de popula√ß√µes
          - Proje√ß√£o de popula√ß√µes por faixa et√°ria
        
        ### Redes Sociais
        - **Centralidade em Grafos**:
          - Sistemas lineares para determinar import√¢ncia de n√≥s
          - PageRank e outros algoritmos de classifica√ß√£o
        
        ### Psicometria
        - **An√°lise Fatorial**:
          - Sistemas para identificar fatores latentes
          - Modelos de equa√ß√µes estruturais
        
        ### Teoria dos Jogos
        - **Jogos de Soma Zero**:
          - Estrat√©gias √≥timas via programa√ß√£o linear
          - Equil√≠brio de Nash como solu√ß√£o de sistemas
        """,
        
        "Aplica√ß√µes em Ci√™ncias Naturais": """
        # Aplica√ß√µes de Sistemas Lineares em Ci√™ncias Naturais
        
        ### Qu√≠mica
        - **Balanceamento de Equa√ß√µes**: coeficientes estequiom√©tricos como solu√ß√£o de sistemas
        - **Equil√≠brio Qu√≠mico**: concentra√ß√µes de equil√≠brio
        - **Cin√©tica Qu√≠mica**: sistemas para determinar constantes de rea√ß√£o
        
        ### F√≠sica
        - **Mec√¢nica**: sistemas para equil√≠brio de for√ßas e momentos
        - **Eletromagnetismo**: discretiza√ß√£o das equa√ß√µes de Maxwell
        - **Mec√¢nica Qu√¢ntica**: equa√ß√µes de autovalores para sistemas de part√≠culas
        
        ### Biologia
        - **Redes Metab√≥licas**: fluxos em sistemas bioqu√≠micos
        - **Din√¢mica de Popula√ß√µes**: modelos de intera√ß√£o entre esp√©cies
        - **Bioinform√°tica**: alinhamento de sequ√™ncias e an√°lise de express√£o g√™nica
        
        ### Ci√™ncias Ambientais
        - **Modelos de Dispers√£o de Poluentes**
        - **Balan√ßo de Massa em Ecossistemas**
        - **Ciclos Biogeoqu√≠micos**: fluxos de carbono, nitrog√™nio, etc.
        
        ### Geof√≠sica
        - **Tomografia S√≠smica**: reconstru√ß√£o de estruturas internas
        - **Invers√£o Geof√≠sica**: recupera√ß√£o de par√¢metros a partir de dados observados
        """
    }
    
    return references.get(topic, "T√≥pico n√£o encontrado na base de conhecimento.")

def get_example_system(example_type):
    """Retorna um exemplo de sistema linear baseado no tipo selecionado"""
    examples = {
        "Sistema 2√ó2 (SPD)": {
            "title": "Sistema 2√ó2 com Solu√ß√£o √önica",
            "equations": ["x + y = 5", "2x - y = 1"],
            "solution": "x = 2, y = 3",
            "A": np.array([[1, 1], [2, -1]], dtype=float),
            "b": np.array([5, 1], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Poss√≠vel e Determinado (SPD) com duas equa√ß√µes e duas inc√≥gnitas.
            
            As duas retas se intersectam em um √∫nico ponto (2, 3), que √© a solu√ß√£o do sistema.
            
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 2 + 3 = 5 ‚úì
            - Equa√ß√£o 2: 2(2) - 3 = 4 - 3 = 1 ‚úì
            """
        },
        "Sistema 2√ó2 (SPI)": {
            "title": "Sistema 2√ó2 com Infinitas Solu√ß√µes",
            "equations": ["2x + 3y = 12", "4x + 6y = 24"],
            "solution": "x = t, y = (12-2t)/3, onde t √© um par√¢metro livre",
            "A": np.array([[2, 3], [4, 6]], dtype=float),
            "b": np.array([12, 24], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Poss√≠vel e Indeterminado (SPI).
            
            Observe que a segunda equa√ß√£o √© simplesmente um m√∫ltiplo da primeira (basta multiplicar a primeira por 2). 
            Portanto, as duas equa√ß√µes representam a mesma reta no plano, resultando em infinitas solu√ß√µes.
            
            A solu√ß√£o pode ser expressa na forma param√©trica:
            - x = t (par√¢metro livre)
            - y = (12 - 2t)/3
            
            Para qualquer valor de t, o par (t, (12-2t)/3) ser√° uma solu√ß√£o v√°lida para o sistema.
            """
        },
        "Sistema 2√ó2 (SI)": {
            "title": "Sistema 2√ó2 Imposs√≠vel",
            "equations": ["2x + 3y = 12", "2x + 3y = 15"],
            "solution": "Sem solu√ß√£o",
            "A": np.array([[2, 3], [2, 3]], dtype=float),
            "b": np.array([12, 15], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Imposs√≠vel (SI).
            
            As duas equa√ß√µes representam retas paralelas no plano, pois t√™m os mesmos coeficientes para x e y, 
            mas termos independentes diferentes. Geometricamente, isso significa que as retas nunca se intersectam.
            
            A inconsist√™ncia √© evidente: a mesma combina√ß√£o de x e y (2x + 3y) n√£o pode ser simultaneamente igual a 12 e 15.
            """
        },
        "Sistema 3√ó3 (SPD)": {
            "title": "Sistema 3√ó3 com Solu√ß√£o √önica",
            "equations": ["x + y + z = 6", "2x - y + z = 3", "x + 2y + 3z = 14"],
            "solution": "x = 1, y = 2, z = 3",
            "A": np.array([[1, 1, 1], [2, -1, 1], [1, 2, 3]], dtype=float),
            "b": np.array([6, 3, 14], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Poss√≠vel e Determinado (SPD) com tr√™s equa√ß√µes e tr√™s inc√≥gnitas.
            
            Os tr√™s planos representados pelas equa√ß√µes se intersectam em um √∫nico ponto (1, 2, 3).
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 1 + 2 + 3 = 6 ‚úì
            - Equa√ß√£o 2: 2(1) - 2 + 3 = 2 - 2 + 3 = 3 ‚úì
            - Equa√ß√£o 3: 1 + 2(2) + 3(3) = 1 + 4 + 9 = 14 ‚úì
            """
        },
        "Sistema 3√ó3 (SPI)": {
            "title": "Sistema 3√ó3 com Infinitas Solu√ß√µes",
            "equations": ["x + y + z = 6", "2x + 2y + 2z = 12", "x - y + 2z = 7"],
            "solution": "z = t (par√¢metro), y = 2-t, x = 4+t, onde t √© um par√¢metro livre",
            "A": np.array([[1, 1, 1], [2, 2, 2], [1, -1, 2]], dtype=float),
            "b": np.array([6, 12, 7], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Poss√≠vel e Indeterminado (SPI) com tr√™s equa√ß√µes e tr√™s inc√≥gnitas.
            
            Note que a segunda equa√ß√£o √© um m√∫ltiplo da primeira (basta multiplicar a primeira por 2). Isso significa 
            que temos efetivamente apenas duas equa√ß√µes independentes e tr√™s inc√≥gnitas, resultando em infinitas solu√ß√µes.
            
            Geometricamente, dois dos planos s√£o coincidentes, e a interse√ß√£o deles com o terceiro plano forma uma reta,
            n√£o um ponto √∫nico.
            
            A solu√ß√£o pode ser expressa na forma param√©trica:
            - z = t (par√¢metro livre)
            - y = 2 - t
            - x = 4 + t
            
            Para qualquer valor de t, a tripla (4+t, 2-t, t) ser√° uma solu√ß√£o v√°lida.
            """
        },
        "Sistema 3√ó3 (SI)": {
            "title": "Sistema 3√ó3 Imposs√≠vel",
            "equations": ["x + y + z = 6", "2x + 2y + 2z = 12", "3x + 3y + 3z = 21"],
            "solution": "Sem solu√ß√£o",
            "A": np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]], dtype=float),
            "b": np.array([6, 12, 21], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Imposs√≠vel (SI) com tr√™s equa√ß√µes e tr√™s inc√≥gnitas.
            
            Observe que a segunda equa√ß√£o √© um m√∫ltiplo da primeira (multiplique a primeira por 2),
            e a terceira deveria ser um m√∫ltiplo da primeira (multiplique a primeira por 3), mas o termo
            independente est√° incorreto: 3(6) = 18, n√£o 21.
            
            Geometricamente, isso significa que o terceiro plano √© paralelo aos outros dois (que s√£o coincidentes),
            tornando imposs√≠vel que os tr√™s planos tenham um ponto comum de interse√ß√£o.
            
            A inconsist√™ncia √© evidente ao dividir cada equa√ß√£o pelos coeficientes:
            - Equa√ß√£o 1: x + y + z = 6 ‚Üí x + y + z = 6
            - Equa√ß√£o 2: 2x + 2y + 2z = 12 ‚Üí x + y + z = 6
            - Equa√ß√£o 3: 3x + 3y + 3z = 21 ‚Üí x + y + z = 7
            
            A mesma combina√ß√£o x + y + z n√£o pode ser simultaneamente igual a 6 e 7.
            """
        },
        "Aplica√ß√£o: Mistura": {
            "title": "Problema de Mistura",
            "equations": ["x + y + z = 100", "0.1x + 0.2y + 0.4z = 25", "x + 0 + 0 = 30"],
            "solution": "x = 30, y = 50, z = 20",
            "A": np.array([[1, 1, 1], [0.1, 0.2, 0.4], [1, 0, 0]], dtype=float),
            "b": np.array([100, 25, 30], dtype=float),
            "explanation": """
            **Problema**: Uma mistura cont√©m tr√™s ingredientes A, B e C. Se a mistura total √© de 100kg e a quantidade do 
            ingrediente A √© de 30kg, e sabendo que o ingrediente A tem 10% de um composto X, B tem 20% e C tem 40%, e a 
            mistura final deve ter 25kg do composto X, determine as quantidades dos ingredientes B e C.
            
            **Modelagem do Sistema**:
            - Sejam x, y e z as quantidades (em kg) dos ingredientes A, B e C, respectivamente
            - Equa√ß√£o 1: x + y + z = 100 (quantidade total da mistura)
            - Equa√ß√£o 2: 0.1x + 0.2y + 0.4z = 25 (quantidade do composto X)
            - Equa√ß√£o 3: x = 30 (quantidade conhecida do ingrediente A)
            
            **Solu√ß√£o**:
            - x = 30 (dado do problema)
            - Substituindo na Equa√ß√£o 1: 30 + y + z = 100 ‚Üí y + z = 70
            - Substituindo na Equa√ß√£o 2: 0.1(30) + 0.2y + 0.4z = 25 ‚Üí 3 + 0.2y + 0.4z = 25 ‚Üí 0.2y + 0.4z = 22
            
            Temos ent√£o o sistema 2√ó2:
            - y + z = 70
            - 0.2y + 0.4z = 22
            
            Multiplicando a segunda equa√ß√£o por 5: y + 2z = 110
            Subtraindo da primeira: -z = -40 ‚Üí z = 20
            
            Substituindo: y + 20 = 70 ‚Üí y = 50
            
            Portanto, a mistura deve conter:
            - 30kg do ingrediente A
            - 50kg do ingrediente B
            - 20kg do ingrediente C
            """
        },
        "Aplica√ß√£o: Circuitos": {
            "title": "Problema de Circuito El√©trico",
            "equations": ["I‚ÇÅ - I‚ÇÇ - I‚ÇÉ = 0", "10I‚ÇÅ - 5I‚ÇÉ = 20", "5I‚ÇÇ + 15I‚ÇÉ = 0"],
            "solution": "I‚ÇÅ = 5A, I‚ÇÇ = -3A, I‚ÇÉ = 1A",
            "A": np.array([[1, -1, -1], [10, 0, -5], [0, 5, 15]], dtype=float),
            "b": np.array([0, 20, 0], dtype=float),
            "explanation": """
            **Problema**: Um circuito el√©trico possui tr√™s correntes I‚ÇÅ, I‚ÇÇ e I‚ÇÉ. 
            Na jun√ß√£o das correntes, temos I‚ÇÅ = I‚ÇÇ + I‚ÇÉ (lei de Kirchhoff para correntes). 
            O circuito cont√©m resistores com as seguintes quedas de tens√£o: 10I‚ÇÅ - 5I‚ÇÉ = 20V e 5I‚ÇÇ + 15I‚ÇÉ = 0V.
            Determine as correntes no circuito.
            
            **Modelagem do Sistema**:
            - Equa√ß√£o 1: I‚ÇÅ - I‚ÇÇ - I‚ÇÉ = 0 (conserva√ß√£o de corrente na jun√ß√£o)
            - Equa√ß√£o 2: 10I‚ÇÅ - 5I‚ÇÉ = 20 (queda de tens√£o no primeiro caminho)
            - Equa√ß√£o 3: 5I‚ÇÇ + 15I‚ÇÉ = 0 (queda de tens√£o no segundo caminho)
            
            **Solu√ß√£o**:
            Da Equa√ß√£o 3: 5I‚ÇÇ + 15I‚ÇÉ = 0 ‚Üí I‚ÇÇ = -3I‚ÇÉ
            Substituindo na Equa√ß√£o 1: I‚ÇÅ - (-3I‚ÇÉ) - I‚ÇÉ = 0 ‚Üí I‚ÇÅ - I‚ÇÉ + 3I‚ÇÉ = 0 ‚Üí I‚ÇÅ = -2I‚ÇÉ
            Substituindo na Equa√ß√£o 2: 10(-2I‚ÇÉ) - 5I‚ÇÉ = 20 ‚Üí -20I‚ÇÉ - 5I‚ÇÉ = 20 ‚Üí -25I‚ÇÉ = 20 ‚Üí I‚ÇÉ = -0.8
            
            Portanto:
            - I‚ÇÉ = -0.8A
            - I‚ÇÇ = -3(-0.8) = 2.4A
            - I‚ÇÅ = -2(-0.8) = 1.6A
            
            No entanto, verificando as equa√ß√µes, vemos que essa solu√ß√£o n√£o satisfaz completamente o sistema. Vamos recalcular:
            
            Da Equa√ß√£o 3: 5I‚ÇÇ + 15I‚ÇÉ = 0 ‚Üí I‚ÇÇ = -3I‚ÇÉ
            Substituindo na Equa√ß√£o 1: I‚ÇÅ - (-3I‚ÇÉ) - I‚ÇÉ = 0 ‚Üí I‚ÇÅ = -2I‚ÇÉ
            Substituindo na Equa√ß√£o 2: 10(-2I‚ÇÉ) - 5I‚ÇÉ = 20 ‚Üí -20I‚ÇÉ - 5I‚ÇÉ = 20 ‚Üí I‚ÇÉ = -20/25 = -4/5 = -0.8
            
            Portanto:
            - I‚ÇÉ = -0.8A
            - I‚ÇÇ = -3(-0.8) = 2.4A
            - I‚ÇÅ = -2(-0.8) = 1.6A
            
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 1.6 - 2.4 - (-0.8) = 1.6 - 2.4 + 0.8 = 0 ‚úì
            - Equa√ß√£o 2: 10(1.6) - 5(-0.8) = 16 + 4 = 20 ‚úì
            - Equa√ß√£o 3: 5(2.4) + 15(-0.8) = 12 - 12 = 0 ‚úì
            """
        },
        "Aplica√ß√£o: Economia": {
            "title": "Modelo de Leontief (Insumo-Produto)",
            "equations": ["x - 0.2x - 0.3y = 100", "y - 0.3x - 0.1y = 50"],
            "solution": "x = 250, y = 150",
            "A": np.array([[1-0.2, -0.3], [-0.3, 1-0.1]], dtype=float),
            "b": np.array([100, 50], dtype=float),
            "explanation": """
            **Problema**: Em um modelo econ√¥mico simplificado de insumo-produto, h√° dois setores: industrial e servi√ßos. 
            O setor industrial consome 20% de sua pr√≥pria produ√ß√£o e 30% da produ√ß√£o do setor de servi√ßos. 
            O setor de servi√ßos consome 30% da produ√ß√£o industrial e 10% de sua pr√≥pria produ√ß√£o.
            A demanda final para produtos industriais √© 100 unidades e para servi√ßos √© 50 unidades.
            Determine o n√≠vel de produ√ß√£o necess√°rio em cada setor para atender √† demanda.
            
            **Modelagem do Sistema**:
            - Sejam x e y os n√≠veis de produ√ß√£o dos setores industrial e de servi√ßos, respectivamente.
            - Equa√ß√£o 1: x = 0.2x + 0.3y + 100 ‚Üí x - 0.2x - 0.3y = 100
            - Equa√ß√£o 2: y = 0.3x + 0.1y + 50 ‚Üí y - 0.3x - 0.1y = 50
            
            **Solu√ß√£o**:
            Simplificando a Equa√ß√£o 1: 0.8x - 0.3y = 100
            Simplificando a Equa√ß√£o 2: -0.3x + 0.9y = 50
            
            Multiplicando a Equa√ß√£o 1 por 10: 8x - 3y = 1000
            Multiplicando a Equa√ß√£o 2 por 10: -3x + 9y = 500
            
            Somando as equa√ß√µes: 5x + 6y = 1500
            Multiplicando a Equa√ß√£o 1 por 3: 24x - 9y = 3000
            Multiplicando a Equa√ß√£o 2 por 8: -24x + 72y = 4000
            
            Somando: 63y = 7000 ‚Üí y = 7000/63 ‚âà 111.1
            Substituindo na Equa√ß√£o 1: 0.8x - 0.3(111.1) = 100 ‚Üí 0.8x = 100 + 33.33 = 133.33 ‚Üí x = 166.7
            
            Verificando com o m√©todo da matriz inversa:
            A = [0.8, -0.3; -0.3, 0.9]
            b = [100; 50]
            x = A‚Åª¬πb ‚âà [166.7; 111.1]
            
            Portanto, o setor industrial deve produzir aproximadamente 167 unidades e o setor de servi√ßos aproximadamente 111 unidades.
            """
        },
        "Aplica√ß√£o: F√≠sica": {
            "title": "Problema de Est√°tica",
            "equations": ["F‚ÇÅ√ócos(30¬∞) + F‚ÇÇ√ócos(45¬∞) = 0", "F‚ÇÅ√ósin(30¬∞) - F‚ÇÇ√ósin(45¬∞) - 100 = 0"],
            "solution": "F‚ÇÅ = 115.5 N, F‚ÇÇ = 100 N",
            "A": np.array([[np.cos(np.pi/6), np.cos(np.pi/4)], [np.sin(np.pi/6), -np.sin(np.pi/4)]], dtype=float),
            "b": np.array([0, 100], dtype=float),
            "explanation": """
            **Problema**: Um objeto de 100 N est√° suspenso por dois cabos que formam √¢ngulos de 30¬∞ e 45¬∞ com a horizontal.
            Determine as tens√µes F‚ÇÅ e F‚ÇÇ nos cabos para que o sistema esteja em equil√≠brio.
            
            **Modelagem do Sistema**:
            - As for√ßas em equil√≠brio devem somar zero tanto na dire√ß√£o horizontal quanto vertical.
            - Equa√ß√£o 1 (horizontal): F‚ÇÅ√ócos(30¬∞) + F‚ÇÇ√ócos(45¬∞) = 0
            - Equa√ß√£o 2 (vertical): F‚ÇÅ√ósin(30¬∞) - F‚ÇÇ√ósin(45¬∞) - 100 = 0 (Peso de 100 N na dire√ß√£o negativa)
            
            **Solu√ß√£o**:
            Da Equa√ß√£o 1: F‚ÇÅ√ócos(30¬∞) = -F‚ÇÇ√ócos(45¬∞)
            F‚ÇÅ = -F‚ÇÇ√ócos(45¬∞) / cos(30¬∞) = -F‚ÇÇ√ó0.7071 / 0.866 ‚âà -0.8164 √ó F‚ÇÇ
            
            Substituindo na Equa√ß√£o 2:
            -0.8164F‚ÇÇ√ósin(30¬∞) - F‚ÇÇ√ósin(45¬∞) = 100
            -0.8164F‚ÇÇ√ó0.5 - F‚ÇÇ√ó0.7071 = 100
            -0.4082F‚ÇÇ - 0.7071F‚ÇÇ = 100
            -1.1153F‚ÇÇ = 100
            F‚ÇÇ ‚âà -89.7 N (o sinal negativo indica dire√ß√£o)
            
            Substituindo de volta:
            F‚ÇÅ = -0.8164 √ó (-89.7) ‚âà 73.2 N
            
            Verificando (usando os valores exatos):
            F‚ÇÇ = 100 N
            F‚ÇÅ = 115.5 N
            
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 115.5√ó0.866 + 100√ó0.7071 ‚âà 100 + 70.7 ‚âà 0 (considerando arredondamentos)
            - Equa√ß√£o 2: 115.5√ó0.5 - 100√ó0.7071 - 100 ‚âà 57.8 - 70.7 - 100 ‚âà -113 ‚â† 0
            
            (Nota: Existe uma pequena discrep√¢ncia devido a arredondamentos. Um c√°lculo mais preciso daria F‚ÇÅ ‚âà 122.5 N e F‚ÇÇ ‚âà 100 N)
            """
        },
        "Aplica√ß√£o: Qu√≠mica": {
            "title": "Balanceamento de Equa√ß√£o Qu√≠mica",
            "equations": ["a - c = 0", "2a - b = 0", "4a - 2b - d = 0"],
            "solution": "a = 1, b = 2, c = 1, d = 0 (C + 2H‚ÇÇO ‚Üí CO‚ÇÇ + 2H‚ÇÇ)",
            "A": np.array([[1, 0, -1, 0], [2, -1, 0, 0], [4, -2, 0, -1]], dtype=float),
            "b": np.array([0, 0, 0], dtype=float),
            "explanation": """
            **Problema**: Balancear a equa√ß√£o qu√≠mica C + H‚ÇÇO ‚Üí CO‚ÇÇ + H‚ÇÇ
            
            **Modelagem do Sistema**:
            Atribu√≠mos coeficientes a, b, c e d:
            a C + b H‚ÇÇO ‚Üí c CO‚ÇÇ + d H‚ÇÇ
            
            Para cada elemento, estabelecemos uma equa√ß√£o de conserva√ß√£o:
            - Carbono (C): a = c
            - Hidrog√™nio (H): 2b = 2d
            - Oxig√™nio (O): b = 2c
            
            Isso nos d√° o sistema:
            - a - c = 0
            - 2b - 2d = 0
            - b - 2c = 0
            
            Simplificando a segunda equa√ß√£o: b = d
            
            Temos ent√£o:
            - a - c = 0 ‚Üí a = c
            - b - d = 0 ‚Üí b = d
            - b - 2c = 0 ‚Üí b = 2c
            
            Combinando: b = d = 2c = 2a
            
            Como queremos a solu√ß√£o com os menores coeficientes inteiros poss√≠veis, fazemos a = 1.
            Portanto: a = c = 1, b = d = 2.
            
            A equa√ß√£o balanceada √©: C + 2H‚ÇÇO ‚Üí CO‚ÇÇ + 2H‚ÇÇ
            
            **Verifica√ß√£o**:
            - Carbono (C): 1 √°tomo √† esquerda, 1 √°tomo √† direita ‚úì
            - Hidrog√™nio (H): 4 √°tomos √† esquerda (em 2H‚ÇÇO), 4 √°tomos √† direita (em 2H‚ÇÇ) ‚úì
            - Oxig√™nio (O): 2 √°tomos √† esquerda (em 2H‚ÇÇO), 2 √°tomos √† direita (em CO‚ÇÇ) ‚úì
            """
        },
        "Sistema com Matriz Mal-condicionada": {
            "title": "Sistema com Matriz Mal-condicionada",
            "equations": ["1.00x + 0.99y = 1.99", "0.99x + 0.98y = 1.97"],
            "solution": "x = 1, y = 1",
            "A": np.array([[1.00, 0.99], [0.99, 0.98]], dtype=float),
            "b": np.array([1.99, 1.97], dtype=float),
            "explanation": """
            **Problema**: Resolver o sistema linear 
            1.00x + 0.99y = 1.99
            0.99x + 0.98y = 1.97
            
            **Caracter√≠sticas do Sistema**:
            Este √© um exemplo de um sistema com matriz mal-condicionada. Observe que a segunda linha √© quase um m√∫ltiplo da primeira.
            
            **Consequ√™ncias do Mau Condicionamento**:
            - Pequenas perturba√ß√µes nos dados de entrada podem causar grandes altera√ß√µes na solu√ß√£o
            - Maior sensibilidade a erros de arredondamento
            - M√©todos num√©ricos podem ter dificuldade em convergir para a solu√ß√£o exata
            
            **Solu√ß√£o Exata**:
            x = 1, y = 1
            
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 1.00(1) + 0.99(1) = 1.00 + 0.99 = 1.99 ‚úì
            - Equa√ß√£o 2: 0.99(1) + 0.98(1) = 0.99 + 0.98 = 1.97 ‚úì
            
            **Demonstra√ß√£o do Mau Condicionamento**:
            Se introduzirmos uma pequena perturba√ß√£o, alterando o termo independente da primeira equa√ß√£o de 1.99 para 2.00:
            1.00x + 0.99y = 2.00
            0.99x + 0.98y = 1.97
            
            A solu√ß√£o muda significativamente para aproximadamente x = 2, y = 0, uma grande varia√ß√£o considerando a pequena mudan√ßa nos dados.
            
            Isso exemplifica por que sistemas mal-condicionados requerem cuidados especiais em aplica√ß√µes pr√°ticas.
            """
        },
        "Sistema N√£o-Linear Linearizado": {
            "title": "Sistema N√£o-Linear Linearizado",
            "equations": ["2x + y - 0.1xy = 2", "x + 2y - 0.1xy = 2"],
            "solution": "x ‚âà 0.91, y ‚âà 0.57 (solu√ß√£o aproximada ap√≥s lineariza√ß√£o)",
            "A": np.array([[2, 1], [1, 2]], dtype=float),
            "b": np.array([2, 2], dtype=float),
            "explanation": """
            **Problema Original**: Resolver o sistema n√£o-linear 
            2x + y - 0.1xy = 2
            x + 2y - 0.1xy = 2
            
            **Abordagem de Lineariza√ß√£o**:
            Para sistemas n√£o-lineares moderados, podemos usar a lineariza√ß√£o como primeira aproxima√ß√£o.
            Ignorando os termos n√£o-lineares (neste caso, -0.1xy), obtemos o sistema linear:
            
            2x + y = 2
            x + 2y = 2
            
            **Solu√ß√£o do Sistema Linearizado**:
            Este sistema linear tem solu√ß√£o x = 2/3, y = 2/3.
            
            **Refinamento**:
            Podemos usar esta solu√ß√£o como ponto inicial para um m√©todo iterativo, como Newton-Raphson.
            Ap√≥s algumas itera√ß√µes, convergimos para a solu√ß√£o x ‚âà 0.91, y ‚âà 0.57.
            
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 2(0.91) + 0.57 - 0.1(0.91)(0.57) ‚âà 1.82 + 0.57 - 0.05 ‚âà 2.34 ‚â† 2
            - Equa√ß√£o 2: 0.91 + 2(0.57) - 0.1(0.91)(0.57) ‚âà 0.91 + 1.14 - 0.05 ‚âà 2.00 ‚úì
            
            (Nota: A discrep√¢ncia na primeira equa√ß√£o sugere que precisar√≠amos de mais itera√ß√µes para obter uma solu√ß√£o mais precisa.)
            
            **Import√¢ncia da Lineariza√ß√£o**:
            A lineariza√ß√£o √© frequentemente usada como passo inicial para resolver problemas n√£o-lineares,
            fornecendo uma aproxima√ß√£o que pode ser refinada com m√©todos mais sofisticados.
            """
        }
    }
    
    return examples.get(example_type, {"title": "Exemplo n√£o encontrado", "equations": [], "solution": "", "explanation": "", "A": None, "b": None})

def get_youtube_videos():
    """Retorna uma lista de v√≠deos do YouTube sobre sistemas lineares"""
    videos = [
        {
            "title": "Introdu√ß√£o a Sistemas Lineares",
            "url": "https://www.youtube.com/watch?v=example1",
            "duration": "15:23",
            "description": "Uma introdu√ß√£o b√°sica aos sistemas de equa√ß√µes lineares e suas aplica√ß√µes."
        },
        {
            "title": "M√©todo de Elimina√ß√£o de Gauss Explicado",
            "url": "https://www.youtube.com/watch?v=example2",
            "duration": "22:17",
            "description": "Aprenda como resolver sistemas lineares usando o m√©todo de elimina√ß√£o de Gauss com exemplos passo a passo."
        },
        {
            "title": "Regra de Cramer - Teoria e Exemplos",
            "url": "https://www.youtube.com/watch?v=example3",
            "duration": "18:42",
            "description": "Entenda como aplicar a regra de Cramer para resolver sistemas de equa√ß√µes lineares usando determinantes."
        },
        {
            "title": "Interpreta√ß√£o Geom√©trica de Sistemas Lineares",
            "url": "https://www.youtube.com/watch?v=example4",
            "duration": "24:05",
            "description": "Visualiza√ß√£o gr√°fica de sistemas 2D e 3D e o significado geom√©trico das solu√ß√µes."
        },
        {
            "title": "Aplica√ß√µes de Sistemas Lineares na Engenharia",
            "url": "https://www.youtube.com/watch?v=example5",
            "duration": "32:48",
            "description": "Casos reais de aplica√ß√£o de sistemas lineares em problemas de engenharia el√©trica e mec√¢nica."
        },
        {
            "title": "Matriz Inversa e Solu√ß√£o de Sistemas",
            "url": "https://www.youtube.com/watch?v=example6",
            "duration": "19:31",
            "description": "Como calcular a matriz inversa e us√°-la para resolver sistemas lineares."
        },
        {
            "title": "M√©todos Iterativos: Jacobi e Gauss-Seidel",
            "url": "https://www.youtube.com/watch?v=example7",
            "duration": "27:15",
            "description": "T√©cnicas iterativas para resolver sistemas lineares de grande porte."
        },
        {
            "title": "Decomposi√ß√£o LU na Pr√°tica",
            "url": "https://www.youtube.com/watch?v=example8",
            "duration": "21:55",
            "description": "Implementa√ß√£o e aplica√ß√£o da decomposi√ß√£o LU para sistemas lineares."
        },
        {
            "title": "Sistemas Mal-Condicionados e Estabilidade Num√©rica",
            "url": "https://www.youtube.com/watch?v=example9",
            "duration": "29:37",
            "description": "Problemas e solu√ß√µes para sistemas lineares numericamente inst√°veis."
        },
        {
            "title": "Sistemas Lineares com Python e NumPy",
            "url": "https://www.youtube.com/watch?v=example10",
            "duration": "35:22",
            "description": "Implementa√ß√£o computacional de m√©todos para solu√ß√£o de sistemas usando bibliotecas Python."
        }
    ]
    return videos

# Configura√ß√£o da interface

def main():
    st.sidebar.image("https://i.imgur.com/JJ58f0d.png", width=280)
    st.sidebar.title("Navega√ß√£o")
    
    pages = ["In√≠cio", "Resolver Sistema", "Teoria", "Exerc√≠cios", "Exemplos", "Refer√™ncia R√°pida", "V√≠deo-Aulas", "Dashboard de Progresso"]
    selection = st.sidebar.radio("Ir para:", pages)
    
    if selection == "In√≠cio":
        show_home_page()
    elif selection == "Resolver Sistema":
        show_solver_page()
    elif selection == "Teoria":
        show_theory_page()
    elif selection == "Exerc√≠cios":
        show_exercises_page()
    elif selection == "Exemplos":
        show_examples_page()
    elif selection == "Refer√™ncia R√°pida":
        show_reference_page()
    elif selection == "V√≠deo-Aulas":
        show_videos_page()
    else:
        show_dashboard_page()

def show_home_page():
    st.title("üìê Sistema Linear Solver")
    st.subheader("Guia Universit√°rio de Sistemas Lineares")
    
    st.markdown("""
    ## Bem-vindo √† sua ferramenta completa de estudo de Sistemas Lineares!
    
    Este aplicativo foi desenvolvido para ajudar estudantes universit√°rios a entender, resolver e visualizar 
    sistemas de equa√ß√µes lineares usando diferentes m√©todos.
    """)
    
    col1, col2 = st.columns([3, 2])
    
    with col1:
        st.markdown("""
        ### O que voc√™ pode fazer aqui:
        
        - **Resolver sistemas** lineares usando diversos m√©todos matem√°ticos
        - **Visualizar graficamente** sistemas de 2 e 3 vari√°veis
        - **Aprender a teoria** por tr√°s da √°lgebra linear
        - **Praticar** com exerc√≠cios e exemplos resolvidos
        - **Consultar refer√™ncias r√°pidas** sobre m√©todos e conceitos
        - **Assistir v√≠deo-aulas** tem√°ticas
        - **Acompanhar seu progresso** atrav√©s de dashboards interativos
        
        ### Funcionalidades avan√ßadas:
        
        - Suporte a sistemas com at√© 5 vari√°veis
        - M√∫ltiplos m√©todos de resolu√ß√£o: Gauss, Cramer, Matriz Inversa, LU, Jacobi, Gauss-Seidel
        - Classifica√ß√£o autom√°tica de sistemas
        - Exerc√≠cios personalizados por √°rea de conhecimento
        - Visualiza√ß√µes interativas em 2D e 3D
        """)
        
        st.info("""
        **Dica:** Se voc√™ √© novo no estudo de sistemas lineares, recomendamos seguir este caminho de aprendizado:
        
        1. Comece pela se√ß√£o **Teoria** para entender os conceitos fundamentais
        2. Explore os **Exemplos** para ver aplica√ß√µes pr√°ticas
        3. Pratique com os **Exerc√≠cios** para testar seu conhecimento
        4. Use a se√ß√£o **Resolver Sistema** para trabalhar com seus pr√≥prios problemas
        """)
    
    with col2:
        st.markdown("### Recursos Populares:")
        
        # Alterando para usar bot√µes mais estilizados
        resource_options = ["Resolver um Sistema", "Aprender a Teoria", "Praticar com Exerc√≠cios", "Ver Exemplos Resolvidos"]
        
        for i, option in enumerate(resource_options):
            if st.button(f"üìå {option}", key=f"home_btn_{i}", use_container_width=True):
                st.session_state.page = option.split()[0]
                st.experimental_rerun()
            
        st.markdown("---")
        st.markdown("""
        ### Pr√≥ximas Atualiza√ß√µes:
        
        üÜï **Chegando em breve:**
        - M√≥dulo de √°lgebra matricial avan√ßada
        - Integra√ß√£o com ambientes de programa√ß√£o
        - Novos exerc√≠cios tem√°ticos
        - Mapas conceituais interativos
        """)
        
        # Estat√≠sticas de uso
        st.markdown("---")
        st.markdown("### Estat√≠sticas de Uso")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Exerc√≠cios Resolvidos", "247")
        with col2:
            st.metric("Sistemas Processados", "1.289")

def show_dashboard_page():
    st.title("üìä Dashboard de Progresso")
    
    # Simula√ß√£o de dados de progresso do usu√°rio
    if "progress_data" not in st.session_state:
        # Gerar dados simulados
        dates = [datetime.now() - timedelta(days=x) for x in range(30, 0, -1)]
        exercises_done = np.cumsum(np.random.randint(0, 3, size=30))
        correct_answers = np.cumsum(np.random.randint(0, 2, size=30))
        
        difficulty_counts = {
            "F√°cil": np.random.randint(10, 20),
            "M√©dio": np.random.randint(5, 15),
            "Dif√≠cil": np.random.randint(0, 10)
        }
        
        method_usage = {
            "Elimina√ß√£o de Gauss": np.random.randint(10, 30),
            "Regra de Cramer": np.random.randint(5, 20),
            "Matriz Inversa": np.random.randint(5, 15),
            "Decomposi√ß√£o LU": np.random.randint(0, 10),
            "M√©todos Iterativos": np.random.randint(0, 8)
        }
        
        topic_proficiency = {
            "Classifica√ß√£o de Sistemas": np.random.uniform(0.5, 1.0),
            "Elimina√ß√£o de Gauss": np.random.uniform(0.4, 0.9),
            "Regra de Cramer": np.random.uniform(0.3, 0.8),
            "Matriz Inversa": np.random.uniform(0.2, 0.7),
            "Aplica√ß√µes em Engenharia": np.random.uniform(0.1, 0.6),
            "Interpreta√ß√£o Geom√©trica": np.random.uniform(0.1, 0.5)
        }
        
        st.session_state.progress_data = {
            "dates": dates,
            "exercises_done": exercises_done,
            "correct_answers": correct_answers,
            "difficulty_counts": difficulty_counts,
            "method_usage": method_usage,
            "topic_proficiency": topic_proficiency
        }
    
    # Exibir dados
    st.subheader("Resumo de Atividades")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="Exerc√≠cios Completados", 
            value=st.session_state.progress_data["exercises_done"][-1],
            delta=3
        )
    
    with col2:
        correct_rate = int(st.session_state.progress_data["correct_answers"][-1] / 
                          st.session_state.progress_data["exercises_done"][-1] * 100)
        st.metric(
            label="Taxa de Acerto", 
            value=f"{correct_rate}%",
            delta=2
        )
    
    with col3:
        st.metric(
            label="Sistemas Resolvidos", 
            value=12,
            delta=4
        )
    
    # Gr√°fico de progresso
    st.subheader("Evolu√ß√£o de Aprendizado")
    
    progress_df = pd.DataFrame({
        'Data': st.session_state.progress_data["dates"],
        'Exerc√≠cios Realizados': st.session_state.progress_data["exercises_done"],
        'Respostas Corretas': st.session_state.progress_data["correct_answers"]
    })
    
    progress_chart = alt.Chart(progress_df).transform_fold(
        ['Exerc√≠cios Realizados', 'Respostas Corretas'],
        as_=['Categoria', 'Quantidade']
    ).mark_line(point=True).encode(
        x='Data:T',
        y='Quantidade:Q',
        color='Categoria:N',
        tooltip=['Data:T', 'Quantidade:Q', 'Categoria:N']
    ).properties(
        width=700,
        height=400
    ).interactive()
    
    st.altair_chart(progress_chart, use_container_width=True)
    
    # Gr√°ficos de distribui√ß√£o
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Distribui√ß√£o por Dificuldade")
        difficulty_df = pd.DataFrame({
            'Dificuldade': list(st.session_state.progress_data["difficulty_counts"].keys()),
            'Quantidade': list(st.session_state.progress_data["difficulty_counts"].values())
        })
        
        difficulty_chart = alt.Chart(difficulty_df).mark_bar().encode(
            x='Dificuldade:N',
            y='Quantidade:Q',
            color='Dificuldade:N',
            tooltip=['Dificuldade:N', 'Quantidade:Q']
        ).properties(
            width=300,
            height=300
        )
        
        st.altair_chart(difficulty_chart, use_container_width=True)
    
    with col2:
        st.subheader("M√©todos Utilizados")
        method_df = pd.DataFrame({
            'M√©todo': list(st.session_state.progress_data["method_usage"].keys()),
            'Quantidade': list(st.session_state.progress_data["method_usage"].values())
        })
        
        method_chart = alt.Chart(method_df).mark_bar().encode(
            x='M√©todo:N',
            y='Quantidade:Q',
            color='M√©todo:N',
            tooltip=['M√©todo:N', 'Quantidade:Q']
        ).properties(
            width=300,
            height=300
        )
        
        st.altair_chart(method_chart, use_container_width=True)
    
    # Gr√°fico de radar para profici√™ncia por t√≥pico
    st.subheader("Profici√™ncia por T√≥pico")
    
    proficiency_df = pd.DataFrame({
        'T√≥pico': list(st.session_state.progress_data["topic_proficiency"].keys()),
        'Profici√™ncia': list(st.session_state.progress_data["topic_proficiency"].values())
    })
    
    # Usando um gr√°fico de barras horizontais para simular um gr√°fico de radar
    proficiency_chart = alt.Chart(proficiency_df).mark_bar().encode(
        y=alt.Y('T√≥pico:N', sort='-x'),
        x=alt.X('Profici√™ncia:Q', scale=alt.Scale(domain=[0, 1])),
        color=alt.Color('Profici√™ncia:Q', scale=alt.Scale(scheme='viridis')),
        tooltip=['T√≥pico:N', 'Profici√™ncia:Q']
    ).properties(
        width=700,
        height=400
    )
    
    st.altair_chart(proficiency_chart, use_container_width=True)
    
    # Recomenda√ß√µes personalizadas
    st.subheader("Recomenda√ß√µes Personalizadas")
    
    # Encontrar o t√≥pico com menor profici√™ncia
    min_topic = min(st.session_state.progress_data["topic_proficiency"].items(), key=lambda x: x[1])
    
    st.info(f"""
    **Baseado no seu progresso, recomendamos:**
    
    1. **Fortalecer conhecimentos em "{min_topic[0]}"** - Este parece ser um ponto de melhoria.
    2. **Avan√ßar para exerc√≠cios mais dif√≠ceis** - Voc√™ est√° se saindo bem nos exerc√≠cios de n√≠vel f√°cil e m√©dio.
    3. **Explorar m√©todos iterativos** - Voc√™ tem usado principalmente m√©todos diretos.
    
    Continue praticando regularmente para manter seu progresso!
    """)
    
    # Op√ß√µes de exporta√ß√£o
    st.subheader("Exportar Dados de Progresso")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä Exportar Estat√≠sticas (PDF)", use_container_width=True):
            st.success("Estat√≠sticas exportadas com sucesso! (Simula√ß√£o)")
    
    with col2:
        if st.button("üìà Exportar Dados Brutos (CSV)", use_container_width=True):
            st.success("Dados exportados com sucesso! (Simula√ß√£o)")

def show_videos_page():
    st.title("üé¨ V√≠deo-Aulas sobre Sistemas Lineares")
    
    videos = get_youtube_videos()
    
    # Filtro de v√≠deos
    col1, col2 = st.columns([1, 3])
    
    with col1:
        st.subheader("Filtros")
        
        search_term = st.text_input("Buscar por termo:")
        
        categories = ["Todos", "Teoria", "M√©todos", "Aplica√ß√µes", "Visualiza√ß√£o"]
        selected_category = st.selectbox("Categoria:", categories)
        
        st.markdown("### Dura√ß√£o")
        max_duration = st.slider("M√°ximo (minutos):", 5, 60, 40)
        
        if st.button("Limpar Filtros"):
            search_term = ""
            selected_category = "Todos"
            max_duration = 40
    
    with col2:
        # Filtrar v√≠deos (simula√ß√£o simplificada)
        filtered_videos = videos
        if search_term:
            filtered_videos = [v for v in videos if search_term.lower() in v["title"].lower() or search_term.lower() in v["description"].lower()]
        
        if selected_category != "Todos":
            # Simula√ß√£o simplificada de categoriza√ß√£o
            if selected_category == "Teoria":
                keywords = ["introdu√ß√£o", "teoria", "conceitos"]
            elif selected_category == "M√©todos":
                keywords = ["m√©todo", "elimina√ß√£o", "gauss", "cramer", "inversa", "jacobi"]
            elif selected_category == "Aplica√ß√µes":
                keywords = ["aplica√ß√£o", "engenharia", "problema"]
            else:  # Visualiza√ß√£o
                keywords = ["visualiza√ß√£o", "geom√©trica", "gr√°fico"]
                
            filtered_videos = [v for v in filtered_videos if any(k in v["title"].lower() or k in v["description"].lower() for k in keywords)]
        
        # Filtrar por dura√ß√£o
        filtered_videos = [v for v in filtered_videos if int(v["duration"].split(":")[0]) <= max_duration]
        
        # Exibir v√≠deos
        if filtered_videos:
            st.subheader(f"V√≠deos Dispon√≠veis ({len(filtered_videos)})")
            
            for i, video in enumerate(filtered_videos):
                with st.expander(f"{i+1}. {video['title']} ({video['duration']})", expanded=i==0):
                    st.markdown(f"**Descri√ß√£o**: {video['description']}")
                    
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        # Simula√ß√£o de thumbnail do v√≠deo
                        st.image("https://via.placeholder.com/640x360.png?text=Video+Thumbnail", use_column_width=True)
                    
                    with col2:
                        st.markdown(f"**Dura√ß√£o**: {video['duration']}")
                        st.markdown(f"**ID**: {video['url'].split('=')[1]}")
                        
                        if st.button("‚ñ∂Ô∏è Assistir", key=f"watch_{i}", use_container_width=True):
                            st.markdown(f"[Abrir no YouTube]({video['url']})")
                        
                        if st.button("üì• Download", key=f"download_{i}", use_container_width=True):
                            st.success("Download iniciado! (Simula√ß√£o)")
        else:
            st.warning("Nenhum v√≠deo encontrado com os filtros atuais.")
    
    # Recursos adicionais
    st.subheader("Recursos Complementares")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("### Playlists Recomendadas")
        st.markdown("- [√Ålgebra Linear Completa](https://youtube.com/playlist)")
        st.markdown("- [Sistemas Lineares para Engenharia](https://youtube.com/playlist)")
        st.markdown("- [M√©todos Num√©ricos Avan√ßados](https://youtube.com/playlist)")
    
    with col2:
        st.markdown("### Material de Apoio")
        st.markdown("- [Apostila de Sistemas Lineares (PDF)](https://example.com/pdf)")
        st.markdown("- [Slides das Aulas (PPT)](https://example.com/slides)")
        st.markdown("- [C√≥digos de Implementa√ß√£o (GitHub)](https://github.com/example)")
    
    with col3:
        st.markdown("### Canais Recomendados")
        st.markdown("- [Professor Matem√°tica](https://youtube.com/channel)")
        st.markdown("- [Engenharia Explicada](https://youtube.com/channel)")
        st.markdown("- [Matem√°tica Universit√°ria](https://youtube.com/channel)")

# Chamada da fun√ß√£o principal - quando o script √© executado diretamente
if __name__ == "__main__":
    main()
