import streamlit as st
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from scipy import linalg
import random
import datetime
import base64
from io import BytesIO
import json
import time
from matplotlib.colors import LinearSegmentedColormap
from sympy import Matrix, symbols
from sympy.solvers.solveset import linsolve

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema Linear Solver Pro - Guia Universit√°rio",
    page_icon="üìê",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Aplicar CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem !important;
        font-weight: 800 !important;
        color: #1E88E5 !important;
        text-align: center;
        margin-bottom: 1rem;
    }
    
    .sub-header {
        font-size: 1.8rem !important;
        font-weight: 600 !important;
        color: #0D47A1 !important;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    
    .section-card {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    
    .highlight-text {
        background-color: #e3f2fd;
        padding: 5px 10px;
        border-radius: 4px;
        font-weight: 500;
    }
    
    .stButton>button {
        width: 100%;
        border-radius: 5px;
        height: 3em;
        font-weight: 500;
    }
    
    .feature-card {
        background-color: #ffffff;
        border-left: 4px solid #1E88E5;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        margin-bottom: 10px;
    }
    
    .metric-card {
        background-color: #e3f2fd;
        border-radius: 8px;
        padding: 15px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        color: #1E88E5;
    }
    
    .metric-label {
        font-size: 1rem;
        color: #0D47A1;
    }
    
    .step-box {
        border-left: 3px solid #1E88E5;
        padding-left: 15px;
        margin: 10px 0;
    }
    
    .theory-card {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .video-container {
        position: relative;
        padding-bottom: 56.25%;
        height: 0;
        overflow: hidden;
        max-width: 100%;
    }
    
    .video-container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
    .exercise-card {
        background-color: #f1f8e9;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        border-left: 4px solid #7cb342;
    }
    
    .solution-card {
        background-color: #fff3e0;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        border-left: 4px solid #ff9800;
    }
    
    /* Tabs estilizados */
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: #f8f9fa;
        border-radius: 5px 5px 0 0;
        gap: 1px;
        padding-top: 10px;
        padding-bottom: 10px;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #1E88E5;
        color: white;
    }
    
    /* Link estilizado */
    .custom-link {
        color: #1E88E5;
        text-decoration: none;
        font-weight: 500;
    }
    
    .custom-link:hover {
        text-decoration: underline;
        color: #0D47A1;
    }
    
    /* Badge estilizado */
    .badge {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 10px;
        font-size: 0.8rem;
        font-weight: 500;
        margin-right: 5px;
    }
    
    .badge-primary {
        background-color: #e3f2fd;
        color: #1E88E5;
    }
    
    .badge-success {
        background-color: #e8f5e9;
        color: #43a047;
    }
    
    .badge-warning {
        background-color: #fff3e0;
        color: #ff9800;
    }
    
    .badge-info {
        background-color: #e0f7fa;
        color: #00acc1;
    }
    
    /* Timeline para hist√≥rico */
    .timeline-item {
        position: relative;
        padding-left: 40px;
        margin-bottom: 20px;
    }
    
    .timeline-item:before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        width: 15px;
        height: 15px;
        border-radius: 50%;
        background-color: #1E88E5;
    }
    
    .timeline-item:after {
        content: '';
        position: absolute;
        left: 7px;
        top: 15px;
        bottom: -15px;
        width: 1px;
        background-color: #1E88E5;
    }
    
    .timeline-item:last-child:after {
        display: none;
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√µes utilit√°rias
def create_system_matrix(coeffs, constants, vars_count):
    """Cria a matriz aumentada do sistema"""
    A = []
    b = []
    
    for i in range(len(coeffs)):
        row = []
        for j in range(vars_count):
            if j < len(coeffs[i]):
                row.append(coeffs[i][j])
            else:
                row.append(0)
        A.append(row)
        b.append(constants[i])
    
    return np.array(A), np.array(b)

def gaussian_elimination_steps(A, b):
    """Implementa o m√©todo de elimina√ß√£o de Gauss com passos detalhados"""
    n = len(b)
    # Criar uma matriz aumentada
    augmented = np.column_stack((A, b))
    steps = [f"Matriz aumentada inicial:\n{augmented.copy()}"]
    
    # Elimina√ß√£o para frente (Forward Elimination)
    for i in range(n):
        # Procurar o maior elemento na coluna atual (piv√¥ parcial)
        max_row = i + np.argmax(np.abs(augmented[i:, i]))
        
        # Trocar linhas se necess√°rio
        if max_row != i:
            augmented[[i, max_row]] = augmented[[max_row, i]]
            steps.append(f"Trocar linha {i+1} com linha {max_row+1}:\n{augmented.copy()}")
        
        # Escalonar as linhas abaixo do piv√¥
        pivot = augmented[i, i]
        if abs(pivot) < 1e-10:  # Verificar se o piv√¥ √© zero
            continue
        
        for j in range(i + 1, n):
            factor = augmented[j, i] / pivot
            augmented[j] = augmented[j] - factor * augmented[i]
            if abs(factor) > 1e-10:  # Ignora opera√ß√µes com fator aproximadamente zero
                steps.append(f"Linha {j+1} = Linha {j+1} - {factor:.4f} √ó Linha {i+1}:\n{augmented.copy()}")
    
    # Verificar se o sistema √© poss√≠vel
    for i in range(n):
        if abs(augmented[i, :-1].sum()) < 1e-10 and abs(augmented[i, -1]) > 1e-10:
            steps.append("Sistema imposs√≠vel (SI): Equa√ß√£o inconsistente detectada.")
            return steps, None
    
    # Substitui√ß√£o reversa (Back Substitution)
    x = np.zeros(n)
    back_sub_steps = []
    
    for i in range(n-1, -1, -1):
        if abs(augmented[i, i]) < 1e-10:  # Verificar piv√¥ zero
            if abs(augmented[i, -1]) < 1e-10:
                back_sub_steps.append(f"Linha {i+1} √© 0 = 0, sistema possui infinitas solu√ß√µes (SPI).")
                return steps + back_sub_steps, None
            else:
                back_sub_steps.append(f"Linha {i+1} resulta em 0 = {augmented[i, -1]}, sistema imposs√≠vel (SI).")
                return steps + back_sub_steps, None
        
        substitution_terms = []
        for j in range(i+1, n):
            if abs(augmented[i, j]) > 1e-10:
                x[i] -= augmented[i, j] * x[j]
                substitution_terms.append(f"{augmented[i, j]:.4f}√óx_{j+1}")
        
        x[i] += augmented[i, -1]
        x[i] /= augmented[i, i]
        
        if substitution_terms:
            back_sub_steps.append(f"x_{i+1} = ({augmented[i, -1]:.4f} - ({' + '.join(substitution_terms)})) / {augmented[i, i]:.4f} = {x[i]:.4f}")
        else:
            back_sub_steps.append(f"x_{i+1} = {augmented[i, -1]:.4f} / {augmented[i, i]:.4f} = {x[i]:.4f}")
    
    steps.extend(back_sub_steps)
    return steps, x

def gauss_jordan_steps(A, b):
    """Implementa o m√©todo de Gauss-Jordan (elimina√ß√£o completa) com passos detalhados"""
    n = len(b)
    # Criar uma matriz aumentada
    augmented = np.column_stack((A, b))
    steps = [f"Matriz aumentada inicial:\n{augmented.copy()}"]
    
    # Elimina√ß√£o para frente (Forward Elimination)
    for i in range(n):
        # Procurar o maior elemento na coluna atual (piv√¥ parcial)
        max_row = i + np.argmax(np.abs(augmented[i:, i]))
        
        # Trocar linhas se necess√°rio
        if max_row != i:
            augmented[[i, max_row]] = augmented[[max_row, i]]
            steps.append(f"Trocar linha {i+1} com linha {max_row+1}:\n{augmented.copy()}")
        
        # Normalizar a linha do piv√¥
        pivot = augmented[i, i]
        if abs(pivot) < 1e-10:  # Verificar se o piv√¥ √© zero
            continue
            
        augmented[i] = augmented[i] / pivot
        steps.append(f"Normalizar linha {i+1} (dividir por {pivot:.4f}):\n{augmented.copy()}")
        
        # Eliminar elementos acima e abaixo do piv√¥
        for j in range(n):
            if j != i:
                factor = augmented[j, i]
                augmented[j] = augmented[j] - factor * augmented[i]
                if abs(factor) > 1e-10:  # Ignorar opera√ß√µes com fator aproximadamente zero
                    steps.append(f"Linha {j+1} = Linha {j+1} - {factor:.4f} √ó Linha {i+1}:\n{augmented.copy()}")
    
    # Verificar se o sistema √© poss√≠vel
    x = augmented[:, -1]
    
    # Verificar linha de zeros
    for i in range(n):
        row_sum = np.sum(np.abs(augmented[i, :-1]))
        if row_sum < 1e-10 and abs(augmented[i, -1]) > 1e-10:
            steps.append("Sistema imposs√≠vel (SI): Equa√ß√£o inconsistente detectada (0 = n√£o-zero).")
            return steps, None
    
    steps.append(f"Solu√ß√£o final:\n{x}")
    return steps, x

def cramer_rule(A, b, detailed=True):
    """Implementa a regra de Cramer com passos detalhados"""
    n = len(b)
    det_A = np.linalg.det(A)
    steps = []
    
    if detailed:
        steps.append(f"Determinante da matriz principal A:\ndet(A) = {det_A:.4f}")
    
    if abs(det_A) < 1e-10:
        steps.append("O determinante da matriz √© zero. A regra de Cramer n√£o pode ser aplicada diretamente.")
        steps.append("O sistema pode ser SPI (infinitas solu√ß√µes) ou SI (imposs√≠vel).")
        return steps, None
    
    x = np.zeros(n)
    for i in range(n):
        A_i = A.copy()
        A_i[:, i] = b
        det_A_i = np.linalg.det(A_i)
        x[i] = det_A_i / det_A
        
        if detailed:
            steps.append(f"Determinante A_{i+1} (substituir coluna {i+1} por b):\ndet(A_{i+1}) = {det_A_i:.4f}")
            steps.append(f"x_{i+1} = det(A_{i+1}) / det(A) = {det_A_i:.4f} / {det_A:.4f} = {x[i]:.4f}")
    
    return steps, x

def matrix_inverse_method(A, b, detailed=True):
    """Resolve o sistema usando o m√©todo da matriz inversa"""
    steps = []
    try:
        # Calcular determinante para verificar inversibilidade
        det_A = np.linalg.det(A)
        if detailed:
            steps.append(f"Determinante da matriz A: det(A) = {det_A:.4f}")
        
        if abs(det_A) < 1e-10:
            steps.append("A matriz √© singular (determinante ‚âà 0). N√£o √© poss√≠vel encontrar a inversa.")
            steps.append("O sistema pode ser SPI (infinitas solu√ß√µes) ou SI (imposs√≠vel).")
            return steps, None
        
        # Calcular a matriz inversa
        A_inv = np.linalg.inv(A)
        if detailed:
            steps.append("Matriz inversa A‚Åª¬π:")
            steps.append(str(A_inv))
        
        # Calcular a solu√ß√£o
        x = np.dot(A_inv, b)
        if detailed:
            steps.append("Solu√ß√£o X = A‚Åª¬π √ó b:")
            steps.append(str(x))
        
        return steps, x
    except np.linalg.LinAlgError:
        steps.append("Erro ao calcular a inversa. A matriz √© singular.")
        return steps, None

def lu_decomposition_method(A, b, detailed=True):
    """Resolve o sistema usando o m√©todo da decomposi√ß√£o LU"""
    steps = []
    try:
        n = len(b)
        
        if detailed:
            steps.append("M√©todo da Decomposi√ß√£o LU:")
            steps.append("Vamos decompor a matriz A em A = LU, onde L √© triangular inferior e U √© triangular superior.")
        
        # Verificar se a matriz √© quadrada
        if A.shape[0] != A.shape[1]:
            steps.append("A matriz n√£o √© quadrada. A decomposi√ß√£o LU requer uma matriz quadrada.")
            return steps, None
        
        # Verificar singularidade
        det_A = np.linalg.det(A)
        if abs(det_A) < 1e-10:
            steps.append(f"A matriz √© singular (determinante ‚âà {det_A:.4e}). A decomposi√ß√£o LU pode ser inst√°vel.")
        
        # Realizar a decomposi√ß√£o LU
        P, L, U = linalg.lu(A)
        
        if detailed:
            steps.append("Matriz L (triangular inferior):")
            steps.append(str(L))
            steps.append("Matriz U (triangular superior):")
            steps.append(str(U))
            steps.append("Matriz P (permuta√ß√£o):")
            steps.append(str(P))
        
        # Calcular Pb
        Pb = np.dot(P, b)
        
        if detailed:
            steps.append("Vetor Pb (permutado):")
            steps.append(str(Pb))
            steps.append("Primeiro resolvemos Ly = Pb por substitui√ß√£o direta:")
        
        # Resolver Ly = Pb (substitui√ß√£o direta)
        y = np.zeros(n)
        sub_steps = []
        
        for i in range(n):
            sum_term = 0
            for j in range(i):
                sum_term += L[i, j] * y[j]
            y[i] = Pb[i] - sum_term
            
            if detailed:
                sub_steps.append(f"y_{i+1} = Pb_{i+1} - Œ£(L_{i+1,j} * y_j) = {Pb[i]:.4f} - {sum_term:.4f} = {y[i]:.4f}")
        
        if detailed:
            steps.extend(sub_steps)
            steps.append("Agora resolvemos Ux = y por substitui√ß√£o reversa:")
        
        # Resolver Ux = y (substitui√ß√£o reversa)
        x = np.zeros(n)
        sub_steps = []
        
        for i in range(n-1, -1, -1):
            sum_term = 0
            for j in range(i+1, n):
                sum_term += U[i, j] * x[j]
            
            if abs(U[i, i]) < 1e-10:
                sub_steps.append(f"U_{i+1,i+1} ‚âà 0. Divis√£o inst√°vel. O sistema pode ser SPI ou SI.")
                return steps + sub_steps, None
                
            x[i] = (y[i] - sum_term) / U[i, i]
            
            if detailed:
                sub_steps.append(f"x_{i+1} = (y_{i+1} - Œ£(U_{i+1,j} * x_j)) / U_{i+1,i+1} = ({y[i]:.4f} - {sum_term:.4f}) / {U[i, i]:.4f} = {x[i]:.4f}")
        
        if detailed:
            steps.extend(sub_steps)
        
        return steps, x
    except:
        steps.append("Erro ao realizar a decomposi√ß√£o LU. A matriz pode ser singular ou mal condicionada.")
        return steps, None

def jacobi_iteration_method(A, b, max_iter=50, tolerance=1e-6, detailed=True):
    """Resolve o sistema usando o m√©todo iterativo de Jacobi"""
    steps = []
    n = len(b)
    
    # Verificar a converg√™ncia (crit√©rio diagonal dominante)
    is_diag_dominant = True
    for i in range(n):
        if abs(A[i, i]) <= np.sum(np.abs(A[i, :])) - abs(A[i, i]):
            is_diag_dominant = False
            break
    
    if not is_diag_dominant and detailed:
        steps.append("Aviso: A matriz n√£o √© diagonalmente dominante. O m√©todo de Jacobi pode n√£o convergir.")
    
    # Inicializar com uma aproxima√ß√£o inicial (zeros)
    x = np.zeros(n)
    
    iterations = []
    
    # Processo iterativo
    for k in range(max_iter):
        x_old = x.copy()
        
        for i in range(n):
            sum_term = 0
            for j in range(n):
                if j != i:
                    sum_term += A[i, j] * x_old[j]
            
            if abs(A[i, i]) < 1e-10:
                steps.append(f"Erro: Elemento diagonal A_{i+1,i+1} √© aproximadamente zero.")
                return steps, None
                
            x[i] = (b[i] - sum_term) / A[i, i]
        
        # Registrar a itera√ß√£o
        error = np.max(np.abs(x - x_old))
        iterations.append((k+1, x.copy(), error))
        
        # Verificar converg√™ncia
        if error < tolerance:
            break
    
    # Informa√ß√µes sobre a converg√™ncia
    if detailed:
        steps.append(f"M√©todo de Jacobi com max_iter={max_iter}, tolerance={tolerance}:")
        steps.append("Para cada itera√ß√£o, calculamos:")
        steps.append("x_i^(k+1) = (b_i - Œ£(a_ij * x_j^(k))) / a_ii, para j ‚â† i")
        
        for it, x_val, err in iterations:
            steps.append(f"Itera√ß√£o {it}: x = {[f'{val:.6f}' for val in x_val]}, erro = {err:.6e}")
        
        if it >= max_iter-1 and error >= tolerance:
            steps.append(f"Aviso: O m√©todo n√£o convergiu dentro de {max_iter} itera√ß√µes.")
        else:
            steps.append(f"O m√©todo convergiu ap√≥s {it+1} itera√ß√µes com erro = {error:.6e}")
    
    return steps, x

def gauss_seidel_method(A, b, max_iter=50, tolerance=1e-6, detailed=True):
    """Resolve o sistema usando o m√©todo iterativo de Gauss-Seidel"""
    steps = []
    n = len(b)
    
    # Verificar a converg√™ncia (crit√©rio diagonal dominante)
    is_diag_dominant = True
    for i in range(n):
        if abs(A[i, i]) <= np.sum(np.abs(A[i, :])) - abs(A[i, i]):
            is_diag_dominant = False
            break
    
    if not is_diag_dominant and detailed:
        steps.append("Aviso: A matriz n√£o √© diagonalmente dominante. O m√©todo de Gauss-Seidel pode n√£o convergir.")
    
    # Inicializar com uma aproxima√ß√£o inicial (zeros)
    x = np.zeros(n)
    
    iterations = []
    
    # Processo iterativo
    for k in range(max_iter):
        x_old = x.copy()
        
        for i in range(n):
            sum1 = 0  # Soma dos termos j√° atualizados
            sum2 = 0  # Soma dos termos ainda n√£o atualizados
            
            for j in range(i):
                sum1 += A[i, j] * x[j]  # Usa valores j√° atualizados
                
            for j in range(i+1, n):
                sum2 += A[i, j] * x_old[j]  # Usa valores da itera√ß√£o anterior
            
            if abs(A[i, i]) < 1e-10:
                steps.append(f"Erro: Elemento diagonal A_{i+1,i+1} √© aproximadamente zero.")
                return steps, None
                
            x[i] = (b[i] - sum1 - sum2) / A[i, i]
        
        # Registrar a itera√ß√£o
        error = np.max(np.abs(x - x_old))
        iterations.append((k+1, x.copy(), error))
        
        # Verificar converg√™ncia
        if error < tolerance:
            break
    
    # Informa√ß√µes sobre a converg√™ncia
    if detailed:
        steps.append(f"M√©todo de Gauss-Seidel com max_iter={max_iter}, tolerance={tolerance}:")
        steps.append("Para cada itera√ß√£o, calculamos:")
        steps.append("x_i^(k+1) = (b_i - Œ£(a_ij * x_j^(k+1)) - Œ£(a_ij * x_j^(k))) / a_ii, para j < i e j > i")
        
        for it, x_val, err in iterations:
            steps.append(f"Itera√ß√£o {it}: x = {[f'{val:.6f}' for val in x_val]}, erro = {err:.6e}")
        
        if it >= max_iter-1 and error >= tolerance:
            steps.append(f"Aviso: O m√©todo n√£o convergiu dentro de {max_iter} itera√ß√µes.")
        else:
            steps.append(f"O m√©todo convergiu ap√≥s {it+1} itera√ß√µes com erro = {error:.6e}")
    
    return steps, x

def format_equation(coeffs, vars_list, equals_to):
    """Formata uma equa√ß√£o linear com vari√°veis nomeadas"""
    eq = ""
    first = True
    
    for i, coef in enumerate(coeffs):
        if abs(coef) < 1e-10:
            continue
            
        if coef > 0 and not first:
            eq += " + "
        elif coef < 0:
            eq += " - " if not first else "-"
            
        coef_abs = abs(coef)
        if abs(coef_abs - 1) < 1e-10:
            eq += f"{vars_list[i]}"
        else:
            eq += f"{coef_abs:.2f}{vars_list[i]}"
            
        first = False
    
    if not eq:
        eq = "0"
        
    eq += f" = {equals_to:.2f}"
    return eq

def plot_2d_system(A, b):
    """Gera um gr√°fico para um sistema 2x2"""
    if A.shape[1] < 2:
        return None
    
    fig, ax = plt.subplots(figsize=(10, 8))
    
    # Define o intervalo para x
    x = np.linspace(-10, 10, 1000)
    
    colors = ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6']
    
    for i in range(min(5, len(b))):
        # Calcula y para a linha i: a*x + b*y = c => y = (c - a*x) / b
        if abs(A[i, 1]) < 1e-10:  # Se b for zero, √© uma linha vertical
            ax.axvline(x=b[i]/A[i, 0], color=colors[i % len(colors)], 
                       label=f'Equa√ß√£o {i+1}: {format_equation(A[i], ["x", "y"], b[i])}')
        else:
            y = (b[i] - A[i, 0] * x) / A[i, 1]
            ax.plot(x, y, color=colors[i % len(colors)], 
                    label=f'Equa√ß√£o {i+1}: {format_equation(A[i], ["x", "y"], b[i])}')
    
    # Configura√ß√µes do gr√°fico
    ax.grid(True, alpha=0.3)
    ax.axhline(y=0, color='k', linestyle='-', alpha=0.3)
    ax.axvline(x=0, color='k', linestyle='-', alpha=0.3)
    ax.set_xlabel('x', fontsize=12)
    ax.set_ylabel('y', fontsize=12)
    ax.set_title('Representa√ß√£o Gr√°fica do Sistema', fontsize=14, fontweight='bold')
    ax.legend(fontsize=10)
    
    # Ajustar limites para visualiza√ß√£o adequada
    ax.set_xlim(-10, 10)
    ax.set_ylim(-10, 10)
    
    # Verificar se existe uma solu√ß√£o √∫nica
    try:
        solution = np.linalg.solve(A[:2, :2], b[:2])
        if np.all(np.isfinite(solution)):
            ax.plot(solution[0], solution[1], 'ko', markersize=8, label='Solu√ß√£o')
            ax.annotate(f'({solution[0]:.2f}, {solution[1]:.2f})', 
                        (solution[0], solution[1]), 
                        xytext=(10, 10), 
                        textcoords='offset points',
                        fontsize=10,
                        fontweight='bold')
    except:
        pass
    
    plt.tight_layout()
    return fig

def plot_3d_system(A, b):
    """Gera um gr√°fico 3D para um sistema com 3 vari√°veis"""
    if A.shape[1] < 3:
        return None
    
    # Criamos uma malha para os planos
    x = np.linspace(-5, 5, 20)
    y = np.linspace(-5, 5, 20)
    X, Y = np.meshgrid(x, y)

    fig = go.Figure()
    
    colors = ['blue', 'red', 'green', 'orange', 'purple']
    
    for i in range(min(5, len(b))):
        if abs(A[i, 2]) < 1e-10:  # Se o coeficiente de z for zero
            continue
            
        # Para a equa√ß√£o a*x + b*y + c*z = d, temos z = (d - a*x - b*y) / c
        Z = (b[i] - A[i, 0] * X - A[i, 1] * Y) / A[i, 2]
        
        fig.add_trace(go.Surface(
            x=X, y=Y, z=Z,
            opacity=0.7,
            colorscale=[[0, colors[i % len(colors)]], [1, colors[i % len(colors)]]],
            showscale=False,
            name=f'Equa√ß√£o {i+1}: {format_equation(A[i], ["x", "y", "z"], b[i])}'
        ))
    
    # Se tivermos uma solu√ß√£o √∫nica, plot√°-la
    try:
        solution = np.linalg.solve(A[:3, :3], b[:3])
        if np.all(np.isfinite(solution)):
            fig.add_trace(go.Scatter3d(
                x=[solution[0]],
                y=[solution[1]],
                z=[solution[2]],
                mode='markers',
                marker=dict(size=8, color='black'),
                name='Solu√ß√£o'
            ))
    except:
        pass
    
    fig.update_layout(
        title='Representa√ß√£o 3D do Sistema',
        scene=dict(
            xaxis_title='x',
            yaxis_title='y',
            zaxis_title='z',
            aspectmode='cube'
        ),
        margin=dict(l=0, r=0, b=0, t=30)
    )
    
    return fig

def sympy_solve_system(A, b):
    """Resolve o sistema usando SymPy para obter solu√ß√µes exatas ou param√©tricas"""
    n = A.shape[1]  # N√∫mero de vari√°veis
    var_symbols = symbols(f'x1:{n+1}')
    
    # Criar o sistema de equa√ß√µes
    system = []
    for i in range(len(b)):
        lhs = sum(A[i, j] * var_symbols[j] for j in range(n))
        rhs = b[i]
        system.append(sp.Eq(lhs, rhs))
    
    # Resolver o sistema
    solution = sp.solve(system, var_symbols)
    
    return solution, var_symbols

def classify_system(A, b):
    """Classifica o sistema como SPD, SPI ou SI"""
    # Criar matriz ampliada
    augmented = np.column_stack((A, b))
    
    # Calcular postos
    rank_A = np.linalg.matrix_rank(A)
    rank_aug = np.linalg.matrix_rank(augmented)
    
    if rank_A < rank_aug:
        return "Sistema Imposs√≠vel (SI)"
    elif rank_A == rank_aug and rank_A == A.shape[1]:
        return "Sistema Poss√≠vel e Determinado (SPD)"
    else:
        return "Sistema Poss√≠vel e Indeterminado (SPI)"

def get_practice_exercise(level, topic="Geral"):
    """Gera exerc√≠cios de pr√°tica com base no n√≠vel de dificuldade e t√≥pico"""
    # Banco de exerc√≠cios por n√≠vel e t√≥pico
    exercises_bank = {
        "F√°cil": {
            "Geral": [
                # 10 sistemas SPD 2x2 com solu√ß√£o inteira simples
                {"A": np.array([[1, 1], [1, -1]]), "x": np.array([3, 2])},
                {"A": np.array([[2, 1], [1, 2]]), "x": np.array([1, 3])},
                {"A": np.array([[3, 2], [1, 1]]), "x": np.array([2, 1])},
                {"A": np.array([[1, 2], [2, 3]]), "x": np.array([4, 2])},
                {"A": np.array([[4, 1], [1, 2]]), "x": np.array([2, 3])},
                {"A": np.array([[2, 3], [3, 1]]), "x": np.array([3, 2])},
                {"A": np.array([[5, 2], [3, 1]]), "x": np.array([1, 2])},
                {"A": np.array([[2, 5], [1, 3]]), "x": np.array([2, 1])},
                {"A": np.array([[3, 4], [2, 5]]), "x": np.array([5, 2])},
                {"A": np.array([[4, 3], [5, 2]]), "x": np.array([2, 5])},
            ],
            "Sistemas 2x2": [
                # 5 sistemas SPD 2x2 espec√≠ficos para este t√≥pico
                {"A": np.array([[2, 3], [4, 5]]), "x": np.array([3, 1])},
                {"A": np.array([[3, 1], [2, 4]]), "x": np.array([2, 2])},
                {"A": np.array([[5, 3], [2, 1]]), "x": np.array([1, 1])},
                {"A": np.array([[6, 2], [3, 3]]), "x": np.array([2, 1])},
                {"A": np.array([[1, 3], [5, 2]]), "x": np.array([3, 4])}
            ],
            "Aplica√ß√µes": [
                # 5 exerc√≠cios de aplica√ß√£o f√°ceis
                {"problem": "Uma mistura de 100g cont√©m dois componentes A e B. Se A custa R$5 por grama e B custa R$3 por grama, e o custo total da mistura √© R$430, quanto temos de cada componente?",
                 "A": np.array([[1, 1], [5, 3]]), "b": np.array([100, 430]), "vars": ["A", "B"]},
                {"problem": "Uma pessoa investiu um total de R$10.000 em dois fundos, um de renda fixa com rendimento de 8% e outro de renda vari√°vel com rendimento de 12%. Se o rendimento total foi de R$1.040, quanto foi investido em cada fundo?",
                 "A": np.array([[1, 1], [0.08, 0.12]]), "b": np.array([10000, 1040]), "vars": ["Renda Fixa", "Renda Vari√°vel"]},
                {"problem": "Um agricultor precisa misturar dois tipos de fertilizantes. O fertilizante A cont√©m 10% de nitrog√™nio e 5% de f√≥sforo, enquanto o B cont√©m 5% de nitrog√™nio e 15% de f√≥sforo. Para obter 12kg de uma mistura que contenha 8% de nitrog√™nio e 9% de f√≥sforo, quantos kg de cada fertilizante devem ser usados?",
                 "A": np.array([[1, 1], [0.1, 0.05], [0.05, 0.15]]), "b": np.array([12, 0.96, 1.08]), "vars": ["Fertilizante A", "Fertilizante B"]},
                {"problem": "Uma cafeteria vende dois tipos de caf√©: Ar√°bica e Robusta. Uma x√≠cara de Ar√°bica gera um lucro de R$2, e uma x√≠cara de Robusta gera um lucro de R$1,50. Se a cafeteria vendeu 200 x√≠caras de caf√© num dia e obteve um lucro de R$350, quantas x√≠caras de cada tipo foram vendidas?",
                 "A": np.array([[1, 1], [2, 1.5]]), "b": np.array([200, 350]), "vars": ["Ar√°bica", "Robusta"]},
                {"problem": "Um qu√≠mico precisa de 50ml de uma solu√ß√£o com 20% de √°cido. Ele tem duas solu√ß√µes dispon√≠veis: uma com 10% de √°cido e outra com 30% de √°cido. Que volume de cada solu√ß√£o deve misturar?",
                 "A": np.array([[1, 1], [0.1, 0.3]]), "b": np.array([50, 10]), "vars": ["Solu√ß√£o 10%", "Solu√ß√£o 30%"]}
            ]
        },
        "M√©dio": {
            "Geral": [
                # 10 sistemas mistos de dificuldade m√©dia
                {"A": np.array([[2, 1, -1], [3, -2, 1], [1, 2, 2]]), "x": np.array([1, 2, 3])},
                {"A": np.array([[3, 2, -1], [1, -1, 2], [2, 3, 1]]), "x": np.array([2, 3, 1])},
                {"A": np.array([[1, 1], [2, 2]]), "b": np.array([5, 10])},  # SPI
                {"A": np.array([[1, 2], [2, 4]]), "b": np.array([3, 7])},  # SI
                {"A": np.array([[1, 2, 3], [2, 4, 6], [3, 6, 9]]), "b": np.array([6, 12, 18])},  # SPI
                {"A": np.array([[4, 8, 12], [3, 6, 9], [2, 4, 6]]), "b": np.array([8, 6, 4])},  # SPI
                {"A": np.array([[2, 1, 1], [1, 3, 2], [1, 0, 0]]), "x": np.array([4, 2, 3])},
                {"A": np.array([[3, 1, 2], [2, 4, 1], [1, 2, 3]]), "x": np.array([1, 2, 1])},
                {"A": np.array([[2, 1, 3, 1], [1, -1, 2, 3], [3, 2, 1, 2], [2, 3, 1, 1]]), "x": np.array([1, 2, 3, 4])},
                {"A": np.array([[5, 2, 1, 3], [1, 4, 2, 1], [2, 3, 4, 2], [1, 1, 1, 5]]), "x": np.array([2, 1, 3, 2])},
            ],
            "Sistemas 3x3": [
                # 5 sistemas 3x3 espec√≠ficos para este t√≥pico
                {"A": np.array([[3, 1, 2], [1, 2, 1], [2, 1, 3]]), "x": np.array([2, 3, 1])},
                {"A": np.array([[4, 2, 1], [2, 5, 3], [1, 3, 6]]), "x": np.array([1, 2, 3])},
                {"A": np.array([[5, 1, 2], [1, 4, 3], [2, 3, 6]]), "x": np.array([3, 2, 1])},
                {"A": np.array([[2, 3, 1], [1, 2, 3], [3, 1, 2]]), "x": np.array([1, 3, 2])},
                {"A": np.array([[3, 2, 3], [2, 3, 2], [3, 2, 3]]), "x": np.array([2, 1, 2])}
            ],
            "Sistemas SPI": [
                # 5 sistemas SPI espec√≠ficos
                {"A": np.array([[1, 2, 3], [2, 4, 6]]), "b": np.array([6, 12])},
                {"A": np.array([[3, 1, 2], [6, 2, 4]]), "b": np.array([9, 18])},
                {"A": np.array([[2, 4], [1, 2]]), "b": np.array([6, 3])},
                {"A": np.array([[1, 3, 2], [2, 6, 4]]), "b": np.array([5, 10])},
                {"A": np.array([[4, 2, 6], [2, 1, 3]]), "b": np.array([12, 6])}
            ],
            "Sistemas SI": [
                # 5 sistemas SI espec√≠ficos
                {"A": np.array([[1, 2], [2, 4]]), "b": np.array([3, 7])},
                {"A": np.array([[2, 1], [4, 2]]), "b": np.array([5, 8])},
                {"A": np.array([[3, 1, 2], [6, 2, 4]]), "b": np.array([9, 20])},
                {"A": np.array([[1, 3, 2], [2, 6, 4]]), "b": np.array([5, 12])},
                {"A": np.array([[4, 2, 6], [2, 1, 3]]), "b": np.array([12, 8])}
            ],
            "M√©todos Iterativos": [
                # 5 sistemas para m√©todos iterativos
                {"A": np.array([[10, 2, 1], [1, 8, 3], [2, 1, 9]]), "x": np.array([5, 7, 4])},
                {"A": np.array([[8, 1, 2], [1, 7, 1], [2, 1, 6]]), "x": np.array([3, 4, 5])},
                {"A": np.array([[6, 1, 1], [1, 5, 1], [1, 1, 4]]), "x": np.array([2, 3, 1])},
                {"A": np.array([[5, 1, 0], [1, 6, 2], [0, 2, 7]]), "x": np.array([3, 2, 4])},
                {"A": np.array([[9, 2, 1], [2, 8, 3], [1, 3, 7]]), "x": np.array([4, 5, 6])}
            ]
        },
        "Dif√≠cil": {
            "Geral": [
                # 10 sistemas complexos de alta dificuldade
                {"A": np.array([[3.5, 1.2, -2.3], [1.8, -5.7, 4.2], [2.1, 3.9, -1.5]]), "x": np.array([1.5, 2.7, 3.2])},
                {"A": np.array([[0.5, 2.1, 3.6, 1.8], [1.9, 0.7, 2.2, 3.1], [4.2, 2.8, 1.5, 0.9], [1.1, 3.5, 2.6, 4.3]]), "x": np.array([2.3, 1.4, 3.7, 0.8])},
                {"A": np.array([[4, 1, 1, 1], [1, 3, -1, 1], [2, 1, 5, 1], [1, 1, 1, 4]]), "x": np.array([1, 2, 3, 4])},
                {"A": np.array([[2/3, 1/3, 1/6], [1/3, 2/3, 1/3], [1/6, 1/3, 2/3]]), "x": np.array([1, 2, 3])},
                {"A": np.array([[1, 1, 1], [1, 2, 3], [1, 3, 6]]), "b": np.array([6, 14, 30])} , # SPI
                {"A": np.array([[0.1, 0.7, 0.3, 0.2], [0.4, 0.1, 0.8, 0.4], [0.6, 0.3, 0.2, 0.9], [0.3, 0.5, 0.1, 0.7]]), "x": np.array([2.5, 1.8, 3.2, 0.6])},
                {"A": np.array([[2, 1, 5, 1, 3], [1, 3, 2, 4, 1], [5, 2, 1, 2, 3], [1, 4, 2, 1, 2], [3, 1, 3, 2, 4]]), "x": np.array([1, 2, 3, 4, 5])},
                {"A": np.array([[1, 2, 3, 1], [2, 4, 6, 3], [3, 6, 9, 3], [1, 3, 3, 2]]), "b": np.array([7, 15, 21, 9])},  # SPI
                {"A": np.array([[1, 2, 3, 4], [2, 5, 8, 11], [3, 8, 13, 18], [4, 11, 18, 25]]), "b": np.array([10, 26, 42, 58])},  # SPI
                {"A": np.array([[1, 1, 1, 1], [1, 2, 3, 4], [1, 3, 6, 10], [1, 4, 10, 20]]), "b": np.array([4, 10, 20, 35])},  # SI
            ],
            "Sistemas 4x4": [
                # 5 sistemas 4x4 espec√≠ficos
                {"A": np.array([[4, 1, 2, 3], [1, 5, 1, 2], [2, 1, 6, 1], [3, 2, 1, 7]]), "x": np.array([2, 3, 1, 4])},
                {"A": np.array([[6, 2, 1, 3], [2, 5, 4, 1], [1, 4, 7, 2], [3, 1, 2, 8]]), "x": np.array([1, 3, 2, 4])},
                {"A": np.array([[8, 1, 3, 2], [1, 7, 2, 1], [3, 2, 9, 4], [2, 1, 4, 6]]), "x": np.array([3, 2, 4, 1])},
                {"A": np.array([[5, 2, 1, 3], [2, 9, 3, 2], [1, 3, 7, 4], [3, 2, 4, 8]]), "x": np.array([1, 4, 3, 2])},
                {"A": np.array([[7, 3, 2, 1], [3, 8, 1, 2], [2, 1, 6, 3], [1, 2, 3, 5]]), "x": np.array([2, 1, 4, 3])}
            ],
            "Mal Condicionados": [
                # 5 sistemas mal condicionados
                {"A": np.array([[1, 0.99], [0.99, 0.98]]), "x": np.array([1, 1])},
                {"A": np.array([[1, 2, 3], [1.001, 2.001, 3.001], [1, 2, 3.001]]), "b": np.array([6, 6.003, 6.001])},
                {"A": np.array([[1, 1.001], [2, 2.001]]), "b": np.array([2.001, 4.002])},
                {"A": np.array([[1e-10, 1], [1, 1]]), "b": np.array([1, 2])},
                {"A": np.array([[1e5, 1], [1, 1e-5]]), "b": np.array([1e5+1, 1+1e-5])}
            ],
            "Aplica√ß√µes Complexas": [
                # 5 aplica√ß√µes complexas
                {"problem": "Uma empresa farmac√™utica produz tr√™s medicamentos: A, B e C. Cada medicamento utiliza tr√™s ingredientes ativos em diferentes propor√ß√µes. O ingrediente 1 √© utilizado em 2 unidades no medicamento A, 1 unidade no B e 3 unidades no C. O ingrediente 2 √© utilizado em 3 unidades no A, 2 unidades no B e 1 unidade no C. O ingrediente 3 √© utilizado em 1 unidade no A, 3 unidades no B e 2 unidades no C. Sabendo que a empresa possui 29 unidades do ingrediente 1, 26 unidades do ingrediente 2 e 28 unidades do ingrediente 3, quantas unidades de cada medicamento devem ser produzidas para utilizar todos os ingredientes dispon√≠veis?",
                 "A": np.array([[2, 1, 3], [3, 2, 1], [1, 3, 2]]), "b": np.array([29, 26, 28]), "vars": ["Medicamento A", "Medicamento B", "Medicamento C"]},
                {"problem": "Um nutricionista est√° formulando uma dieta que deve conter exatamente 1000 calorias, 60g de prote√≠nas, 30g de gorduras e 120g de carboidratos. Existem quatro alimentos dispon√≠veis com os seguintes valores nutricionais por 100g: Alimento 1: 250 calorias, 20g de prote√≠nas, 5g de gorduras, 25g de carboidratos; Alimento 2: 200 calorias, 10g de prote√≠nas, 10g de gorduras, 20g de carboidratos; Alimento 3: 150 calorias, 5g de prote√≠nas, 5g de gorduras, 25g de carboidratos; Alimento 4: 300 calorias, 15g de prote√≠nas, 10g de gorduras, 30g de carboidratos. Quantos gramas de cada alimento devem compor a dieta?",
                 "A": np.array([[2.5, 2.0, 1.5, 3.0], [20, 10, 5, 15], [5, 10, 5, 10], [25, 20, 25, 30]]), "b": np.array([10, 60, 30, 120]), "vars": ["Alimento 1", "Alimento 2", "Alimento 3", "Alimento 4"]},
                {"problem": "Um engenheiro qu√≠mico est√° equilibrando a seguinte rea√ß√£o: a C‚ÇìHy + b O‚ÇÇ ‚Üí c CO‚ÇÇ + d H‚ÇÇO, onde C‚ÇìHy representa um hidrocarboneto. Sabe-se que x = 8 e y = 18 (o hidrocarboneto √© o octano, C‚ÇàH‚ÇÅ‚Çà). Determine os coeficientes a, b, c, e d para que a equa√ß√£o esteja balanceada.",
                 "A": np.array([[-1, 0, 8, 0], [0, 0, 1, 1], [0, -2, 2, 1], [-18, 0, 0, 2]]), "b": np.array([0, 8, 0, 0]), "vars": ["a", "b", "c", "d"]},
                {"problem": "Um sistema de aquecimento tem quatro radiadores em uma casa. A pot√™ncia total necess√°ria √© de 12kW, e os radiadores est√£o conectados em um circuito fechado onde as temperaturas satisfazem as seguintes condi√ß√µes: T‚ÇÅ - T‚ÇÇ = 5¬∞C, T‚ÇÇ - T‚ÇÉ = 3¬∞C, T‚ÇÉ - T‚ÇÑ = 2¬∞C. Se a pot√™ncia de cada radiador √© proporcional √† sua temperatura (P·µ¢ = kT·µ¢, onde k √© uma constante), determine a pot√™ncia de cada radiador.",
                 "A": np.array([[1, 1, 1, 1], [1, -1, 0, 0], [0, 1, -1, 0], [0, 0, 1, -1]]), "b": np.array([12/0.1, 5, 3, 2]), "vars": ["P‚ÇÅ", "P‚ÇÇ", "P‚ÇÉ", "P‚ÇÑ"], "k": 0.1},
                {"problem": "Um engenheiro aeroespacial est√° analisando as for√ßas em uma estrutura com 4 juntas. As equa√ß√µes de equil√≠brio em cada junta s√£o: Junta 1: F‚ÇÅ + 2F‚ÇÇ - F‚ÇÉ = 100N; Junta 2: -F‚ÇÅ + 3F‚ÇÇ + 2F‚ÇÑ = 50N; Junta 3: F‚ÇÉ + F‚ÇÑ - 2F‚ÇÇ = 75N; Junta 4: 2F‚ÇÅ - F‚ÇÉ - 3F‚ÇÑ = 25N. Determine a for√ßa em cada membro da estrutura.",
                 "A": np.array([[1, 2, -1, 0], [-1, 3, 0, 2], [0, -2, 1, 1], [2, 0, -1, -3]]), "b": np.array([100, 50, 75, 25]), "vars": ["F‚ÇÅ", "F‚ÇÇ", "F‚ÇÉ", "F‚ÇÑ"]}
            ]
        }
    }
    
    # Selecionar um exerc√≠cio aleat√≥rio do banco
    if topic in exercises_bank[level]:
        exercise_data = random.choice(exercises_bank[level][topic])
    else:
        exercise_data = random.choice(exercises_bank[level]["Geral"])
    
    # Se for um problema de aplica√ß√£o, retornar diretamente
    if "problem" in exercise_data:
        return exercise_data
    
    # Caso contr√°rio, preparar o sistema
    A = exercise_data["A"]
    
    if "x" in exercise_data:  # Sistema SPD com solu√ß√£o conhecida
        x = exercise_data["x"]
        b = np.dot(A, x)
        system_type = "SPD"
    else:  # Sistema SPI ou SI j√° configurado
        b = exercise_data["b"]
        x = None
        system_type = classify_system(A, b)
    
    # Preparar equa√ß√µes formatadas
    var_names = ["x", "y", "z", "w"][:A.shape[1]]
    equations = []
    
    for i in range(min(len(b), A.shape[0])):
        eq = format_equation(A[i], var_names, b[i])
        equations.append(eq)
    
    question = "Resolva o sistema de equa√ß√µes lineares:"
    
    return A, b, question, equations, x, system_type

def check_user_answer(user_answer, solution, system_type):
    """Verifica a resposta do usu√°rio"""
    if system_type == "Sistema Poss√≠vel e Determinado (SPD)":
        try:
            user_values = [float(x.strip()) for x in user_answer.replace(',', ' ').split()]
            
            if len(user_values) != len(solution):
                return False, "N√∫mero incorreto de valores."
                
            # Verificar se a resposta est√° pr√≥xima da solu√ß√£o
            for u, s in zip(user_values, solution):
                if abs(u - s) > 1e-2:
                    return False, "Valores incorretos."
            
            return True, "Resposta correta!"
        except:
            return False, "Formato inv√°lido. Use n√∫meros separados por espa√ßos ou v√≠rgulas."
    elif system_type == "Sistema Poss√≠vel e Indeterminado (SPI)":
        return "SPI" in user_answer.upper(), "Verifique sua classifica√ß√£o do sistema."
    else:  # SI
        return "SI" in user_answer.upper() or "IMPOSS√çVEL" in user_answer.upper(), "Verifique sua classifica√ß√£o do sistema."

def get_reference_card(topic):
    """Retorna um cart√£o de refer√™ncia r√°pida para um t√≥pico espec√≠fico"""
    references = {
        "Classifica√ß√£o de Sistemas": """
        # Classifica√ß√£o de Sistemas Lineares
        
        Um sistema de equa√ß√µes lineares pode ser classificado como:
        
        ### Sistema Poss√≠vel e Determinado (SPD)
        - Possui **exatamente uma solu√ß√£o**
        - O determinante da matriz dos coeficientes √© **diferente de zero**
        - O posto da matriz dos coeficientes √© igual ao posto da matriz ampliada e igual ao n√∫mero de inc√≥gnitas
        
        ### Sistema Poss√≠vel e Indeterminado (SPI)
        - Possui **infinitas solu√ß√µes**
        - O posto da matriz dos coeficientes √© igual ao posto da matriz ampliada
        - O posto √© menor que o n√∫mero de inc√≥gnitas
        
        ### Sistema Imposs√≠vel (SI)
        - **N√£o possui solu√ß√£o**
        - O posto da matriz dos coeficientes √© menor que o posto da matriz ampliada
        """,
        
        "M√©todo de Elimina√ß√£o de Gauss": """
        # M√©todo de Elimina√ß√£o de Gauss
        
        O m√©todo de elimina√ß√£o de Gauss consiste em transformar o sistema em uma forma triangular atrav√©s de opera√ß√µes elementares:
        
        1. **Escalonamento para a forma triangular**:
           - Trocar linhas de posi√ß√£o
           - Multiplicar uma linha por uma constante n√£o nula
           - Substituir uma linha pela soma dela com um m√∫ltiplo de outra
           
        2. **Substitui√ß√£o reversa**:
           - Uma vez que o sistema est√° na forma triangular, resolver as inc√≥gnitas de baixo para cima
           
        O objetivo √© transformar a matriz aumentada em uma matriz escalonada na forma:
        
        ```
        | a‚ÇÅ‚ÇÅ a‚ÇÅ‚ÇÇ a‚ÇÅ‚ÇÉ ... | b
        ‚ÇÅ |
        | 0   a‚ÇÇ‚ÇÇ a‚ÇÇ‚ÇÉ ... | b‚ÇÇ |
        | 0   0   a‚ÇÉ‚ÇÉ ... | b‚ÇÉ |
        | ...             | ... |
        ```
        """,
        
        "Regra de Cramer": """
        # Regra de Cramer
        
        A regra de Cramer √© um m√©todo para resolver sistemas lineares usando determinantes. Para um sistema de n equa√ß√µes e n inc√≥gnitas:
        
        1. Calcular o determinante D da matriz A
        2. Para cada vari√°vel x·µ¢:
           - Substituir a coluna i da matriz A pela coluna B, obtendo a matriz A·µ¢
           - Calcular o determinante D·µ¢
           - A solu√ß√£o para x·µ¢ √© dada por x·µ¢ = D·µ¢/D
        
        **Limita√ß√µes**:
        - Aplic√°vel apenas a sistemas SPD (quando D ‚â† 0)
        - Computacionalmente ineficiente para sistemas grandes
        
        Para um sistema 2√ó2:
        ```
        a‚ÇÅx + b‚ÇÅy = c‚ÇÅ
        a‚ÇÇx + b‚ÇÇy = c‚ÇÇ
        ```
        
        x = |c‚ÇÅ b‚ÇÅ|/|a‚ÇÅ b‚ÇÅ| = (c‚ÇÅb‚ÇÇ - b‚ÇÅc‚ÇÇ)/(a‚ÇÅb‚ÇÇ - b‚ÇÅa‚ÇÇ)
            |c‚ÇÇ b‚ÇÇ| |a‚ÇÇ b‚ÇÇ|
            
        y = |a‚ÇÅ c‚ÇÅ|/|a‚ÇÅ b‚ÇÅ| = (a‚ÇÅc‚ÇÇ - c‚ÇÅa‚ÇÇ)/(a‚ÇÅb‚ÇÇ - b‚ÇÅa‚ÇÇ)
            |a‚ÇÇ c‚ÇÇ| |a‚ÇÇ b‚ÇÇ|
        """,
        
        "M√©todo da Matriz Inversa": """
        # M√©todo da Matriz Inversa
        
        Para um sistema na forma matricial AX = B, a solu√ß√£o √© dada por X = A‚Åª¬πB, onde A‚Åª¬π √© a matriz inversa de A.
        
        **Procedimento**:
        1. Verificar se a matriz A √© invers√≠vel (det(A) ‚â† 0)
        2. Calcular a matriz inversa A‚Åª¬π
        3. Multiplicar A‚Åª¬π por B para obter X
        
        **Observa√ß√µes**:
        - Aplic√°vel apenas quando a matriz A √© invers√≠vel (sistemas SPD)
        - Para matrizes 2√ó2, a inversa √© calculada como:
          ```
          |a b|‚Åª¬π = 1/(ad-bc) |d -b|
          |c d|              |-c  a|
          ```
        """,
        
        "M√©todo de Gauss-Jordan": """
        # M√©todo de Gauss-Jordan
        
        O m√©todo de Gauss-Jordan √© uma extens√£o do m√©todo de elimina√ß√£o de Gauss que leva a matriz aumentada √† forma escalonada reduzida.
        
        **Procedimento**:
        1. Aplicar opera√ß√µes elementares para obter 1's na diagonal principal
        2. Zerar todos os elementos acima e abaixo da diagonal principal
        
        **Forma final da matriz aumentada**:
        ```
        | 1 0 0 ... | x‚ÇÅ |
        | 0 1 0 ... | x‚ÇÇ |
        | 0 0 1 ... | x‚ÇÉ |
        | ...       | ... |
        ```
        
        O vetor solu√ß√£o pode ser lido diretamente da √∫ltima coluna da matriz.
        
        **Vantagens**:
        - A solu√ß√£o √© obtida diretamente, sem necessidade de substitui√ß√£o reversa
        - √ötil para calcular a inversa de uma matriz
        
        **Desvantagens**:
        - Requer mais opera√ß√µes que o m√©todo de Gauss padr√£o
        """,
        
        "M√©todos Iterativos": """
        # M√©todos Iterativos para Sistemas Lineares
        
        Os m√©todos iterativos come√ßam com uma aproxima√ß√£o inicial e melhoram progressivamente a solu√ß√£o.
        
        ## M√©todo de Jacobi
        
        **Procedimento**:
        1. Para cada equa√ß√£o i, isolar a inc√≥gnita x_i
        2. Iniciar com uma aproxima√ß√£o inicial (geralmente zeros)
        3. Em cada itera√ß√£o k+1, calcular:
           x_i^(k+1) = (b_i - Œ£ a_ij x_j^(k)) / a_ii, para j ‚â† i
        4. Repetir at√© convergir
        
        ## M√©todo de Gauss-Seidel
        
        Similar ao m√©todo de Jacobi, mas usa valores j√° atualizados na mesma itera√ß√£o:
        
        x_i^(k+1) = (b_i - Œ£ a_ij x_j^(k+1) - Œ£ a_ij x_j^(k)) / a_ii
                      j<i                j>i
        
        **Condi√ß√µes de converg√™ncia**:
        - Matriz diagonalmente dominante (|a_ii| > Œ£ |a_ij| para j ‚â† i)
        - Matriz definida positiva
        
        **Vantagens dos m√©todos iterativos**:
        - Mais eficientes para sistemas grandes e esparsos
        - Menor requisito de mem√≥ria
        - Podem lidar com matrizes mal condicionadas
        """,
        
        "Decomposi√ß√£o LU": """
        # Decomposi√ß√£o LU
        
        A decomposi√ß√£o LU fatoriza a matriz A em um produto de duas matrizes: A = LU, onde:
        - L √© uma matriz triangular inferior
        - U √© uma matriz triangular superior
        
        **Procedimento para resolver AX = B**:
        1. Decompor A = LU
        2. Resolver LY = B por substitui√ß√£o direta
        3. Resolver UX = Y por substitui√ß√£o reversa
        
        **Vantagens**:
        - Eficiente para resolver m√∫ltiplos sistemas com a mesma matriz de coeficientes
        - √ötil para calcular determinantes e inversas
        
        **Decomposi√ß√£o de Cholesky**:
        Para matrizes sim√©tricas definidas positivas, pode-se usar a decomposi√ß√£o de Cholesky: A = LL^T
        """,
        
        "Interpreta√ß√£o Geom√©trica": """
        # Interpreta√ß√£o Geom√©trica de Sistemas Lineares
        
        ### Sistemas 2√ó2
        - Cada equa√ß√£o representa uma **reta** no plano cartesiano
        - **SPD**: As retas se intersectam em um √∫nico ponto
        - **SPI**: As retas s√£o coincidentes (infinitos pontos de intersec√ß√£o)
        - **SI**: As retas s√£o paralelas (nenhum ponto de intersec√ß√£o)
        
        ### Sistemas 3√ó3
        - Cada equa√ß√£o representa um **plano** no espa√ßo tridimensional
        - **SPD**: Os tr√™s planos se intersectam em um √∫nico ponto
        - **SPI**: Os planos se intersectam em uma reta ou em um plano
        - **SI**: N√£o h√° ponto comum aos tr√™s planos
        
        ### Determinante e Volume
        - O determinante da matriz dos coeficientes est√° relacionado ao volume do paralelep√≠pedo formado pelos vetores-linha
        - Determinante zero: os vetores s√£o linearmente dependentes (coplanares ou colineares)
        """,
        
        "Sistemas Homog√™neos": """
        # Sistemas Lineares Homog√™neos
        
        Um sistema homog√™neo tem a forma AX = 0 (todos os termos independentes s√£o nulos).
        
        **Propriedades importantes**:
        1. Todo sistema homog√™neo √© poss√≠vel (sempre admite a solu√ß√£o trivial X = 0)
        2. Um sistema homog√™neo tem solu√ß√µes n√£o-triviais se e somente se det(A) = 0
        3. O conjunto de todas as solu√ß√µes forma um espa√ßo vetorial
        4. A dimens√£o do espa√ßo de solu√ß√µes √© n - posto(A), onde n √© o n√∫mero de inc√≥gnitas
        
        **Aplica√ß√µes**:
        - Espa√ßos nulos em √°lgebra linear
        - Autovalores e autovetores
        - Equa√ß√µes diferenciais homog√™neas
        """,
        
        "Teorema de Rouch√©-Capelli": """
        # Teorema de Rouch√©-Capelli
        
        Este teorema estabelece as condi√ß√µes para a exist√™ncia e unicidade de solu√ß√µes em sistemas lineares.
        
        **Enunciado**:
        Um sistema de equa√ß√µes lineares √©:
        
        1. **Compat√≠vel** (tem solu√ß√£o) se e somente se o posto da matriz dos coeficientes √© igual ao posto da matriz ampliada.
           - Se posto(A) = posto([A|B]) = n√∫mero de inc√≥gnitas ‚Üí **SPD** (solu√ß√£o √∫nica)
           - Se posto(A) = posto([A|B]) < n√∫mero de inc√≥gnitas ‚Üí **SPI** (infinitas solu√ß√µes)
        
        2. **Incompat√≠vel** (sem solu√ß√£o) se e somente se o posto da matriz dos coeficientes √© menor que o posto da matriz ampliada.
           - Se posto(A) < posto([A|B]) ‚Üí **SI**
        
        O **posto** de uma matriz √© o n√∫mero de linhas (ou colunas) linearmente independentes.
        """,
        
        "Estabilidade Num√©rica": """
        # Estabilidade Num√©rica em Sistemas Lineares
        
        **N√∫mero de condi√ß√£o**:
        - O n√∫mero de condi√ß√£o de uma matriz A, denotado por cond(A), mede a sensibilidade da solu√ß√£o a pequenas perturba√ß√µes nos dados
        - cond(A) = ||A|| √ó ||A‚Åª¬π||
        - Um sistema com n√∫mero de condi√ß√£o alto √© chamado de "mal condicionado"
        
        **Efeitos do mal condicionamento**:
        - Pequenos erros nos coeficientes ou termos independentes podem causar grandes erros na solu√ß√£o
        - M√©todos num√©ricos podem convergir lentamente ou n√£o convergir
        
        **Estrat√©gias para lidar com sistemas mal condicionados**:
        1. Usar precis√£o extra nos c√°lculos
        2. Aplicar t√©cnicas de pr√©-condicionamento
        3. Usar m√©todos de regulariza√ß√£o
        4. Empregar decomposi√ß√µes est√°veis, como QR ou SVD
        """,
        
        "Aplica√ß√µes Pr√°ticas": """
        # Aplica√ß√µes Pr√°ticas de Sistemas Lineares
        
        ### Engenharia
        - **An√°lise estrutural**: Determina√ß√£o de for√ßas e deforma√ß√µes em estruturas
        - **Circuitos el√©tricos**: C√°lculo de correntes e tens√µes usando as leis de Kirchhoff
        - **Processamento de sinais**: Filtros lineares e transformadas
        
        ### Ci√™ncias
        - **Balanceamento de equa√ß√µes qu√≠micas**: Os coeficientes s√£o determinados por sistemas lineares
        - **Modelos de popula√ß√£o**: Intera√ß√µes entre esp√©cies em ecossistemas
        - **F√≠sica de part√≠culas**: Conserva√ß√£o de energia e momento
        
        ### Economia
        - **Modelo de Leontief**: An√°lise de insumo-produto em economias
        - **Otimiza√ß√£o de portfolio**: Aloca√ß√£o de recursos com restri√ß√µes lineares
        - **Modelos de pre√ßos**: Equil√≠brio em mercados
        
        ### Computa√ß√£o Gr√°fica
        - **Transforma√ß√µes 3D**: Rota√ß√£o, transla√ß√£o e proje√ß√£o de objetos
        - **Interpola√ß√£o**: Ajuste de curvas e superf√≠cies
        - **Compress√£o de imagens**: Transforma√ß√µes lineares como DCT e SVD
        """,
        
        "Sistemas N√£o-Lineares": """
        # Sistemas N√£o-Lineares
        
        **Diferen√ßas em rela√ß√£o a sistemas lineares**:
        - Podem ter m√∫ltiplas solu√ß√µes (n√£o apenas 0, 1 ou infinitas)
        - M√©todos de resolu√ß√£o s√£o geralmente iterativos
        - Comportamento mais complexo e dif√≠cil de prever
        
        **M√©todos de resolu√ß√£o**:
        1. **M√©todo de Newton**: Generaliza√ß√£o multidimensional do m√©todo de Newton para encontrar ra√≠zes
           - Requer o c√°lculo da matriz Jacobiana
           - Converg√™ncia quadr√°tica pr√≥ximo √† solu√ß√£o
        
        2. **M√©todo do Ponto Fixo**: Reescrever o sistema na forma X = g(X) e iterar
        
        3. **M√©todos de otimiza√ß√£o**: Reformular como um problema de minimiza√ß√£o
        
        **Lineariza√ß√£o**:
        - Aproximar localmente o sistema n√£o-linear por um sistema linear
        - √ötil quando a n√£o-linearidade √© fraca ou para encontrar solu√ß√µes iniciais
        """,
    }
    
    return references.get(topic, "T√≥pico n√£o encontrado na base de conhecimento.")

def get_example_system(example_type):
    """Retorna um exemplo de sistema linear baseado no tipo selecionado"""
    examples = {
        "Sistema 2√ó2 (SPD)": {
            "title": "Sistema 2√ó2 com Solu√ß√£o √önica",
            "equations": ["x + y = 5", "2x - y = 1"],
            "solution": "x = 2, y = 3",
            "A": np.array([[1, 1], [2, -1]], dtype=float),
            "b": np.array([5, 1], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Poss√≠vel e Determinado (SPD) com duas equa√ß√µes e duas inc√≥gnitas.
            
            As duas retas se intersectam em um √∫nico ponto (2, 3), que √© a solu√ß√£o do sistema.
            
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 2 + 3 = 5 ‚úì
            - Equa√ß√£o 2: 2(2) - 3 = 4 - 3 = 1 ‚úì
            """
        },
        "Sistema 2√ó2 (SPI)": {
            "title": "Sistema 2√ó2 com Infinitas Solu√ß√µes",
            "equations": ["2x + 3y = 12", "4x + 6y = 24"],
            "solution": "x = t, y = (12-2t)/3, onde t √© um par√¢metro livre",
            "A": np.array([[2, 3], [4, 6]], dtype=float),
            "b": np.array([12, 24], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Poss√≠vel e Indeterminado (SPI).
            
            Observe que a segunda equa√ß√£o √© simplesmente um m√∫ltiplo da primeira (basta multiplicar a primeira por 2). 
            Portanto, as duas equa√ß√µes representam a mesma reta no plano, resultando em infinitas solu√ß√µes.
            
            A solu√ß√£o pode ser expressa na forma param√©trica:
            - x = t (par√¢metro livre)
            - y = (12 - 2t)/3
            
            Para qualquer valor de t, o par (t, (12-2t)/3) ser√° uma solu√ß√£o v√°lida para o sistema.
            """
        },
        "Sistema 2√ó2 (SI)": {
            "title": "Sistema 2√ó2 Imposs√≠vel",
            "equations": ["2x + 3y = 12", "2x + 3y = 15"],
            "solution": "Sem solu√ß√£o",
            "A": np.array([[2, 3], [2, 3]], dtype=float),
            "b": np.array([12, 15], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Imposs√≠vel (SI).
            
            As duas equa√ß√µes representam retas paralelas no plano, pois t√™m os mesmos coeficientes para x e y, 
            mas termos independentes diferentes. Geometricamente, isso significa que as retas nunca se intersectam.
            
            A inconsist√™ncia √© evidente: a mesma combina√ß√£o de x e y (2x + 3y) n√£o pode ser simultaneamente igual a 12 e 15.
            """
        },
        "Sistema 3√ó3 (SPD)": {
            "title": "Sistema 3√ó3 com Solu√ß√£o √önica",
            "equations": ["x + y + z = 6", "2x - y + z = 3", "x + 2y + 3z = 14"],
            "solution": "x = 1, y = 2, z = 3",
            "A": np.array([[1, 1, 1], [2, -1, 1], [1, 2, 3]], dtype=float),
            "b": np.array([6, 3, 14], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Poss√≠vel e Determinado (SPD) com tr√™s equa√ß√µes e tr√™s inc√≥gnitas.
            
            Os tr√™s planos representados pelas equa√ß√µes se intersectam em um √∫nico ponto (1, 2, 3).
            
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 1 + 2 + 3 = 6 ‚úì
            - Equa√ß√£o 2: 2(1) - 2 + 3 = 2 - 2 + 3 = 3 ‚úì
            - Equa√ß√£o 3: 1 + 2(2) + 3(3) = 1 + 4 + 9 = 14 ‚úì
            """
        },
        "Sistema 3√ó3 (SPI)": {
            "title": "Sistema 3√ó3 com Infinitas Solu√ß√µes",
            "equations": ["x + y + z = 6", "2x + 2y + 2z = 12", "x - y + 2z = 7"],
            "solution": "z = t (par√¢metro), y = 2-t, x = 4+t, onde t √© um par√¢metro livre",
            "A": np.array([[1, 1, 1], [2, 2, 2], [1, -1, 2]], dtype=float),
            "b": np.array([6, 12, 7], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Poss√≠vel e Indeterminado (SPI) com tr√™s equa√ß√µes e tr√™s inc√≥gnitas.
            
            Note que a segunda equa√ß√£o √© um m√∫ltiplo da primeira (basta multiplicar a primeira por 2). Isso significa 
            que temos efetivamente apenas duas equa√ß√µes independentes e tr√™s inc√≥gnitas, resultando em infinitas solu√ß√µes.
            
            Geometricamente, dois dos planos s√£o coincidentes, e a interse√ß√£o deles com o terceiro plano forma uma reta,
            n√£o um ponto √∫nico.
            
            A solu√ß√£o pode ser expressa na forma param√©trica:
            - z = t (par√¢metro livre)
            - y = 2 - t
            - x = 4 + t
            
            Para qualquer valor de t, a tripla (4+t, 2-t, t) ser√° uma solu√ß√£o v√°lida.
            """
        },
        "Sistema 3√ó3 (SI)": {
            "title": "Sistema 3√ó3 Imposs√≠vel",
            "equations": ["x + y + z = 6", "2x + 2y + 2z = 12", "3x + 3y + 3z = 21"],
            "solution": "Sem solu√ß√£o",
            "A": np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]], dtype=float),
            "b": np.array([6, 12, 21], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Imposs√≠vel (SI) com tr√™s equa√ß√µes e tr√™s inc√≥gnitas.
            
            Observe que a segunda equa√ß√£o √© um m√∫ltiplo da primeira (multiplique a primeira por 2),
            e a terceira deveria ser um m√∫ltiplo da primeira (multiplique a primeira por 3), mas o termo
            independente est√° incorreto: 3(6) = 18, n√£o 21.
            
            Geometricamente, isso significa que o terceiro plano √© paralelo aos outros dois (que s√£o coincidentes),
            tornando imposs√≠vel que os tr√™s planos tenham um ponto comum de interse√ß√£o.
            
            A inconsist√™ncia √© evidente ao dividir cada equa√ß√£o pelos coeficientes:
            - Equa√ß√£o 1: x + y + z = 6 ‚Üí x + y + z = 6
            - Equa√ß√£o 2: 2x + 2y + 2z = 12 ‚Üí x + y + z = 6
            - Equa√ß√£o 3: 3x + 3y + 3z = 21 ‚Üí x + y + z = 7
            
            A mesma combina√ß√£o x + y + z n√£o pode ser simultaneamente igual a 6 e 7.
            """
        },
        "Aplica√ß√£o: Mistura": {
            "title": "Problema de Mistura",
            "equations": ["x + y + z = 100", "0.1x + 0.2y + 0.4z = 25", "x + 0 + 0 = 30"],
            "solution": "x = 30, y = 50, z = 20",
            "A": np.array([[1, 1, 1], [0.1, 0.2, 0.4], [1, 0, 0]], dtype=float),
            "b": np.array([100, 25, 30], dtype=float),
            "explanation": """
            **Problema**: Uma mistura cont√©m tr√™s ingredientes A, B e C. Se a mistura total √© de 100kg e a quantidade do 
            ingrediente A √© de 30kg, e sabendo que o ingrediente A tem 10% de um composto X, B tem 20% e C tem 40%, e a 
            mistura final deve ter 25kg do composto X, determine as quantidades dos ingredientes B e C.
            
            **Modelagem do Sistema**:
            - Sejam x, y e z as quantidades (em kg) dos ingredientes A, B e C, respectivamente
            - Equa√ß√£o 1: x + y + z = 100 (quantidade total da mistura)
            - Equa√ß√£o 2: 0.1x + 0.2y + 0.4z = 25 (quantidade do composto X)
            - Equa√ß√£o 3: x = 30 (quantidade conhecida do ingrediente A)
            
            **Solu√ß√£o**:
            - x = 30 (dado do problema)
            - Substituindo na Equa√ß√£o 1: 30 + y + z = 100 ‚Üí y + z = 70
            - Substituindo na Equa√ß√£o 2: 0.1(30) + 0.2y + 0.4z = 25 ‚Üí 3 + 0.2y + 0.4z = 25 ‚Üí 0.2y + 0.4z = 22
            
            Temos ent√£o o sistema 2√ó2:
            - y + z = 70
            - 0.2y + 0.4z = 22
            
            Multiplicando a segunda equa√ß√£o por 5: y + 2z = 110
            Subtraindo da primeira: -z = -40 ‚Üí z = 20
            
            Substituindo: y + 20 = 70 ‚Üí y = 50
            
            Portanto, a mistura deve conter:
            - 30kg do ingrediente A
            - 50kg do ingrediente B
            - 20kg do ingrediente C
            """
        },
        "Aplica√ß√£o: Circuitos": {
            "title": "Problema de Circuito El√©trico",
            "equations": ["I‚ÇÅ - I‚ÇÇ - I‚ÇÉ = 0", "10I‚ÇÅ - 5I‚ÇÉ = 20", "5I‚ÇÇ + 15I‚ÇÉ = 0"],
            "solution": "I‚ÇÅ = 5A, I‚ÇÇ = -3A, I‚ÇÉ = 1A",
            "A": np.array([[1, -1, -1], [10, 0, -5], [0, 5, 15]], dtype=float),
            "b": np.array([0, 20, 0], dtype=float),
            "explanation": """
            **Problema**: Um circuito el√©trico possui tr√™s correntes I‚ÇÅ, I‚ÇÇ e I‚ÇÉ. 
            Na jun√ß√£o das correntes, temos I‚ÇÅ = I‚ÇÇ + I‚ÇÉ (lei de Kirchhoff para correntes). 
            O circuito cont√©m resistores com as seguintes quedas de tens√£o: 10I‚ÇÅ - 5I‚ÇÉ = 20V e 5I‚ÇÇ + 15I‚ÇÉ = 0V.
            Determine as correntes no circuito.
            
            **Modelagem do Sistema**:
            - Equa√ß√£o 1: I‚ÇÅ - I‚ÇÇ - I‚ÇÉ = 0 (conserva√ß√£o de corrente na jun√ß√£o)
            - Equa√ß√£o 2: 10I‚ÇÅ - 5I‚ÇÉ = 20 (queda de tens√£o no primeiro caminho)
            - Equa√ß√£o 3: 5I‚ÇÇ + 15I‚ÇÉ = 0 (queda de tens√£o no segundo caminho)
            
            **Solu√ß√£o**:
            Resolvendo o sistema, obtemos:
            - I‚ÇÅ = 5A (corrente de entrada)
            - I‚ÇÇ = -3A (corrente no segundo caminho, negativa indica dire√ß√£o contr√°ria)
            - I‚ÇÉ = 1A (corrente no terceiro caminho)
            
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 5 - (-3) - 1 = 5 + 3 - 1 = 7 ‚â† 0
            
            Parece haver um erro na solu√ß√£o. Vamos conferir novamente:
            
            Da Equa√ß√£o 3: 5I‚ÇÇ + 15I‚ÇÉ = 0 ‚Üí I‚ÇÇ = -3I‚ÇÉ
            Substituindo na Equa√ß√£o 1: I‚ÇÅ - (-3I‚ÇÉ) - I‚ÇÉ = 0 ‚Üí I‚ÇÅ = -2I‚ÇÉ
            Substituindo na Equa√ß√£o 2: 10(-2I‚ÇÉ) - 5I‚ÇÉ = 20 ‚Üí -20I‚ÇÉ - 5I‚ÇÉ = 20 ‚Üí -25I‚ÇÉ = 20 ‚Üí I‚ÇÉ = -0.8
            
            Portanto:
            - I‚ÇÉ = -0.8A
            - I‚ÇÇ = -3(-0.8) = 2.4A
            - I‚ÇÅ = -2(-0.8) = 1.6A
            
            **Verifica√ß√£o corrigida**:
            - Equa√ß√£o 1: 1.6 - 2.4 - (-0.8) = 1.6 - 2.4 + 0.8 = 0 ‚úì
            - Equa√ß√£o 2: 10(1.6) - 5(-0.8) = 16 + 4 = 20 ‚úì
            - Equa√ß√£o 3: 5(2.4) + 15(-0.8) = 12 - 12 = 0 ‚úì
            """
        },
        "Sistema 4√ó4 (SPD)": {
            "title": "Sistema 4√ó4 com Solu√ß√£o √önica",
            "equations": ["w + x + y + z = 10", "2w - x + y - z = 3", "w + 2x - y + 2z = 9", "-w + x + 2y + z = 8"],
            "solution": "w = 1, x = 2, y = 3, z = 4",
            "A": np.array([[1, 1, 1, 1], [2, -1, 1, -1], [1, 2, -1, 2], [-1, 1, 2, 1]], dtype=float),
            "b": np.array([10, 3, 9, 8], dtype=float),
            "explanation": """
            Este √© um exemplo de um Sistema Poss√≠vel e Determinado (SPD) com quatro equa√ß√µes e quatro inc√≥gnitas.
            
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 1 + 2 + 3 + 4 = 10 ‚úì
            - Equa√ß√£o 2: 2(1) - 2 + 3 - 4 = 2 - 2 + 3 - 4 = -1 ‚â† 3 ‚ùå
            
            Parece haver um erro na verifica√ß√£o. Vamos recalcular:
            
            - Equa√ß√£o 2: 2(1) - 2 + 3 - 4 = 2 - 2 + 3 - 4 = -1 
            
            O valor correto deveria ser 3, mas obtemos -1. Vamos confirmar a equa√ß√£o original:
            
            - Equa√ß√£o 2: 2w - x + y - z = 3
            - Substituindo: 2(1) - 2 + 3 - 4 = 2 - 2 + 3 - 4 = -1
            
            Parece haver um erro na defini√ß√£o do sistema. Vamos corrigir:
            
            A equa√ß√£o 2 deveria ser: 2w - x + y - z = -1
            
            Com esta corre√ß√£o:
            - Equa√ß√£o 2: 2(1) - 2 + 3 - 4 = 2 - 2 + 3 - 4 = -1 ‚úì
            - Equa√ß√£o 3: 1 + 2(2) - 3 + 2(4) = 1 + 4 - 3 + 8 = 10 ‚â† 9 ‚ùå
            
            Ainda h√° inconsist√™ncias no sistema. As equa√ß√µes originais ou a solu√ß√£o proposta podem estar incorretas.
            """
        },
        "Sistema Mal Condicionado": {
            "title": "Sistema Mal Condicionado",
            "equations": ["1.000x + 0.999y = 1.999", "0.999x + 0.998y = 1.997"],
            "solution": "x = 1, y = 1",
            "A": np.array([[1.000, 0.999], [0.999, 0.998]], dtype=float),
            "b": np.array([1.999, 1.997], dtype=float),
            "explanation": """
            Este √© um exemplo de um sistema mal condicionado, onde pequenas perturba√ß√µes nos coeficientes ou nos termos independentes podem levar a grandes mudan√ßas na solu√ß√£o.
            
            A matriz de coeficientes tem linhas quase linearmente dependentes, j√° que a segunda linha √© aproximadamente 0.999 vezes a primeira.
            
            O determinante da matriz √© muito pr√≥ximo de zero (aproximadamente 0.001), o que indica que a matriz est√° pr√≥xima de ser singular.
            
            O n√∫mero de condi√ß√£o dessa matriz √© alto, o que significa que o sistema √© sens√≠vel a erros num√©ricos.
            
            Neste caso, a solu√ß√£o exata √© x = 1, y = 1, que pode ser verificada por substitui√ß√£o:
            - Equa√ß√£o 1: 1.000(1) + 0.999(1) = 1.000 + 0.999 = 1.999 ‚úì
            - Equa√ß√£o 2: 0.999(1) + 0.998(1) = 0.999 + 0.998 = 1.997 ‚úì
            
            No entanto, se modificarmos levemente o termo independente da primeira equa√ß√£o para 2.000 (um erro de apenas 0.001), a solu√ß√£o muda significativamente para aproximadamente x = 2, y = 0.
            """
        },
        "M√©todo Iterativo": {
            "title": "Resolu√ß√£o por M√©todo Iterativo",
            "equations": ["10x + 2y + z = 13", "x + 5y + z = 7", "2x + y + 10z = 13"],
            "solution": "x = 1, y = 1, z = 1",
            "A": np.array([[10, 2, 1], [1, 5, 1], [2, 1, 10]], dtype=float),
            "b": np.array([13, 7, 13], dtype=float),
            "explanation": """
            Este sistema √© adequado para m√©todos iterativos como Jacobi ou Gauss-Seidel devido √† sua estrutura diagonalmente dominante.
            
            **Estrutura diagonalmente dominante**: Para cada linha i, o valor absoluto do elemento diagonal |a_ii| √© maior que a soma dos valores absolutos dos outros elementos na mesma linha.
            
            Linha 1: |10| > |2| + |1|
            Linha 2: |5| > |1| + |1|
            Linha 3: |10| > |2| + |1|
            
            Para o m√©todo de Jacobi, iniciamos com uma aproxima√ß√£o inicial, geralmente x‚ÅΩ‚Å∞‚Åæ = y‚ÅΩ‚Å∞‚Åæ = z‚ÅΩ‚Å∞‚Åæ = 0, e iteramos:
            
            x‚ÅΩ·µè‚Å∫¬π‚Åæ = (13 - 2y‚ÅΩ·µè‚Åæ - z‚ÅΩ·µè‚Åæ) / 10
            y‚ÅΩ·µè‚Å∫¬π‚Åæ = (7 - x‚ÅΩ·µè‚Åæ - z‚ÅΩ·µè‚Åæ) / 5
            z‚ÅΩ·µè‚Å∫¬π‚Åæ = (13 - 2x‚ÅΩ·µè‚Åæ - y‚ÅΩ·µè‚Åæ) / 10
            
            Com algumas itera√ß√µes, a sequ√™ncia converge para a solu√ß√£o x = y = z = 1.
            
            **Verifica√ß√£o**:
            - Equa√ß√£o 1: 10(1) + 2(1) + 1(1) = 10 + 2 + 1 = 13 ‚úì
            - Equa√ß√£o 2: 1(1) + 5(1) + 1(1) = 1 + 5 + 1 = 7 ‚úì
            - Equa√ß√£o 3: 2(1) + 1(1) + 10(1) = 2 + 1 + 10 = 13 ‚úì
            """
        }
    }
    
    return examples.get(example_type, {"title": "Exemplo n√£o encontrado", "equations": [], "solution": "", "explanation": "", "A": None, "b": None})

def get_youtube_videos():
    """Retorna uma lista de v√≠deos do YouTube sobre sistemas lineares"""
    videos = [
        {
            "title": "Sistemas Lineares - Introdu√ß√£o",
            "description": "Uma introdu√ß√£o aos sistemas de equa√ß√µes lineares e suas aplica√ß√µes.",
            "url": "https://www.youtube.com/embed/LhOHnLXolJc",
            "duration": "12:45",
            "author": "Matem√°tica Rio",
            "level": "B√°sico"
        },
        {
            "title": "M√©todo da Elimina√ß√£o de Gauss",
            "description": "Resolu√ß√£o passo a passo do m√©todo de elimina√ß√£o de Gauss.",
            "url": "https://www.youtube.com/embed/kaRWnHWL7nE",
            "duration": "18:22",
            "author": "Prof. Ferretto",
            "level": "Intermedi√°rio"
        },
        {
            "title": "Regra de Cramer Explicada",
            "description": "Tutorial detalhado sobre a aplica√ß√£o da regra de Cramer com exemplos.",
            "url": "https://www.youtube.com/embed/MQPx2c-NQYI",
            "duration": "15:10",
            "author": "Equaciona Matem√°tica",
            "level": "Intermedi√°rio"
        },
        {
            "title": "Aplica√ß√µes de Sistemas Lineares",
            "description": "Exemplos pr√°ticos de aplica√ß√µes de sistemas lineares em diversos campos.",
            "url": "https://www.youtube.com/embed/j2RbZzKMDnM",
            "duration": "20:35",
            "author": "Me Salva! ENEM",
            "level": "B√°sico"
        },
        {
            "title": "Matriz Inversa e Solu√ß√£o de Sistemas",
            "description": "Como encontrar a matriz inversa e us√°-la para resolver sistemas lineares.",
            "url": "https://www.youtube.com/embed/kuixJnmwJxo",
            "duration": "22:18",
            "author": "Prof. Marcos Aba",
            "level": "Avan√ßado"
        },
        {
            "title": "Sistemas Lineares 3x3 - Passo a Passo",
            "description": "Resolu√ß√£o completa de sistemas com tr√™s equa√ß√µes e tr√™s inc√≥gnitas.",
            "url": "https://www.youtube.com/embed/Hl-h_8TUXMo",
            "duration": "17:45",
            "author": "Matem√°tica Rio",
            "level": "Intermedi√°rio"
        },
        {
            "title": "M√©todos Iterativos: Jacobi e Gauss-Seidel",
            "description": "Explica√ß√£o sobre m√©todos iterativos para sistemas de grande porte.",
            "url": "https://www.youtube.com/embed/hGzWsQxYVK0",
            "duration": "25:30",
            "author": "Prof. Paulo Calculista",
            "level": "Avan√ßado"
        },
        {
            "title": "Sistemas Lineares e Matrizes",
            "description": "Rela√ß√£o entre sistemas lineares e opera√ß√µes matriciais.",
            "url": "https://www.youtube.com/embed/5J4upRPxEG8",
            "duration": "16:12",
            "author": "Prof. Ferretto",
            "level": "Intermedi√°rio"
        },
        {
            "title": "Classifica√ß√£o de Sistemas Lineares",
            "description": "Como identificar se um sistema √© SPD, SPI ou SI.",
            "url": "https://www.youtube.com/embed/3g_vGpwFGfY",
            "duration": "14:50",
            "author": "Equaciona Matem√°tica",
            "level": "B√°sico"
        },
        {
            "title": "Resolu√ß√£o de Problemas com Sistemas Lineares",
            "description": "Modelagem e resolu√ß√£o de problemas reais usando sistemas de equa√ß√µes.",
            "url": "https://www.youtube.com/embed/R7a2G8vLsZU",
            "duration": "19:25",
            "author": "Me Salva! ENEM",
            "level": "Intermedi√°rio"
        },
        {
            "title": "Sistemas Lineares e Espa√ßo Vetorial",
            "description": "Conex√µes entre sistemas lineares e espa√ßos vetoriais.",
            "url": "https://www.youtube.com/embed/Xy3PqpKvZ6U",
            "duration": "28:15",
            "author": "Prof. Marcos Aba",
            "level": "Avan√ßado"
        },
        {
            "title": "Decomposi√ß√£o LU para Sistemas Lineares",
            "description": "Uso da decomposi√ß√£o LU para resolver sistemas de forma eficiente.",
            "url": "https://www.youtube.com/embed/E4gQcGtsXpM",
            "duration": "23:40",
            "author": "Prof. Paulo Calculista",
            "level": "Avan√ßado"
        }
    ]
    
    return videos

# Configura√ß√£o da interface

def main():
    # Inicializar estados da sess√£o se n√£o existirem
    if "page" not in st.session_state:
        st.session_state.page = "In√≠cio"
    
    if "user_progress" not in st.session_state:
        st.session_state.user_progress = {
            "exercises_completed": 0,
            "correct_answers": 0,
            "topics_studied": [],
            "difficulty_levels": {"F√°cil": 0, "M√©dio": 0, "Dif√≠cil": 0},
            "last_login": datetime.datetime.now().strftime("%d/%m/%Y"),
            "streak": 1
        }
    
    if "favorites" not in st.session_state:
        st.session_state.favorites = {
            "examples": [],
            "reference_cards": [],
            "exercises": []
        }
    
    # Barra lateral
    with st.sidebar:
        st.image("calculo.png", width=280)
        st.title("MENU")
        
        # Se√ß√µes principais
        main_sections = {
            "In√≠cio": "üè†",
            "Resolver Sistema": "üßÆ",
            "Teoria": "üìö",
            "Exerc√≠cios": "‚úèÔ∏è",
            "Exemplos": "üìã",
            "Refer√™ncia R√°pida": "üìù",
            "V√≠deoaulas": "üé¨",
            "Meu Progresso": "üìä"
        }
        
        for section, icon in main_sections.items():
            if st.sidebar.button(f"{icon} {section}", key=f"btn_{section}", use_container_width=True):
                st.session_state.page = section
        
        st.sidebar.markdown("---")
        
        # Configura√ß√µes da aplica√ß√£o
        with st.sidebar.expander("‚öôÔ∏è Configura√ß√µes"):
            st.checkbox("Modo escuro", value=False, key="dark_mode")
            st.checkbox("Mostrar passos detalhados", value=True, key="show_steps")
            st.select_slider("Precis√£o num√©rica", options=["Baixa", "M√©dia", "Alta"], value="M√©dia", key="precision")
            st.slider("Tamanho da fonte", min_value=80, max_value=120, value=100, step=10, format="%d%%", key="font_size")
        
        # Informa√ß√µes do usu√°rio
        st.sidebar.markdown("---")
        col1, col2 = st.sidebar.columns([1, 3])
        with col1:
            st.image("calculo.png", width=60)
        with col2:
            st.markdown("**Usu√°rio:** Estudante")
            st.markdown(f"**Progresso:** {int(min(st.session_state.user_progress['exercises_completed'] / 20 * 100, 100))}%")
        
        # Exibir streak
        st.sidebar.markdown(f"üî• **Sequ√™ncia de estudos:** {st.session_state.user_progress['streak']} dias")
        
        st.sidebar.markdown("---")
        st.sidebar.markdown("v1.0.0 | ¬© 2025 SistemaSolver")
    
    # Conte√∫do principal
    if st.session_state.page == "In√≠cio":
        show_home_page()
    elif st.session_state.page == "Resolver Sistema":
        show_solver_page()
    elif st.session_state.page == "Teoria":
        show_theory_page()
    elif st.session_state.page == "Exerc√≠cios":
        show_exercises_page()
    elif st.session_state.page == "Exemplos":
        show_examples_page()
    elif st.session_state.page == "Refer√™ncia R√°pida":
        show_reference_page()
    elif st.session_state.page == "V√≠deoaulas":
        show_videos_page()
    elif st.session_state.page == "Meu Progresso":
        show_progress_page()

def show_home_page():
    st.markdown('<h1 class="main-header">Sistema Linear Solver Pro</h1>', unsafe_allow_html=True)
    st.markdown('<h2 class="sub-header">Sua ferramenta completa para estudo de Sistemas Lineares</h2>', unsafe_allow_html=True)
    
    # Banner principal com chamada para a√ß√£o
    st.markdown("""
    <div style="background-color: #0D47A1; color: white; padding: 20px; border-radius: 10px; margin-bottom: 30px; text-align: center;">
        <h2 style="color: white;">Domine Sistemas Lineares com Facilidade!</h2>
        <p style="font-size: 18px;">Estude, pratique e visualize sistemas de equa√ß√µes lineares usando m√©todos variados.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Divis√£o em colunas para as principais funcionalidades
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown('### üîç Recursos Principais')
        
        # Bot√µes de recursos principais com descri√ß√µes
        if st.button("üßÆ Resolver um Sistema", key="home_solve_btn"):
            st.session_state.page = "Resolver Sistema"
            st.rerun()
        st.markdown("Resolva sistemas lineares de 2, 3 ou 4 inc√≥gnitas usando v√°rios m√©todos.")
        
        if st.button("üìö Estudar Teoria", key="home_theory_btn"):
            st.session_state.page = "Teoria"
            st.rerun()
        st.markdown("Aprenda os fundamentos e conceitos avan√ßados de sistemas lineares.")
        
        if st.button("‚úèÔ∏è Praticar Exerc√≠cios", key="home_exercise_btn"):
            st.session_state.page = "Exerc√≠cios"
            st.rerun()
        st.markdown("Teste seus conhecimentos com exerc√≠cios de diferentes n√≠veis.")
        
        if st.button("üìã Ver Exemplos Resolvidos", key="home_examples_btn"):
            st.session_state.page = "Exemplos"
            st.rerun()
        st.markdown("Explore sistemas resolvidos passo a passo com explica√ß√µes detalhadas.")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Estat√≠sticas de uso
        st.markdown('<div class="section-card" style="margin-top: 20px;">', unsafe_allow_html=True)
        st.markdown('### üìä Suas Estat√≠sticas')
        
        metric1, metric2, metric3 = st.columns(3)
        with metric1:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.markdown(f'<p class="metric-value">{st.session_state.user_progress["exercises_completed"]}</p>', unsafe_allow_html=True)
            st.markdown('<p class="metric-label">Exerc√≠cios</p>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with metric2:
            accuracy = 0
            if st.session_state.user_progress["exercises_completed"] > 0:
                accuracy = int(st.session_state.user_progress["correct_answers"] / st.session_state.user_progress["exercises_completed"] * 100)
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.markdown(f'<p class="metric-value">{accuracy}%</p>', unsafe_allow_html=True)
            st.markdown('<p class="metric-label">Precis√£o</p>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with metric3:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.markdown(f'<p class="metric-value">{len(st.session_state.user_progress["topics_studied"])}</p>', unsafe_allow_html=True)
            st.markdown('<p class="metric-label">T√≥picos</p>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        if st.button("üìà Ver Progresso Completo", key="home_progress_btn"):
            st.session_state.page = "Meu Progresso"
            st.rerun()
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        # Recursos educacionais
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown('### üéì Recursos Educacionais')
        
        st.markdown('<div class="feature-card">', unsafe_allow_html=True)
        st.markdown('#### üìù Refer√™ncia R√°pida')
        st.markdown('Consulte cart√µes de refer√™ncia com f√≥rmulas e conceitos essenciais.')
        if st.button("Acessar Refer√™ncias", key="home_ref_btn"):
            st.session_state.page = "Refer√™ncia R√°pida"
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="feature-card">', unsafe_allow_html=True)
        st.markdown('#### üé¨ Videoaulas')
        st.markdown('Assista a v√≠deos explicativos sobre diversos t√≥picos de sistemas lineares.')
        if st.button("Ver Videoaulas", key="home_video_btn"):
            st.session_state.page = "V√≠deoaulas"
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="feature-card">', unsafe_allow_html=True)
        st.markdown('#### üìä Visualiza√ß√µes')
        st.markdown('Veja representa√ß√µes gr√°ficas de sistemas para melhor compreens√£o.')
        if st.button("Explorar Visualiza√ß√µes", key="home_visual_btn"):
            st.session_state.page = "Resolver Sistema"
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Novidades e atualiza√ß√µes
        st.markdown('<div class="section-card" style="margin-top: 20px;">', unsafe_allow_html=True)
        st.markdown('### üîî Novidades')
        
        st.markdown("""
        <div style="background-color: #e3f2fd; padding: 10px; border-radius: 5px; margin-bottom: 10px;">
            <p style="margin: 0;"><strong>Novo:</strong> M√≥dulo de sistemas 4√ó4 adicionado!</p>
        </div>
        <div style="background-color: #e8f5e9; padding: 10px; border-radius: 5px; margin-bottom: 10px;">
            <p style="margin: 0;"><strong>Atualiza√ß√£o:</strong> Novos exerc√≠cios de aplica√ß√£o pr√°tica.</p>
        </div>
        <div style="background-color: #fff3e0; padding: 10px; border-radius: 5px;">
            <p style="margin: 0;"><strong>Em breve:</strong> Integra√ß√£o com a plataforma de avalia√ß√£o.</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Se√ß√£o de exerc√≠cios recomendados
    st.markdown('<h2 class="sub-header">Exerc√≠cios Recomendados</h2>', unsafe_allow_html=True)
    
    rec1, rec2, rec3 = st.columns(3)
    
    with rec1:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown('<span class="badge badge-primary">Iniciante</span>', unsafe_allow_html=True)
        st.markdown('#### Sistema 2√ó2 (SPD)')
        st.markdown('Resolva o sistema:\n\n3x + 2y = 13\n\nx - y = 1')
        if st.button("Praticar Agora", key="rec_btn1"):
            st.session_state.page = "Exerc√≠cios"
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)
    
    with rec2:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown('<span class="badge badge-info">Intermedi√°rio</span>', unsafe_allow_html=True)
        st.markdown('#### Aplica√ß√£o: Mistura')
        st.markdown('Um problema de mistura de produtos qu√≠micos com tr√™s componentes.')
        if st.button("Praticar Agora", key="rec_btn2"):
            st.session_state.page = "Exerc√≠cios"
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)
    
    with rec3:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown('<span class="badge badge-warning">Avan√ßado</span>', unsafe_allow_html=True)
        st.markdown('#### Sistema 3√ó3 (SPI)')
        st.markdown('Resolva e classifique o sistema com infinitas solu√ß√µes.')
        if st.button("Praticar Agora", key="rec_btn3"):
            st.session_state.page = "Exerc√≠cios"
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Rodap√© com informa√ß√µes adicionais
    st.markdown("---")
    st.markdown("""
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
            <p><strong>Sistema Linear Solver Pro</strong> - Guia completo para estudantes universit√°rios</p>
            <p style="font-size: 0.8rem; color: #666;">Desenvolvido para auxiliar no estudo de √Ålgebra Linear com foco em sistemas de equa√ß√µes.</p>
        </div>
        <div>
            <p>üìß Contato: <a href="mailto:contato@estevamsouza.com.br">contato@estevamsouza.com.br</a></p>
        </div>
    </div>
    """, unsafe_allow_html=True)

def show_solver_page():
    # Inicializar vari√°veis de estado se n√£o existirem
    if "solver_show_steps" not in st.session_state:
        st.session_state.solver_show_steps = True
    
    # Controle de abas
    if "solver_current_tab" not in st.session_state:
        st.session_state.solver_current_tab = "Inserir Sistema"
        
    st.markdown('<h1 class="main-header">Resolver Sistema Linear</h1>', unsafe_allow_html=True)
    
    # Abas de navega√ß√£o
    tabs = ["üìù Inserir Sistema", "üîç Resultados", "üìä Visualiza√ß√£o"]
    selected_tab = st.radio("", tabs, horizontal=True, 
                            index=tabs.index(f"{'üìù Inserir Sistema' if st.session_state.solver_current_tab == 'Inserir Sistema' else 'üîç Resultados' if st.session_state.solver_current_tab == 'Resultados' else 'üìä Visualiza√ß√£o'}"),
                            key="solver_tab_selector")
    
    # Atualizar a aba atual
    if "üìù Inserir Sistema" in selected_tab:
        st.session_state.solver_current_tab = "Inserir Sistema"
    elif "üîç Resultados" in selected_tab:
        st.session_state.solver_current_tab = "Resultados"
    else:
        st.session_state.solver_current_tab = "Visualiza√ß√£o"
    
    # Conte√∫do da aba atual
    if st.session_state.solver_current_tab == "Inserir Sistema":
        st.markdown('<h2 class="sub-header">Insira seu sistema de equa√ß√µes lineares</h2>', unsafe_allow_html=True)
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            system_input_method = st.radio(
                "M√©todo de entrada:",
                ["Manual (Coeficientes)", "Equa√ß√µes (Texto)", "Matriz Aumentada"],
                horizontal=True
            )
            
        with col2:
            vars_count = st.number_input("N√∫mero de vari√°veis:", min_value=2, max_value=6, value=2)
        
        # Inicializar listas vazias para coeficientes e constantes
        coeffs = []
        constants = []
        
        if system_input_method == "Manual (Coeficientes)":
            equations_count = st.number_input("N√∫mero de equa√ß√µes:", min_value=1, max_value=8, value=vars_count)
            
            st.markdown("### Insira os coeficientes e termos independentes")
            
            var_names = ["x", "y", "z", "w", "v", "u"][:vars_count]
            
            for i in range(equations_count):
                cols = st.columns(vars_count + 1)
                
                eq_coeffs = []
                for j in range(vars_count):
                    with cols[j]:
                        coef = st.number_input(
                            f"Coeficiente de {var_names[j]} na equa√ß√£o {i+1}:",
                            value=1.0 if i == j else 0.0,
                            step=0.1,
                            format="%.2f",
                            key=f"coef_{i}_{j}"
                        )
                        eq_coeffs.append(coef)
                
                with cols[-1]:
                    const = st.number_input(
                        f"Termo independente da equa√ß√£o {i+1}:",
                        value=0.0,
                        step=0.1,
                        format="%.2f",
                        key=f"const_{i}"
                    )
                
                coeffs.append(eq_coeffs)
                constants.append(const)
                
                # Mostrar a equa√ß√£o formatada
                eq_str = format_equation(eq_coeffs, var_names, const)
                st.write(f"Equa√ß√£o {i+1}: {eq_str}")
                
        elif system_input_method == "Equa√ß√µes (Texto)":
            st.markdown("""
            Insira cada equa√ß√£o em uma linha separada, usando a sintaxe:
            ```
            a*x + b*y + c*z = d
            ```
            Exemplo:
            ```
            2*x + 3*y = 5
            x - y = 1
            ```
            """)
            
            equations_text = st.text_area(
                "Equa√ß√µes (uma por linha):",
                height=150,
                help="Insira uma equa√ß√£o por linha. Use * para multiplica√ß√£o.",
                value="x + y = 10\n2*x - y = 5"
            )
            
            try:
                # Processar as equa√ß√µes de texto
                equations = equations_text.strip().split('\n')
                
                var_symbols = []
                for i in range(vars_count):
                    if i < len(["x", "y", "z", "w", "v", "u"]):
                        var_symbols.append(sp.symbols(["x", "y", "z", "w", "v", "u"][i]))
                
                for eq_text in equations:
                    if not eq_text.strip():
                        continue
                        
                    # Substituir = por - ( para padronizar
                    eq_text = eq_text.replace("=", "-(") + ")"
                    
                    # Converter para express√£o sympy
                    expr = sp.sympify(eq_text)
                    
                    # Extrair coeficientes
                    eq_coeffs = []
                    for var in var_symbols:
                        coef = expr.coeff(var)
                        eq_coeffs.append(float(coef))
                    
                    # Extrair termo constante
                    const = -float(expr.subs([(var, 0) for var in var_symbols]))
                    
                    coeffs.append(eq_coeffs)
                    constants.append(const)
                
                # Mostrar as equa√ß√µes interpretadas
                st.markdown("### Equa√ß√µes interpretadas:")
                for i, (eq_coef, eq_const) in enumerate(zip(coeffs, constants)):
                    var_names = ["x", "y", "z", "w", "v", "u"][:vars_count]
                    eq_str = format_equation(eq_coef, var_names, eq_const)
                    st.write(f"Equa√ß√£o {i+1}: {eq_str}")
                    
            except Exception as e:
                st.error(f"Erro ao processar as equa√ß√µes: {str(e)}")
                st.stop()
                
        else:  # Matriz Aumentada
            st.markdown("""
            Insira a matriz aumentada do sistema. Cada linha representa uma equa√ß√£o, e a √∫ltima coluna cont√©m os termos independentes.
            """)
            
            matrix_text = st.text_area(
                "Matriz aumentada (uma linha por equa√ß√£o):",
                height=150,
                help="Insira os elementos da matriz separados por espa√ßos, com uma linha por equa√ß√£o.",
                value="1 1 10\n2 -1 5"
            )
            
            try:
                # Processar a matriz aumentada
                matrix_rows = matrix_text.strip().split('\n')
                augmented_matrix = []
                
                for row_text in matrix_rows:
                    if not row_text.strip():
                        continue
                    
                    # Converter elementos para n√∫meros
                    elements = [float(e) for e in row_text.split()]
                    augmented_matrix.append(elements)
                
                # Verificar dimens√µes
                if any(len(row) != vars_count + 1 for row in augmented_matrix):
                    st.error(f"Erro: cada linha deve ter {vars_count + 1} elementos (coeficientes + termo independente).")
                    st.stop()
                
                # Extrair coeficientes e constantes
                coeffs = [row[:-1] for row in augmented_matrix]
                constants = [row[-1] for row in augmented_matrix]
                
                # Mostrar as equa√ß√µes interpretadas
                st.markdown("### Equa√ß√µes interpretadas:")
                for i, (eq_coef, eq_const) in enumerate(zip(coeffs, constants)):
                    var_names = ["x", "y", "z", "w", "v", "u"][:vars_count]
                    eq_str = format_equation(eq_coef, var_names, eq_const)
                    st.write(f"Equa√ß√£o {i+1}: {eq_str}")
                
            except Exception as e:
                st.error(f"Erro ao processar a matriz aumentada: {str(e)}")
                st.stop()
        
        # M√©todo de resolu√ß√£o
        st.markdown("### M√©todo de Resolu√ß√£o")
        
        col1, col2 = st.columns(2)
        
        with col1:
            solution_method = st.selectbox(
                "Escolha o m√©todo:",
                ["Elimina√ß√£o de Gauss", "Gauss-Jordan", "Regra de Cramer", "Matriz Inversa", 
                 "Decomposi√ß√£o LU", "Jacobi", "Gauss-Seidel", "Todos os M√©todos"],
                key="solution_method_select"
            )
            
        with col2:
            show_steps = st.checkbox("Mostrar passos detalhados", value=True, key="show_steps_checkbox")
        
        # Op√ß√µes extras para m√©todos iterativos
        max_iter = 50
        tolerance = 1e-6
        
        if solution_method in ["Jacobi", "Gauss-Seidel"]:
            col1, col2 = st.columns(2)
            with col1:
                max_iter = st.number_input("N√∫mero m√°ximo de itera√ß√µes:", min_value=5, max_value=100, value=50, key="max_iter_input")
            with col2:
                tolerance = st.number_input("Toler√¢ncia:", min_value=1e-10, max_value=1e-2, value=1e-6, format="%.1e", key="tolerance_input")
        
        # Verificar se temos dados suficientes para resolver
        solve_ready = len(coeffs) > 0 and len(constants) > 0 and len(coeffs[0]) == vars_count
        
        # Bot√£o para resolver
        solve_clicked = st.button("Resolver Sistema", type="primary", key="solve_btn", disabled=not solve_ready)
        
        if solve_clicked:
            # Criar a matriz e o vetor do sistema
            try:
                A, b = create_system_matrix(coeffs, constants, vars_count)
                
                # Guardar dados no estado da sess√£o
                st.session_state.system_solved = True
                st.session_state.A = A
                st.session_state.b = b
                st.session_state.vars_count = vars_count
                st.session_state.solution_method = solution_method
                st.session_state.solver_show_steps = show_steps
                st.session_state.max_iter = max_iter
                st.session_state.tolerance = tolerance
                st.session_state.system_classification = classify_system(A, b)
                
                # Computar solu√ß√µes pelos diferentes m√©todos
                results = {}
                
                with st.spinner("Resolvendo o sistema..."):
                    if solution_method in ["Elimina√ß√£o de Gauss", "Todos os M√©todos"]:
                        steps, solution = gaussian_elimination_steps(A, b)
                        results["Elimina√ß√£o de Gauss"] = {"steps": steps, "solution": solution}
                        
                    if solution_method in ["Gauss-Jordan", "Todos os M√©todos"]:
                        steps, solution = gauss_jordan_steps(A, b)
                        results["Gauss-Jordan"] = {"steps": steps, "solution": solution}
                        
                    if vars_count <= 4 and solution_method in ["Regra de Cramer", "Todos os M√©todos"]:
                        if A.shape[0] == A.shape[1]:  # Apenas para sistemas quadrados
                            steps, solution = cramer_rule(A, b, detailed=show_steps)
                            results["Regra de Cramer"] = {"steps": steps, "solution": solution}
                        
                    if solution_method in ["Matriz Inversa", "Todos os M√©todos"]:
                        if A.shape[0] == A.shape[1]:  # Apenas para sistemas quadrados
                            steps, solution = matrix_inverse_method(A, b, detailed=show_steps)
                            results["Matriz Inversa"] = {"steps": steps, "solution": solution}
                            
                    if solution_method in ["Decomposi√ß√£o LU", "Todos os M√©todos"]:
                        if A.shape[0] == A.shape[1]:  # Apenas para sistemas quadrados
                            steps, solution = lu_decomposition_method(A, b, detailed=show_steps)
                            results["Decomposi√ß√£o LU"] = {"steps": steps, "solution": solution}
                            
                    if solution_method in ["Jacobi", "Todos os M√©todos"]:
                        steps, solution = jacobi_iteration_method(A, b, max_iter=max_iter, tolerance=tolerance, detailed=show_steps)
                        results["Jacobi"] = {"steps": steps, "solution": solution}
                        
                    if solution_method in ["Gauss-Seidel", "Todos os M√©todos"]:
                        steps, solution = gauss_seidel_method(A, b, max_iter=max_iter, tolerance=tolerance, detailed=show_steps)
                        results["Gauss-Seidel"] = {"steps": steps, "solution": solution}
                        
                st.session_state.results = results
                
                # Atualizar progresso do usu√°rio
                if "user_progress" in st.session_state:
                    st.session_state.user_progress["exercises_completed"] += 1
                
                # Mostrar mensagem de sucesso e sugerir ir para a pr√≥xima aba
                st.success("Sistema resolvido com sucesso! Veja os resultados na aba 'Resultados'.")
                
                # Mudar para a aba de resultados automaticamente
                st.session_state.solver_current_tab = "Resultados"
                st.rerun()
                
            except Exception as e:
                st.error(f"Erro ao resolver o sistema: {str(e)}")
                st.session_state.system_solved = False

    elif st.session_state.solver_current_tab == "Resultados":
        # Verificar se um sistema foi resolvido
        if not hasattr(st.session_state, 'system_solved') or not st.session_state.system_solved:
            st.info("Insira e resolva um sistema na aba 'Inserir Sistema'")
            st.session_state.solver_current_tab = "Inserir Sistema"
            st.rerun()
        else:
            # C√≥digo da aba "Resultados"
            st.markdown('<h2 class="sub-header">Resultados da Resolu√ß√£o</h2>', unsafe_allow_html=True)
            
            # Exibir classifica√ß√£o do sistema
            st.markdown(f"**Classifica√ß√£o do Sistema:** {st.session_state.system_classification}")
            
            # Mostrar as equa√ß√µes do sistema
            st.markdown("### Sistema original:")
            var_names = ["x", "y", "z", "w", "v", "u"][:st.session_state.vars_count]
            A = st.session_state.A
            b = st.session_state.b
            
            for i in range(len(b)):
                eq_str = format_equation(A[i], var_names, b[i])
                st.write(f"Equa√ß√£o {i+1}: {eq_str}")
            
            # Exibir matriz aumentada
            with st.expander("Ver matriz aumentada", expanded=False):
                augmented = np.column_stack((A, b))
                st.markdown("**Matriz aumentada [A|b]:**")
                st.dataframe(pd.DataFrame(augmented, 
                                        columns=[f"{var}" for var in var_names] + ["b"],
                                        index=[f"Eq {i+1}" for i in range(len(b))]))
            
            # Exibir solu√ß√£o para cada m√©todo
            st.markdown("### Resultados por m√©todo:")
            
            for method, result in st.session_state.results.items():
                with st.expander(f"üìä {method}", expanded=method == st.session_state.solution_method):
                    steps = result["steps"]
                    solution = result["solution"]
                    
                    if solution is not None:
                        st.markdown("**Solu√ß√£o encontrada:**")
                        
                        # Criar dataframe da solu√ß√£o
                        solution_df = pd.DataFrame({
                            "Vari√°vel": var_names[:len(solution)],
                            "Valor": [float(val) for val in solution]
                        })
                        st.dataframe(solution_df)
                        
                        # Mostrar precis√£o da solu√ß√£o
                        residual = np.linalg.norm(np.dot(A, solution) - b)
                        st.markdown(f"**Res√≠duo:** {residual:.2e}")
                        
                        # Verifica√ß√£o r√°pida da solu√ß√£o
                        st.markdown("**Verifica√ß√£o r√°pida:**")
                        for i in range(len(b)):
                            calculated = np.dot(A[i], solution)
                            is_correct = abs(calculated - b[i]) < 1e-10
                            st.markdown(f"Equa√ß√£o {i+1}: {calculated:.4f} ‚âà {b[i]:.4f} {'‚úì' if is_correct else '‚úó'}")
                        
                    else:
                        st.write("N√£o foi poss√≠vel encontrar uma solu√ß√£o √∫nica por este m√©todo.")
                    
                    if st.session_state.solver_show_steps:
                        st.markdown("**Passos detalhados:**")
                        for step in steps:
                            st.write(step)
            
            # Adicionar interpreta√ß√£o da solu√ß√£o
            st.markdown("### Interpreta√ß√£o da Solu√ß√£o")
            
            if st.session_state.system_classification == "Sistema Poss√≠vel e Determinado (SPD)":
                st.success("O sistema possui uma √∫nica solu√ß√£o, que satisfaz todas as equa√ß√µes simultaneamente.")
                
                # Obter uma solu√ß√£o v√°lida (qualquer uma)
                solution = None
                for result in st.session_state.results.values():
                    if result["solution"] is not None:
                        solution = result["solution"]
                        break
                
                if solution is not None:
                    st.markdown("### Verifica√ß√£o Detalhada")
                    
                    for i in range(len(b)):
                        eq_result = np.dot(A[i], solution)
                        is_correct = abs(eq_result - b[i]) < 1e-10
                        
                        eq_str = format_equation(A[i], var_names, b[i])
                        
                        substitution = " + ".join([f"{A[i][j]:.2f} √ó {solution[j]:.4f}" for j in range(len(solution)) if abs(A[i][j]) > 1e-10])
                        if not substitution:
                            substitution = "0"
                        
                        result_str = f"{eq_result:.4f} ‚âà {b[i]:.4f}" if is_correct else f"{eq_result:.4f} ‚â† {b[i]:.4f}"
                        
                        if is_correct:
                            st.success(f"Equa√ß√£o {i+1}: {eq_str}\n{substitution} = {result_str} ‚úì")
                        else:
                            st.error(f"Equa√ß√£o {i+1}: {eq_str}\n{substitution} = {result_str} ‚úó")
                            
            elif st.session_state.system_classification == "Sistema Poss√≠vel e Indeterminado (SPI)":
                st.info("""
                O sistema possui infinitas solu√ß√µes. Isso ocorre porque h√° menos equa√ß√µes linearmente independentes
                do que vari√°veis, criando um espa√ßo de solu√ß√µes poss√≠veis.
                
                A solu√ß√£o pode ser expressa de forma param√©trica, onde uma ou mais vari√°veis s√£o expressas em termos
                de par√¢metros livres.
                """)
                
                # Tentar obter solu√ß√£o simb√≥lica
                try:
                    A = st.session_state.A
                    b = st.session_state.b
                    symbolic_solution, var_symbols = sympy_solve_system(A, b)
                    
                    if symbolic_solution:
                        st.markdown("### Solu√ß√£o Param√©trica")
                        
                        if isinstance(symbolic_solution, dict):
                            for var, expr in symbolic_solution.items():
                                st.latex(f"{sp.latex(var)} = {sp.latex(expr)}")
                        else:
                            st.latex(sp.latex(symbolic_solution))
                except:
                    st.warning("N√£o foi poss√≠vel obter uma representa√ß√£o param√©trica da solu√ß√£o.")
                    
            else:  # Sistema Imposs√≠vel
                st.error("""
                O sistema n√£o possui solu√ß√£o. Isso ocorre porque as equa√ß√µes s√£o inconsistentes entre si,
                ou seja, n√£o existe um conjunto de valores para as vari√°veis que satisfa√ßa todas as equa√ß√µes
                simultaneamente.
                
                Geometricamente, isso pode ser interpretado como:
                - Em 2D: retas paralelas que nunca se intersectam
                - Em 3D: planos sem ponto comum de interse√ß√£o
                """)
                
            # Adicionar bot√µes de a√ß√£o para a solu√ß√£o
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üìä Ver Visualiza√ß√£o", key="view_viz_btn"):
                    st.session_state.solver_current_tab = "Visualiza√ß√£o"
                    st.rerun()

            with col2:
                if st.button("üìã Salvar nos Exemplos", key="save_example_btn"):
                    if "favorites" not in st.session_state:
                        st.session_state.favorites = {"examples": []}
                    
                    # Criar um exemplo para salvar
                    example = {
                        "title": f"Sistema {A.shape[0]}√ó{A.shape[1]} ({st.session_state.system_classification.split(' ')[2]})",
                        "A": A.tolist(),
                        "b": b.tolist(),
                        "date": datetime.datetime.now().strftime("%d/%m/%Y %H:%M")
                    }
                    
                    st.session_state.favorites["examples"].append(example)
                    st.success("Sistema salvo nos exemplos favoritos!")
            
            with col3:
                if st.button("üì• Exportar Solu√ß√£o", key="export_solution_btn"):
                    st.success("Solu√ß√£o exportada! (Simula√ß√£o)")
    
    elif st.session_state.solver_current_tab == "Visualiza√ß√£o":
        # Verificar se um sistema foi resolvido
        if not hasattr(st.session_state, 'system_solved') or not st.session_state.system_solved:
            st.info("Insira e resolva um sistema na aba 'Inserir Sistema'")
            st.session_state.solver_current_tab = "Inserir Sistema"
            st.rerun()
        else:
            # C√≥digo da aba "Visualiza√ß√£o"
            st.markdown('<h2 class="sub-header">Visualiza√ß√£o Gr√°fica</h2>', unsafe_allow_html=True)
            
            if st.session_state.vars_count == 2:
                try:
                    fig = plot_2d_system(st.session_state.A, st.session_state.b)
                    if fig:
                        st.pyplot(fig)
                        
                        # Adicionar interpreta√ß√£o geom√©trica
                        st.markdown("### Interpreta√ß√£o Geom√©trica")
                        
                        if st.session_state.system_classification == "Sistema Poss√≠vel e Determinado (SPD)":
                            st.markdown("""
                            Cada equa√ß√£o do sistema representa uma reta no plano cartesiano.
                            A solu√ß√£o do sistema √© o ponto de interse√ß√£o entre estas retas.
                            
                            As coordenadas deste ponto satisfazem simultaneamente todas as equa√ß√µes do sistema.
                            """)
                        elif st.session_state.system_classification == "Sistema Poss√≠vel e Indeterminado (SPI)":
                            st.markdown("""
                            As retas s√£o coincidentes (sobrepostas), o que significa que qualquer
                            ponto em uma das retas √© uma solu√ß√£o v√°lida para o sistema.
                            
                            Geometricamente, isso ocorre quando as equa√ß√µes representam a mesma reta
                            ou quando algumas das equa√ß√µes s√£o redundantes (combina√ß√µes lineares de outras).
                            """)
                        else:  # SI
                            st.markdown("""
                            As retas s√£o paralelas, o que indica que n√£o h√° ponto de interse√ß√£o
                            e, portanto, o sistema n√£o possui solu√ß√£o.
                            
                            Este √© um caso onde as equa√ß√µes s√£o inconsistentes: n√£o existe um par de valores
                            (x, y) que satisfa√ßa todas as equa√ß√µes simultaneamente.
                            """)
                    else:
                        st.warning("N√£o foi poss√≠vel gerar a visualiza√ß√£o do sistema.")
                except Exception as e:
                    st.error(f"Erro ao gerar o gr√°fico: {str(e)}")
                    
            elif st.session_state.vars_count == 3:
                try:
                    fig = plot_3d_system(st.session_state.A, st.session_state.b)
                    if fig:
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Adicionar interpreta√ß√£o geom√©trica
                        st.markdown("### Interpreta√ß√£o Geom√©trica")
                        
                        if st.session_state.system_classification == "Sistema Poss√≠vel e Determinado (SPD)":
                            st.markdown("""
                            Cada equa√ß√£o do sistema representa um plano no espa√ßo tridimensional.
                            A solu√ß√£o do sistema √© o ponto √∫nico de interse√ß√£o entre estes planos.
                            
                            As coordenadas deste ponto satisfazem simultaneamente todas as equa√ß√µes do sistema.
                            """)
                        elif st.session_state.system_classification == "Sistema Poss√≠vel e Indeterminado (SPI)":
                            st.markdown("""
                            Os planos se intersectam em uma reta ou em um plano comum,
                            resultando em infinitas solu√ß√µes poss√≠veis.
                            
                            Isso ocorre quando temos menos equa√ß√µes linearmente independentes
                            do que vari√°veis. As solu√ß√µes formam um espa√ßo geom√©trico (reta ou plano).
                            """)
                        else:  # SI
                            st.markdown("""
                            Os planos n√£o possuem um ponto comum de interse√ß√£o,
                            o que indica que o sistema n√£o tem solu√ß√£o.
                            
                            Geometricamente, isso pode ocorrer quando temos tr√™s planos paralelos
                            ou quando a interse√ß√£o de dois planos √© uma reta paralela ao terceiro plano.
                            """)
                    else:
                        st.warning("N√£o foi poss√≠vel gerar a visualiza√ß√£o 3D do sistema.")
                except Exception as e:
                    st.error(f"Erro ao gerar o gr√°fico 3D: {str(e)}")
                    
            else:
                st.info("""
                A visualiza√ß√£o gr√°fica est√° dispon√≠vel apenas para sistemas com 2 ou 3 vari√°veis.
                
                Para sistemas com mais vari√°veis, voc√™ pode usar outras t√©cnicas de an√°lise,
                como a redu√ß√£o do sistema ou a proje√ß√£o em subespa√ßos.
                """)
                
                # Oferecer alternativas para visualiza√ß√£o
                st.markdown("### Alternativas para An√°lise Visual")
                
                viz_options = st.radio(
                    "Escolha uma alternativa:",
                    ["Matriz Ampliada", "Gr√°fico de Sparsidade", "Nenhuma"],
                    horizontal=True
                )
                
                if viz_options == "Matriz Ampliada":
                    A = st.session_state.A
                    b = st.session_state.b
                    augmented = np.column_stack((A, b))
                    
                    fig, ax = plt.subplots(figsize=(10, 6))
                    cax = ax.matshow(augmented, cmap='coolwarm')
                    
                    # Adicionar colorbar
                    fig.colorbar(cax)
                    
                    # Adicionar r√≥tulos
                    var_names = ["x", "y", "z", "w", "v", "u"][:A.shape[1]] + ["b"]
                    ax.set_xticks(np.arange(A.shape[1] + 1))
                    ax.set_xticklabels(var_names)
                    ax.set_yticks(np.arange(A.shape[0]))
                    ax.set_yticklabels([f"Eq {i+1}" for i in range(A.shape[0])])
                    
                    plt.title("Visualiza√ß√£o da Matriz Ampliada")
                    st.pyplot(fig)
                    
                elif viz_options == "Gr√°fico de Sparsidade":
                    A = st.session_state.A
                    
                    fig, ax = plt.subplots(figsize=(10, 6))
                    ax.spy(A, markersize=15, color='#1E88E5')
                    
                    # Adicionar r√≥tulos
                    var_names = ["x", "y", "z", "w", "v", "u"][:A.shape[1]]
                    ax.set_xticks(np.arange(A.shape[1]))
                    ax.set_xticklabels(var_names)
                    ax.set_yticks(np.arange(A.shape[0]))
                    ax.set_yticklabels([f"Eq {i+1}" for i in range(A.shape[0])])
                    
                    plt.title("Gr√°fico de Sparsidade dos Coeficientes")
                    st.pyplot(fig)

def show_theory_page():
    st.markdown('<h1 class="main-header">Teoria dos Sistemas Lineares</h1>', unsafe_allow_html=True)
    
    # Expandindo o dicion√°rio theory_topics com novos conte√∫dos
    theory_topics = {
        "Introdu√ß√£o aos Sistemas Lineares": {
            "content": """
            # Introdu√ß√£o aos Sistemas Lineares
            
            Um **sistema de equa√ß√µes lineares** √© um conjunto de uma ou mais equa√ß√µes lineares envolvendo as mesmas vari√°veis.
            
            ## Defini√ß√£o Formal
            
            Em nota√ß√£o matem√°tica, um sistema linear de m equa√ß√µes e n inc√≥gnitas pode ser escrito como:
            
            $$
            \\begin{align}
            a_{11}x_1 + a_{12}x_2 + \\ldots + a_{1n}x_n &= b_1\\\\
            a_{21}x_1 + a_{22}x_2 + \\ldots + a_{2n}x_n &= b_2\\\\
            \\vdots\\\\
            a_{m1}x_1 + a_{m2}x_2 + \\ldots + a_{mn}x_n &= b_m
            \\end{align}
            $$
            
            Onde:
            - $a_{ij}$ s√£o os coeficientes das inc√≥gnitas
            - $x_j$ s√£o as inc√≥gnitas (ou vari√°veis)
            - $b_i$ s√£o os termos independentes
            
            ## Representa√ß√£o Matricial
            
            O sistema linear tamb√©m pode ser representado na forma matricial:
            
            $$
            A\\mathbf{x} = \\mathbf{b}
            $$
            
            Onde:
            - $A$ √© a matriz dos coeficientes ($m \\times n$)
            - $\\mathbf{x}$ √© o vetor das inc√≥gnitas ($n \\times 1$)
            - $\\mathbf{b}$ √© o vetor dos termos independentes ($m \\times 1$)
            
            ## Tipos de Sistemas
            
            Um sistema linear pode ser:
            1. **Determinado**: Possui exatamente uma solu√ß√£o
            2. **Indeterminado**: Possui infinitas solu√ß√µes
            3. **Imposs√≠vel**: N√£o possui solu√ß√£o
            
            ## Import√¢ncia
            
            Os sistemas lineares s√£o fundamentais na matem√°tica aplicada e aparecem em diversos contextos:
            - F√≠sica (equil√≠brio de for√ßas, circuitos el√©tricos)
            - Economia (modelos de pre√ßo, an√°lise de insumo-produto)
            - Engenharia (an√°lise estrutural, processamento de sinais)
            - Computa√ß√£o gr√°fica (transforma√ß√µes geom√©tricas)
            """
        },
        "Classifica√ß√£o de Sistemas Lineares": {
            "content": """
            # Classifica√ß√£o de Sistemas Lineares
            
            ## Sistemas Poss√≠veis e Determinados (SPD)
            
            Um sistema √© **poss√≠vel e determinado** quando possui **exatamente uma solu√ß√£o**.
            
            **Caracter√≠sticas**:
            - O determinante da matriz dos coeficientes √© diferente de zero (det(A) ‚â† 0)
            - O n√∫mero de equa√ß√µes linearmente independentes √© igual ao n√∫mero de inc√≥gnitas
            - O posto da matriz dos coeficientes √© igual ao posto da matriz ampliada e igual ao n√∫mero de inc√≥gnitas
            
            **Interpreta√ß√£o geom√©trica**:
            - Em 2D: duas retas que se intersectam em um √∫nico ponto
            - Em 3D: tr√™s planos que se intersectam em um √∫nico ponto
            
            ## Sistemas Poss√≠veis e Indeterminados (SPI)
            
            Um sistema √© **poss√≠vel e indeterminado** quando possui **infinitas solu√ß√µes**.
            
            **Caracter√≠sticas**:
            - O posto da matriz dos coeficientes √© igual ao posto da matriz ampliada
            - O posto √© menor que o n√∫mero de inc√≥gnitas
            
            **Interpreta√ß√£o geom√©trica**:
            - Em 2D: retas coincidentes (sobrepostas)
            - Em 3D: planos que se intersectam em uma reta ou coincidem
            
            ## Sistemas Imposs√≠veis (SI)
            
            Um sistema √© **imposs√≠vel** quando **n√£o possui solu√ß√£o**.
            
            **Caracter√≠sticas**:
            - O posto da matriz dos coeficientes √© menor que o posto da matriz ampliada
            
            **Interpreta√ß√£o geom√©trica**:
            - Em 2D: retas paralelas (n√£o se intersectam)
            - Em 3D: planos paralelos ou que se intersectam sem um ponto comum a todos
            
            ## Teorema de Rouch√©-Capelli
            
            O teorema estabelece que:
            
            - Um sistema √© **compat√≠vel** (tem solu√ß√£o) se e somente se o posto da matriz dos coeficientes √© igual ao posto da matriz ampliada.
            
            - Seja r = posto da matriz dos coeficientes = posto da matriz ampliada:
              - Se r = n (n√∫mero de inc√≥gnitas), o sistema √© SPD
              - Se r < n, o sistema √© SPI
            
            - Se o posto da matriz dos coeficientes < posto da matriz ampliada, o sistema √© SI
            """
        },
        "M√©todo de Elimina√ß√£o de Gauss": {
            "content": """
            # M√©todo de Elimina√ß√£o de Gauss
            
            O m√©todo de elimina√ß√£o de Gauss √© um dos algoritmos mais importantes para resolver sistemas lineares. Consiste em transformar o sistema em uma forma triangular superior (escalonada) atrav√©s de opera√ß√µes elementares.
            
            ## Opera√ß√µes Elementares
            
            As opera√ß√µes elementares permitidas s√£o:
            1. Trocar a posi√ß√£o de duas equa√ß√µes
            2. Multiplicar uma equa√ß√£o por uma constante n√£o nula
            3. Substituir uma equa√ß√£o pela soma dela com um m√∫ltiplo de outra equa√ß√£o
            
            ## Algoritmo
            
            O m√©todo pode ser dividido em duas etapas:
            
            ### 1. Elimina√ß√£o para frente (Forward Elimination)
            
            Nesta fase, transformamos a matriz aumentada [A|b] em uma matriz triangular superior. Para cada linha i da matriz:
            
            - Encontrar o piv√¥ (elemento n√£o nulo na posi√ß√£o i,i)
            - Para cada linha j abaixo da linha i:
              - Calcular o fator de elimina√ß√£o: f = a_ji / a_ii
              - Subtrair da linha j a linha i multiplicada por f
            
            ### 2. Substitui√ß√£o reversa (Back Substitution)
            
            Uma vez obtida a forma triangular, resolvemos o sistema de tr√°s para frente:
            
            - Calcular o valor da √∫ltima vari√°vel
            - Substituir esse valor nas equa√ß√µes anteriores para encontrar as demais vari√°veis
            
            ## Elimina√ß√£o Gaussiana com Pivoteamento Parcial
            
            Para melhorar a estabilidade num√©rica, √© comum usar pivoteamento parcial:
            
            - A cada passo, escolher como piv√¥ o elemento de maior valor absoluto na coluna atual
            - Trocar linhas para que este elemento fique na posi√ß√£o diagonal
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            x + y + z &= 6\\\\
            2x - y + z &= 3\\\\
            x + 2y + 3z &= 14
            \\end{align}
            $$
            
            **Matriz aumentada inicial**:
            
            $$
            \\begin{bmatrix}
            1 & 1 & 1 & | & 6 \\\\
            2 & -1 & 1 & | & 3 \\\\
            1 & 2 & 3 & | & 14
            \\end{bmatrix}
            $$
            
            **Ap√≥s elimina√ß√£o para frente**:
            
            $$
            \\begin{bmatrix}
            1 & 1 & 1 & | & 6 \\\\
            0 & -3 & -1 & | & -9 \\\\
            0 & 0 & 5/3 & | & 5
            \\end{bmatrix}
            $$
            
            **Substitui√ß√£o reversa**:
            - Da √∫ltima linha: z = 3
            - Da segunda linha: -3y - 3 = -9, portanto y = 2
            - Da primeira linha: x + 2 + 3 = 6, portanto x = 1
            
            **Solu√ß√£o**: x = 1, y = 2, z = 3
            """
        },
        "M√©todo da Adi√ß√£o": {
            "content": """
            # M√©todo da Adi√ß√£o (ou Elimina√ß√£o por Soma)
            
            O m√©todo da adi√ß√£o √© uma t√©cnica espec√≠fica para resolver sistemas de equa√ß√µes lineares, especialmente √∫til em sistemas com poucas equa√ß√µes. √â um caso particular do m√©todo de elimina√ß√£o de Gauss, focado na elimina√ß√£o de vari√°veis atrav√©s da soma de equa√ß√µes.
            
            ## Procedimento
            
            1. Organizar as equa√ß√µes de modo que os coeficientes de uma determinada vari√°vel possam se anular quando as equa√ß√µes forem somadas ou subtra√≠das
            2. Multiplicar as equa√ß√µes por constantes apropriadas para que os coeficientes da vari√°vel a ser eliminada se tornem opostos
            3. Somar as equa√ß√µes para eliminar a vari√°vel
            4. Repetir o processo at√© obter uma equa√ß√£o com apenas uma vari√°vel
            5. Resolver para essa vari√°vel e substituir nas equa√ß√µes anteriores
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + 3y &= 8 \\quad (1)\\\\
            4x - y &= 10 \\quad (2)
            \\end{align}
            $$
            
            **Passo 1**: Multiplicamos a equa√ß√£o (1) por 2 para que o coeficiente de x se torne 4
            
            $$
            \\begin{align}
            4x + 6y &= 16 \\quad (1')\\\\
            4x - y &= 10 \\quad (2)
            \\end{align}
            $$
            
            **Passo 2**: Subtra√≠mos a equa√ß√£o (2) da equa√ß√£o (1')
            
            $$
            \\begin{align}
            4x + 6y - (4x - y) &= 16 - 10\\\\
            7y &= 6
            \\end{align}
            $$
            
            **Passo 3**: Resolvemos para y
            
            $$y = \\frac{6}{7}$$
            
            **Passo 4**: Substitu√≠mos o valor de y na equa√ß√£o (2)
            
            $$
            \\begin{align}
            4x - \\frac{6}{7} &= 10\\\\
            4x &= 10 + \\frac{6}{7}\\\\
            4x &= \\frac{70 + 6}{7}\\\\
            4x &= \\frac{76}{7}\\\\
            x &= \\frac{19}{7}
            \\end{align}
            $$
            
            **Solu√ß√£o**: $x = \\frac{19}{7}$, $y = \\frac{6}{7}$
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - M√©todo intuitivo e f√°cil de aplicar manualmente para sistemas pequenos
            - N√£o requer conhecimentos avan√ßados de √°lgebra linear
            - Pode ser mais direto que outros m√©todos para certos tipos de sistemas
            
            **Desvantagens**:
            - Pode ser trabalhoso para sistemas maiores
            - A escolha de quais equa√ß√µes combinar e como requer estrat√©gia
            - Menos sistem√°tico que o m√©todo de elimina√ß√£o de Gauss completo
            """
        },
        "M√©todo da Substitui√ß√£o": {
            "content": """
            # M√©todo da Substitui√ß√£o
            
            O m√©todo da substitui√ß√£o √© uma t√©cnica elementar para resolver sistemas de equa√ß√µes lineares, especialmente √∫til para sistemas pequenos ou esparsos (com muitos zeros).
            
            ## Procedimento
            
            1. Isolar uma vari√°vel em uma das equa√ß√µes
            2. Substituir a express√£o obtida nas demais equa√ß√µes, reduzindo o sistema
            3. Repetir o processo at√© obter uma equa√ß√£o com apenas uma vari√°vel
            4. Resolver para essa vari√°vel e substituir nas express√µes anteriores para encontrar as demais vari√°veis
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            x + 2y &= 5 \\quad (1)\\\\
            3x - 4y &= 7 \\quad (2)
            \\end{align}
            $$
            
            **Passo 1**: Isolamos x na equa√ß√£o (1)
            
            $$x = 5 - 2y \quad (3)$$
            
            **Passo 2**: Substitu√≠mos (3) na equa√ß√£o (2)
            
            $$
            \\begin{align}
            3(5 - 2y) - 4y &= 7\\\\
            15 - 6y - 4y &= 7\\\\
            15 - 10y &= 7\\\\
            -10y &= 7 - 15\\\\
            -10y &= -8\\\\
            y &= \\frac{8}{10} = \\frac{4}{5}
            \\end{align}
            $$
            
            **Passo 3**: Substitu√≠mos o valor de y em (3)
            
            $$
            \\begin{align}
            x &= 5 - 2 \\cdot \\frac{4}{5}\\\\
            &= 5 - \\frac{8}{5}\\\\
            &= \\frac{25 - 8}{5}\\\\
            &= \\frac{17}{5}
            \\end{align}
            $$
            
            **Solu√ß√£o**: $x = \\frac{17}{5}$, $y = \\frac{4}{5}$
            
            ## Aplica√ß√£o em Sistemas Triangulares
            
            O m√©todo da substitui√ß√£o √© particularmente eficiente para sistemas triangulares. De fato, a substitui√ß√£o reversa usada ap√≥s a elimina√ß√£o gaussiana √© uma aplica√ß√£o deste m√©todo.
            
            Para um sistema triangular superior:
            
            $$
            \\begin{align}
            a_{11}x_1 + a_{12}x_2 + \\ldots + a_{1n}x_n &= b_1\\\\
            a_{22}x_2 + \\ldots + a_{2n}x_n &= b_2\\\\
            \\vdots\\\\
            a_{nn}x_n &= b_n
            \\end{align}
            $$
            
            Come√ßamos resolvendo $x_n = b_n/a_{nn}$ e substitu√≠mos nas equa√ß√µes anteriores.
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - M√©todo intuitivo e f√°cil de entender
            - Eficiente para sistemas pequenos ou triangulares
            - √ötil em sistemas onde algumas vari√°veis podem ser facilmente isoladas
            
            **Desvantagens**:
            - Pode levar a c√°lculos complexos se as express√µes substitu√≠das forem complicadas
            - N√£o √© t√£o sistem√°tico ou eficiente computacionalmente quanto outros m√©todos para sistemas grandes
            """
        },
        "M√©todo da Compara√ß√£o": {
            "content": """
            # M√©todo da Compara√ß√£o
            
            O m√©todo da compara√ß√£o √© uma t√©cnica para resolver sistemas de equa√ß√µes lineares que consiste em isolar a mesma vari√°vel em diferentes equa√ß√µes e, em seguida, igualar as express√µes resultantes.
            
            ## Procedimento
            
            1. Isolar a mesma vari√°vel em duas ou mais equa√ß√µes do sistema
            2. Igualar as express√µes obtidas, formando novas equa√ß√µes com menos vari√°veis
            3. Resolver o sistema reduzido
            4. Substituir as solu√ß√µes encontradas nas express√µes iniciais para obter as demais vari√°veis
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + 3y &= 7 \\quad (1)\\\\
            5x - 2y &= 8 \\quad (2)
            \\end{align}
            $$
            
            **Passo 1**: Isolamos x em ambas as equa√ß√µes
            
            Da equa√ß√£o (1):
            $$x = \\frac{7 - 3y}{2} \\quad (3)$$
            
            Da equa√ß√£o (2):
            $$x = \\frac{8 + 2y}{5} \\quad (4)$$
            
            **Passo 2**: Igualamos as express√µes (3) e (4)
            
            $$
            \\begin{align}
            \\frac{7 - 3y}{2} &= \\frac{8 + 2y}{5}\\\\
            5(7 - 3y) &= 2(8 + 2y)\\\\
            35 - 15y &= 16 + 4y\\\\
            35 - 15y &= 16 + 4y\\\\
            35 - 16 &= 4y + 15y\\\\
            19 &= 19y\\\\
            y &= 1
            \\end{align}
            $$
            
            **Passo 3**: Substitu√≠mos y = 1 em uma das express√µes para x, por exemplo em (3)
            
            $$
            \\begin{align}
            x &= \\frac{7 - 3(1)}{2}\\\\
            &= \\frac{7 - 3}{2}\\\\
            &= \\frac{4}{2}\\\\
            &= 2
            \\end{align}
            $$
            
            **Solu√ß√£o**: x = 2, y = 1
            
            ## Verifica√ß√£o
            
            Podemos verificar a solu√ß√£o substituindo os valores nas equa√ß√µes originais:
            
            Equa√ß√£o (1): 2(2) + 3(1) = 4 + 3 = 7 ‚úì
            
            Equa√ß√£o (2): 5(2) - 2(1) = 10 - 2 = 8 ‚úì
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - M√©todo intuitivo que n√£o requer conhecimentos avan√ßados
            - √ötil para sistemas com duas equa√ß√µes e duas inc√≥gnitas
            - Pode ser mais direto em certos casos espec√≠ficos
            
            **Desvantagens**:
            - Torna-se complicado para sistemas maiores
            - Pode levar a express√µes alg√©bricas complexas
            - Menos eficiente computacionalmente que m√©todos mais sistem√°ticos
            """
        },
        "Regra de Cramer": {
            "content": """
            # Regra de Cramer
            
            A regra de Cramer √© um m√©todo para resolver sistemas lineares usando determinantes. √â aplic√°vel apenas a sistemas com mesmo n√∫mero de equa√ß√µes e inc√≥gnitas, onde o determinante da matriz dos coeficientes √© diferente de zero (sistemas SPD).
            
            ## Procedimento
            
            Para um sistema AX = B:
            
            1. Calcular o determinante D da matriz A
            2. Para cada vari√°vel x·µ¢:
               - Substituir a coluna i da matriz A pela coluna B, obtendo a matriz A·µ¢
               - Calcular o determinante D·µ¢
               - A solu√ß√£o para x·µ¢ √© dada por x·µ¢ = D·µ¢/D
            
            ## F√≥rmula
            
            Para um sistema 2√ó2:
            
            $$
            \\begin{align}
            a_1x + b_1y &= c_1\\\\
            a_2x + b_2y &= c_2
            \\end{align}
            $$
            
            As solu√ß√µes s√£o:
            
            $$
            x = \\frac{\\begin{vmatrix} c_1 & b_1 \\\\ c_2 & b_2 \\end{vmatrix}}{\\begin{vmatrix} a_1 & b_1 \\\\ a_2 & b_2 \\end{vmatrix}} = \\frac{c_1b_2 - b_1c_2}{a_1b_2 - b_1a_2}
            $$
            
            $$
            y = \\frac{\\begin{vmatrix} a_1 & c_1 \\\\ a_2 & c_2 \\end{vmatrix}}{\\begin{vmatrix} a_1 & b_1 \\\\ a_2 & b_2 \\end{vmatrix}} = \\frac{a_1c_2 - c_1a_2}{a_1b_2 - b_1a_2}
            $$
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + 3y &= 8\\\\
            4x - y &= 1
            \\end{align}
            $$
            
            **Determinante principal**:
            
            $$
            D = \\begin{vmatrix} 2 & 3 \\\\ 4 & -1 \\end{vmatrix} = 2 \\times (-1) - 3 \\times 4 = -2 - 12 = -14
            $$
            
            **Determinante para x**:
            
            $$
            D_x = \\begin{vmatrix} 8 & 3 \\\\ 1 & -1 \\end{vmatrix} = 8 \\times (-1) - 3 \\times 1 = -8 - 3 = -11
            $$
            
            **Determinante para y**:
            
            $$
            D_y = \\begin{vmatrix} 2 & 8 \\\\ 4 & 1 \\end{vmatrix} = 2 \\times 1 - 8 \\times 4 = 2 - 32 = -30
            $$
            
            **Solu√ß√£o**:
            
            $$
            x = \\frac{D_x}{D} = \\frac{-11}{-14} = \\frac{11}{14}
            $$
            
            $$
            y = \\frac{D_y}{D} = \\frac{-30}{-14} = \\frac{15}{7}
            $$
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - M√©todo direto (n√£o iterativo)
            - F√°cil de entender e aplicar para sistemas pequenos
            
            **Desvantagens**:
            - Aplic√°vel apenas a sistemas quadrados (n√ón) com determinante n√£o nulo
            - Computacionalmente ineficiente para sistemas grandes
            - N√£o √© recomendado para sistemas mal condicionados
            """
        },
        "M√©todo da Matriz Inversa": {
            "content": """
            # M√©todo da Matriz Inversa
            
            O m√©todo da matriz inversa √© uma abordagem direta para resolver sistemas lineares na forma AX = B, onde A √© uma matriz quadrada invers√≠vel.
            
            ## Procedimento
            
            1. Verificar se a matriz A √© invers√≠vel (det(A) ‚â† 0)
            2. Calcular a matriz inversa A‚Åª¬π
            3. Multiplicar ambos os lados da equa√ß√£o por A‚Åª¬π: A‚Åª¬π(AX) = A‚Åª¬πB
            4. Simplificar: X = A‚Åª¬πB
            
            ## C√°lculo da Matriz Inversa
            
            Para uma matriz 2√ó2:
            
            $$
            \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix}^{-1} = \\frac{1}{ad-bc} \\begin{bmatrix} d & -b \\\\ -c & a \\end{bmatrix}
            $$
            
            Para matrizes maiores, pode-se usar:
            - M√©todo da matriz adjunta
            - Elimina√ß√£o gaussiana
            - Decomposi√ß√£o LU
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + y &= 5\\\\
            3x + 4y &= 11
            \\end{align}
            $$
            
            Na forma matricial:
            
            $$
            \\begin{bmatrix} 2 & 1 \\\\ 3 & 4 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix} = \\begin{bmatrix} 5 \\\\ 11 \\end{bmatrix}
            $$
            
            **Determinante**:
            
            $$
            \\det(A) = 2 \\times 4 - 1 \\times 3 = 8 - 3 = 5
            $$
            
            **Matriz inversa**:
            
            $$
            A^{-1} = \\frac{1}{5} \\begin{bmatrix} 4 & -1 \\\\ -3 & 2 \\end{bmatrix} = \\begin{bmatrix} 4/5 & -1/5 \\\\ -3/5 & 2/5 \\end{bmatrix}
            $$
            
            **Solu√ß√£o**:
            
            $$
            \\begin{bmatrix} x \\\\ y \\end{bmatrix} = \\begin{bmatrix} 4/5 & -1/5 \\\\ -3/5 & 2/5 \\end{bmatrix} \\begin{bmatrix} 5 \\\\ 11 \\end{bmatrix} = \\begin{bmatrix} 4/5 \\times 5 - 1/5 \\times 11 \\\\ -3/5 \\times 5 + 2/5 \\times 11 \\end{bmatrix} = \\begin{bmatrix} 4 - 11/5 \\\\ -3 + 22/5 \\end{bmatrix} = \\begin{bmatrix} 9/5 \\\\ 7/5 \\end{bmatrix}
            $$
            
            Portanto, x = 9/5 e y = 7/5.
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - M√©todo direto e elegante
            - √ötil quando precisamos resolver m√∫ltiplos sistemas com a mesma matriz de coeficientes
            
            **Desvantagens**:
            - Aplic√°vel apenas a sistemas quadrados (n√ón) com determinante n√£o nulo
            - Computacionalmente ineficiente para sistemas grandes
            - Pode ser numericamente inst√°vel para matrizes mal condicionadas
            """
        },
        "M√©todo de Gauss-Jordan": {
            "content": """
            # M√©todo de Gauss-Jordan
            
            O m√©todo de Gauss-Jordan √© uma extens√£o do m√©todo de elimina√ß√£o de Gauss que leva a matriz aumentada √† forma escalonada reduzida.
            
            ## Procedimento
            
            1. Aplicar opera√ß√µes elementares para obter 1's na diagonal principal
            2. Zerar todos os elementos acima e abaixo da diagonal principal
            
            **Forma final da matriz aumentada**:
            ```
            | 1 0 0 ... | x‚ÇÅ |
            | 0 1 0 ... | x‚ÇÇ |
            | 0 0 1 ... | x‚ÇÉ |
            | ...       | ... |
            ```
            
            O vetor solu√ß√£o pode ser lido diretamente da √∫ltima coluna da matriz.
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + y + z &= 5\\\\
            x - y + 2z &= 4\\\\
            3x + 2y - z &= 3
            \\end{align}
            $$
            
            **Matriz aumentada inicial**:
            
            $$
            \\begin{bmatrix}
            2 & 1 & 1 & | & 5 \\\\
            1 & -1 & 2 & | & 4 \\\\
            3 & 2 & -1 & | & 3
            \\end{bmatrix}
            $$
            
            **Passo 1**: Obter 1 na posi√ß√£o (1,1) e zerar os outros elementos da primeira coluna
            
            Dividir a primeira linha por 2:
            
            $$
            \\begin{bmatrix}
            1 & 1/2 & 1/2 & | & 5/2 \\\\
            1 & -1 & 2 & | & 4 \\\\
            3 & 2 & -1 & | & 3
            \\end{bmatrix}
            $$
            
            Subtrair a primeira linha da segunda:
            
            $$
            \\begin{bmatrix}
            1 & 1/2 & 1/2 & | & 5/2 \\\\
            0 & -3/2 & 3/2 & | & 3/2 \\\\
            3 & 2 & -1 & | & 3
            \\end{bmatrix}
            $$
            
            Subtrair 3 vezes a primeira linha da terceira:
            
            $$
            \\begin{bmatrix}
            1 & 1/2 & 1/2 & | & 5/2 \\\\
            0 & -3/2 & 3/2 & | & 3/2 \\\\
            0 & 1/2 & -5/2 & | & -9/2
            \\end{bmatrix}
            $$
            
            **Passo 2**: Obter 1 na posi√ß√£o (2,2) e zerar os outros elementos da segunda coluna
            
            Multiplicar a segunda linha por -2/3:
            
            $
            \\begin{bmatrix}
            1 & 1/2 & 1/2 & | & 5/2 \\\\
            0 & 1 & -1 & | & -1 \\\\
            0 & 1/2 & -5/2 & | & -9/2
            \\end{bmatrix}
            $
            
            Subtrair 1/2 vezes a segunda linha da primeira:
            
            $
            \\begin{bmatrix}
            1 & 0 & 1 & | & 3 \\\\
            0 & 1 & -1 & | & -1 \\\\
            0 & 1/2 & -5/2 & | & -9/2
            \\end{bmatrix}
            $
            
            Subtrair 1/2 vezes a segunda linha da terceira:
            
            $
            \\begin{bmatrix}
            1 & 0 & 1 & | & 3 \\\\
            0 & 1 & -1 & | & -1 \\\\
            0 & 0 & -2 & | & -4
            \\end{bmatrix}
            $
            
            **Passo 3**: Obter 1 na posi√ß√£o (3,3) e zerar os outros elementos da terceira coluna
            
            Multiplicar a terceira linha por -1/2:
            
            $
            \\begin{bmatrix}
            1 & 0 & 1 & | & 3 \\\\
            0 & 1 & -1 & | & -1 \\\\
            0 & 0 & 1 & | & 2
            \\end{bmatrix}
            $
            
            Subtrair 1 vez a terceira linha da primeira:
            
            $
            \\begin{bmatrix}
            1 & 0 & 0 & | & 1 \\\\
            0 & 1 & -1 & | & -1 \\\\
            0 & 0 & 1 & | & 2
            \\end{bmatrix}
            $
            
            Somar 1 vez a terceira linha √† segunda:
            
            $
            \\begin{bmatrix}
            1 & 0 & 0 & | & 1 \\\\
            0 & 1 & 0 & | & 1 \\\\
            0 & 0 & 1 & | & 2
            \\end{bmatrix}
            $
            
            A solu√ß√£o pode ser lida diretamente da √∫ltima coluna: x = 1, y = 1, z = 2.
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - A solu√ß√£o √© obtida diretamente, sem necessidade de substitui√ß√£o reversa
            - √ötil para calcular a inversa de uma matriz
            
            **Desvantagens**:
            - Requer mais opera√ß√µes que o m√©todo de Gauss padr√£o
            - Pode ser numericamente menos est√°vel em alguns casos
            """
        },

        "M√©todos Iterativos": {
            "content": """
            # M√©todos Iterativos para Sistemas Lineares
            
            Os m√©todos iterativos come√ßam com uma aproxima√ß√£o inicial e melhoram progressivamente a solu√ß√£o.
            
            ## M√©todo de Jacobi
            
            **Procedimento**:
            1. Para cada equa√ß√£o i, isolar a inc√≥gnita x_i
            2. Iniciar com uma aproxima√ß√£o inicial (geralmente zeros)
            3. Em cada itera√ß√£o k+1, calcular:
               x_i^(k+1) = (b_i - Œ£ a_ij x_j^(k)) / a_ii, para j ‚â† i
            4. Repetir at√© convergir
            
            ## M√©todo de Gauss-Seidel
            
            Similar ao m√©todo de Jacobi, mas usa valores j√° atualizados na mesma itera√ß√£o:
            
            x_i^(k+1) = (b_i - Œ£ a_ij x_j^(k+1) - Œ£ a_ij x_j^(k)) / a_ii
                          j<i                j>i
            
            **Condi√ß√µes de converg√™ncia**:
            - Matriz diagonalmente dominante (|a_ii| > Œ£ |a_ij| para j ‚â† i)
            - Matriz definida positiva
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            10x + 2y + z &= 13\\\\
            x + 5y + z &= 7\\\\
            2x + y + 10z &= 13
            \\end{align}
            $$
            
            Isolando as vari√°veis:
            
            $$
            \\begin{align}
            x &= \\frac{13 - 2y - z}{10}\\\\
            y &= \\frac{7 - x - z}{5}\\\\
            z &= \\frac{13 - 2x - y}{10}
            \\end{align}
            $$
            
            **M√©todo de Jacobi**:
            
            Partindo de x^(0) = y^(0) = z^(0) = 0:
            
            Itera√ß√£o 1:
            - x^(1) = (13 - 2√ó0 - 0)/10 = 1.3
            - y^(1) = (7 - 0 - 0)/5 = 1.4
            - z^(1) = (13 - 2√ó0 - 0)/10 = 1.3
            
            Itera√ß√£o 2:
            - x^(2) = (13 - 2√ó1.4 - 1.3)/10 = 0.83
            - y^(2) = (7 - 1.3 - 1.3)/5 = 0.88
            - z^(2) = (13 - 2√ó1.3 - 1.4)/10 = 0.83
            
            O processo continua at√© a converg√™ncia para x = y = z = 1.
            
            **M√©todo de Gauss-Seidel**:
            
            Partindo de x^(0) = y^(0) = z^(0) = 0:
            
            Itera√ß√£o 1:
            - x^(1) = (13 - 2√ó0 - 0)/10 = 1.3
            - y^(1) = (7 - 1.3 - 0)/5 = 1.14
            - z^(1) = (13 - 2√ó1.3 - 1.14)/10 = 0.826
            
            Itera√ß√£o 2:
            - x^(2) = (13 - 2√ó1.14 - 0.826)/10 = 0.8934
            - y^(2) = (7 - 0.8934 - 0.826)/5 = 1.0561
            - z^(2) = (13 - 2√ó0.8934 - 1.0561)/10 = 0.9157
            
            O m√©todo converge mais rapidamente para x = y = z = 1.
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - Mais eficientes para sistemas grandes e esparsos
            - Menor requisito de mem√≥ria
            - Podem lidar com matrizes mal condicionadas
            
            **Desvantagens**:
            - Converg√™ncia n√£o garantida para todas as matrizes
            - Podem ser lentos para atingir alta precis√£o
            """
        },
        "Decomposi√ß√£o LU": {
            "content": """
            # Decomposi√ß√£o LU
            
            A decomposi√ß√£o LU fatoriza a matriz A em um produto de duas matrizes: A = LU, onde:
            - L √© uma matriz triangular inferior
            - U √© uma matriz triangular superior
            
            ## Procedimento para resolver AX = B
            
            1. Decompor A = LU
            2. Resolver LY = B por substitui√ß√£o direta
            3. Resolver UX = Y por substitui√ß√£o reversa
            
            ## Algoritmo para decomposi√ß√£o LU
            
            **Procedimento de Doolittle**:
            
            Para uma matriz n√ón:
            
            1. Para i = 1 at√© n:
               - Para j = i at√© n: u_{ij} = a_{ij} - Œ£(l_{ik} √ó u_{kj}) para k = 1 at√© i-1
               - Para j = i+1 at√© n: l_{ji} = (a_{ji} - Œ£(l_{jk} √ó u_{ki}) para k = 1 at√© i-1) / u_{ii}
            
            2. Para i = 1 at√© n: l_{ii} = 1 (diagonal unit√°ria para L)
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + y + z &= 5\\\\
            4x + 5y + z &= 9\\\\
            x + y + 3z &= 11
            \\end{align}
            $$
            
            **Decomposi√ß√£o LU**:
            
            Matriz A:
            
            $$
            A = \\begin{bmatrix}
            2 & 1 & 1 \\\\
            4 & 5 & 1 \\\\
            1 & 1 & 3
            \\end{bmatrix}
            $$
            
            Calculando L e U:
            
            $$
            L = \\begin{bmatrix}
            1 & 0 & 0 \\\\
            2 & 1 & 0 \\\\
            0.5 & 0.25 & 1
            \\end{bmatrix}
            $$
            
            $$
            U = \\begin{bmatrix}
            2 & 1 & 1 \\\\
            0 & 3 & -1 \\\\
            0 & 0 & 2.5
            \\end{bmatrix}
            $$
            
            **Resolver LY = B**:
            
            $$
            \\begin{bmatrix}
            1 & 0 & 0 \\\\
            2 & 1 & 0 \\\\
            0.5 & 0.25 & 1
            \\end{bmatrix}
            \\begin{bmatrix}
            y_1 \\\\
            y_2 \\\\
            y_3
            \\end{bmatrix} =
            \\begin{bmatrix}
            5 \\\\
            9 \\\\
            11
            \\end{bmatrix}
            $$
            
            - y‚ÇÅ = 5
            - y‚ÇÇ = 9 - 2√ó5 = -1
            - y‚ÇÉ = 11 - 0.5√ó5 - 0.25√ó(-1) = 11 - 2.5 + 0.25 = 8.75
            
            **Resolver UX = Y**:
            
            $$
            \\begin{bmatrix}
            2 & 1 & 1 \\\\
            0 & 3 & -1 \\\\
            0 & 0 & 2.5
            \\end{bmatrix}
            \\begin{bmatrix}
            x \\\\
            y \\\\
            z
            \\end{bmatrix} =
            \\begin{bmatrix}
            5 \\\\
            -1 \\\\
            8.75
            \\end{bmatrix}
            $$
            
            - z = 8.75 / 2.5 = 3.5
            - y = (-1 + z) / 3 = (-1 + 3.5) / 3 = 2.5 / 3 = 0.833...
            - x = (5 - y - z) / 2 = (5 - 0.833 - 3.5) / 2 = 0.667...
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - Eficiente para resolver m√∫ltiplos sistemas com a mesma matriz de coeficientes
            - √ötil para calcular determinantes e inversas
            - Computacionalmente eficiente
            
            **Desvantagens**:
            - Requer armazenamento adicional para as matrizes L e U
            - Pode ser inst√°vel para matrizes mal condicionadas sem pivoteamento
            """
        },
        "Interpreta√ß√£o Geom√©trica": {
            "content": """
            # Interpreta√ß√£o Geom√©trica de Sistemas Lineares
            
            ## Sistemas 2√ó2
            
            Em um sistema com duas equa√ß√µes e duas inc√≥gnitas, cada equa√ß√£o representa uma reta no plano cartesiano.
            
            **Poss√≠veis configura√ß√µes**:
            
            1. **SPD (Sistema Poss√≠vel e Determinado)**:
               - As retas se intersectam em um √∫nico ponto
               - Este ponto representa a √∫nica solu√ß√£o do sistema
               - Exemplo: x + y = 3 e x - y = 1
               
            2. **SPI (Sistema Poss√≠vel e Indeterminado)**:
               - As retas s√£o coincidentes (sobrepostas)
               - Todos os pontos da reta s√£o solu√ß√µes do sistema
               - Exemplo: 2x + 3y = 6 e 4x + 6y = 12
               
            3. **SI (Sistema Imposs√≠vel)**:
               - As retas s√£o paralelas e n√£o coincidentes
               - N√£o h√° nenhum ponto comum, ou seja, n√£o h√° solu√ß√£o
               - Exemplo: x + y = 3 e x + y = 5
            
            ## Sistemas 3√ó3
            
            Em um sistema com tr√™s equa√ß√µes e tr√™s inc√≥gnitas, cada equa√ß√£o representa um plano no espa√ßo tridimensional.
            
            **Poss√≠veis configura√ß√µes**:
            
            1. **SPD (Sistema Poss√≠vel e Determinado)**:
               - Os tr√™s planos se intersectam em um √∫nico ponto
               - Este ponto √© a √∫nica solu√ß√£o do sistema
               
            2. **SPI (Sistema Poss√≠vel e Indeterminado)**:
               - Os planos se intersectam em uma reta (dois planos paralelos intersectados por um terceiro)
               - Ou se intersectam em um plano (tr√™s planos coincidentes)
               - As solu√ß√µes formam uma reta ou um plano
               
            3. **SI (Sistema Imposs√≠vel)**:
               - Os planos n√£o possuem ponto comum de interse√ß√£o
               - Pode ocorrer quando temos planos paralelos ou quando a interse√ß√£o de dois planos √© paralela ao terceiro
            
            ## Rela√ß√£o com o Espa√ßo Vetorial
            
            - As linhas da matriz de coeficientes podem ser vistas como vetores
            - O determinante da matriz est√° relacionado ao volume do paralelep√≠pedo formado por estes vetores
            - Um determinante zero indica que os vetores s√£o linearmente dependentes
            - Para sistemas homog√™neos (AX = 0), o conjunto solu√ß√£o forma um subespa√ßo vetorial
            """
        },
        "Aplica√ß√µes de Sistemas Lineares": {
            "content": """
            # Aplica√ß√µes de Sistemas Lineares
            
            Os sistemas de equa√ß√µes lineares s√£o ferramentas fundamentais em diversas √°reas. Veja algumas aplica√ß√µes importantes:
            
            ## F√≠sica e Engenharia
            
            ### An√°lise de Circuitos El√©tricos
            - Leis de Kirchhoff: correntes em um n√≥ e tens√µes em um la√ßo
            - Cada equa√ß√£o representa a conserva√ß√£o de corrente ou tens√£o
            
            **Exemplo**: Para um circuito com tr√™s malhas, podemos ter:
            ```
            R‚ÇÅI‚ÇÅ + R‚ÇÇ(I‚ÇÅ - I‚ÇÇ) = V‚ÇÅ
            R‚ÇÇ(I‚ÇÇ - I‚ÇÅ) + R‚ÇÉI‚ÇÇ + R‚ÇÑ(I‚ÇÇ - I‚ÇÉ) = 0
            R‚ÇÑ(I‚ÇÉ - I‚ÇÇ) + R‚ÇÖI‚ÇÉ = V‚ÇÇ
            ```
            
            ### Est√°tica e Din√¢mica
            - Equil√≠brio de for√ßas e momentos em estruturas
            - An√°lise de treli√ßas e vigas
            
            **Exemplo**: Para um sistema com tr√™s for√ßas desconhecidas:
            ```
            F‚ÇÅcos(Œ∏‚ÇÅ) + F‚ÇÇcos(Œ∏‚ÇÇ) + F‚ÇÉcos(Œ∏‚ÇÉ) = 0
            F‚ÇÅsin(Œ∏‚ÇÅ) + F‚ÇÇsin(Œ∏‚ÇÇ) + F‚ÇÉsin(Œ∏‚ÇÉ) = 0
            r‚ÇÅ√óF‚ÇÅ + r‚ÇÇ√óF‚ÇÇ + r‚ÇÉ√óF‚ÇÉ = 0
            ```
            
            ### Transfer√™ncia de Calor
            - Modelagem de problemas de condu√ß√£o t√©rmica
            - M√©todos de diferen√ßas finitas para equa√ß√µes diferenciais
            
            ## Economia
            
            ### An√°lise de Insumo-Produto de Leontief
            - Modelagem das interdepend√™ncias entre diferentes setores da economia
            - Previs√£o de como mudan√ßas em um setor afetam outros setores
            
            **Exemplo**: Em uma economia com tr√™s setores:
            ```
            x‚ÇÅ = a‚ÇÅ‚ÇÅx‚ÇÅ + a‚ÇÅ‚ÇÇx‚ÇÇ + a‚ÇÅ‚ÇÉx‚ÇÉ + d‚ÇÅ
            x‚ÇÇ = a‚ÇÇ‚ÇÅx‚ÇÅ + a‚ÇÇ‚ÇÇx‚ÇÇ + a‚ÇÇ‚ÇÉx‚ÇÉ + d‚ÇÇ
            x‚ÇÉ = a‚ÇÉ‚ÇÅx‚ÇÅ + a‚ÇÉ‚ÇÇx‚ÇÇ + a‚ÇÉ‚ÇÉx‚ÇÉ + d‚ÇÉ
            ```
            Onde x‚ÇÅ √© a produ√ß√£o do setor i, a_ij √© quanto do produto i √© usado para produzir uma unidade do produto j, e d_i √© a demanda externa.
            
            ### Otimiza√ß√£o e Programa√ß√£o Linear
            - Maximiza√ß√£o de lucro ou minimiza√ß√£o de custos
            - Aloca√ß√£o √≥tima de recursos limitados
            
            ## Qu√≠mica
            
            ### Balanceamento de Equa√ß√µes Qu√≠micas
            - Cada elemento forma uma equa√ß√£o linear
            - Os coeficientes estequiom√©tricos s√£o as inc√≥gnitas
            
            **Exemplo**: Para a rea√ß√£o C‚ÇÉH‚Çà + O‚ÇÇ ‚Üí CO‚ÇÇ + H‚ÇÇO
            ```
            3a = c       (para o carbono)
            8a = 2e      (para o hidrog√™nio)
            2b = 2c + e  (para o oxig√™nio)
            ```
            
            ### Equil√≠brio Qu√≠mico
            - Determina√ß√£o de concentra√ß√µes em equil√≠brio
            
            ## Computa√ß√£o Gr√°fica
            
            ### Transforma√ß√µes Geom√©tricas
            - Rota√ß√£o, transla√ß√£o e escala de objetos
            - Representadas como transforma√ß√µes matriciais
            
            ### Renderiza√ß√£o 3D
            - Sistemas para determinar proje√ß√µes de objetos 3D em telas 2D
            
            ## Problemas de Mistura
            
            ### Farmacologia
            - Mistura de componentes para atingir concentra√ß√µes espec√≠ficas
            - Formula√ß√£o de medicamentos
            
            **Exemplo**: Um farmac√™utico precisa preparar 100ml de uma solu√ß√£o com 25% de um princ√≠pio ativo, usando solu√ß√µes de 10%, 20% e 40%.
            ```
            x + y + z = 100
            0.1x + 0.2y + 0.4z = 25
            ```
            
            ### Processamento de Alimentos
            - Mistura de ingredientes para atingir perfis nutricionais
            
            ## Tr√°fego e Transporte
            
            ### Fluxo de Redes
            - Modelagem de fluxo de tr√°fego em redes de transporte
            - Otimiza√ß√£o de rotas
            """
        },
        "Sistemas Homog√™neos": {
            "content": """
            # Sistemas Lineares Homog√™neos
            
            Um sistema homog√™neo tem a forma AX = 0 (todos os termos independentes s√£o nulos).
            
            ## Propriedades
            
            1. Todo sistema homog√™neo √© poss√≠vel (sempre admite a solu√ß√£o trivial X = 0)
            2. Um sistema homog√™neo tem solu√ß√µes n√£o-triviais se e somente se det(A) = 0
            3. O conjunto de todas as solu√ß√µes forma um espa√ßo vetorial
            4. A dimens√£o do espa√ßo de solu√ß√µes √© n - posto(A), onde n √© o n√∫mero de inc√≥gnitas
            
            ## Interpreta√ß√£o Geom√©trica
            
            - Em 2D: se det(A) = 0, as equa√ß√µes representam a mesma reta passando pela origem
            - Em 3D: se det(A) = 0, os planos se intersectam em uma reta ou um plano passando pela origem
            
            ## Aplica√ß√µes
            
            - **Espa√ßos nulos**:
            O n√∫cleo (ou kernel) de uma transforma√ß√£o linear √© o espa√ßo das solu√ß√µes de AX = 0
              - Fundamental em √°lgebra linear e geometria
            
            - **Autovalores e autovetores**:
              - Um autovetor v de uma matriz A satisfaz Av = Œªv, ou (A - ŒªI)v = 0
              - Encontrar os autovetores envolve resolver sistemas homog√™neos
            
            - **Equa√ß√µes diferenciais**:
              - Sistemas de equa√ß√µes diferenciais lineares homog√™neas t√™m solu√ß√µes da forma X = e^(Œªt)v
              - Onde Œª √© um autovalor e v √© um autovetor associado
            
            ## Exemplo
            
            Considere o sistema homog√™neo:
            
            $$
            \\begin{align}
            2x + 3y - z &= 0\\\\
            4x + 6y - 2z &= 0\\\\
            -2x - 3y + z &= 0
            \\end{align}
            $$
            
            Observe que a terceira equa√ß√£o √© o oposto da primeira. Al√©m disso, a segunda equa√ß√£o √© um m√∫ltiplo da primeira (multiplicada por 2).
            
            O determinante da matriz dos coeficientes √© zero, o que confirma que o sistema tem solu√ß√µes n√£o-triviais.
            
            O posto da matriz √© 1, e temos 3 inc√≥gnitas, ent√£o a dimens√£o do espa√ßo de solu√ß√µes √© 3 - 1 = 2.
            
            **Solu√ß√£o param√©trica**:
            
            Podemos expressar z e y em termos de x:
            Da primeira equa√ß√£o: z = 2x + 3y
            
            Substituindo na segunda e terceira equa√ß√µes, verificamos que s√£o satisfeitas para qualquer valor de x e y.
            
            Ent√£o a solu√ß√£o geral √©:
            ```
            z = 2x + 3y
            ```
            Onde x e y s√£o par√¢metros livres.
            
            Alternativamente, podemos parametrizar como:
            ```
            x = s
            y = t
            z = 2s + 3t
            ```
            Onde s e t s√£o par√¢metros livres.
            """
        },
        "Estabilidade Num√©rica": {
            "content": """
            # Estabilidade Num√©rica em Sistemas Lineares
            
            ## N√∫mero de Condi√ß√£o
            
            O n√∫mero de condi√ß√£o de uma matriz A, denotado por cond(A), mede a sensibilidade da solu√ß√£o a pequenas perturba√ß√µes nos dados:
            
            $$\\text{cond}(A) = \\|A\\| \\cdot \\|A^{-1}\\|$$
            
            Para a norma-2, isso √© equivalente √† raz√£o entre o maior e o menor valor singular:
            
            $$\\text{cond}_2(A) = \\frac{\\sigma_{\\max}}{\\sigma_{\\min}}$$
            
            **Interpreta√ß√£o**:
            - Um n√∫mero de condi√ß√£o pr√≥ximo de 1 indica uma matriz bem condicionada
            - Um n√∫mero de condi√ß√£o grande indica uma matriz mal condicionada
            - Um n√∫mero de condi√ß√£o infinito indica uma matriz singular
            
            ## Efeitos do Mal Condicionamento
            
            Um sistema mal condicionado tem as seguintes caracter√≠sticas:
            
            - Pequenas perturba√ß√µes nos dados (coeficientes ou termos independentes) podem causar grandes mudan√ßas na solu√ß√£o
            - Erros de arredondamento podem ser amplificados significativamente
            - M√©todos iterativos podem convergir lentamente ou divergir
            
            **Exemplo**:
            
            Considere o sistema:
            
            $$
            \\begin{align}
            1.000x + 0.999y &= 1.999\\\\
            0.999x + 0.998y &= 1.997
            \\end{align}
            $$
            
            A solu√ß√£o exata √© x = y = 1. No entanto, se mudarmos ligeiramente o termo independente da primeira equa√ß√£o para 2.000 (uma perturba√ß√£o de apenas 0.001), a solu√ß√£o muda drasticamente para aproximadamente x = 2, y = 0.
            
            ## Estrat√©gias para Sistemas Mal Condicionados
            
            1. **Pr√©-condicionamento**:
               - Multiplicar o sistema por uma matriz de pr√©-condicionamento para reduzir o n√∫mero de condi√ß√£o
               - Exemplo: ao inv√©s de resolver Ax = b, resolver M‚Åª¬πAx = M‚Åª¬πb, onde M √© escolhida para que M‚Åª¬πA seja bem condicionada
            
            2. **Refinamento iterativo**:
               - Ap√≥s obter uma solu√ß√£o aproximada xÃÉ, calcular o res√≠duo r = b - AxÃÉ
               - Resolver Ad = r para obter a corre√ß√£o d
               - Atualizar a solu√ß√£o: x = xÃÉ + d
               - Repetir, se necess√°rio
            
            3. **M√©todos de regulariza√ß√£o**:
               - Tikhonov: minimizar ||Ax - b||¬≤ + Œª||x||¬≤, onde Œª √© o par√¢metro de regulariza√ß√£o
               - SVD truncada: ignorar componentes associados a valores singulares muito pequenos
            
            4. **Aumentar a precis√£o dos c√°lculos**:
               - Usar aritm√©tica de precis√£o dupla ou estendida
               - Implementar algoritmos que minimizam a propaga√ß√£o de erros de arredondamento
            
            5. **Uso de decomposi√ß√µes est√°veis**:
               - Decomposi√ß√£o QR
               - Decomposi√ß√£o de valores singulares (SVD)
            
            ## Exemplo de An√°lise
            
            Para a matriz:
            
            $$
            A = \\begin{bmatrix}
            1 & 1 \\\\
            1 & 1.0001
            \\end{bmatrix}
            $$
            
            1. O determinante √© muito pequeno: det(A) = 0.0001
            2. O n√∫mero de condi√ß√£o √© aproximadamente 40000
            3. Uma pequena perturba√ß√£o de 0.01% em A pode causar uma mudan√ßa de 400% na solu√ß√£o
            
            **Verifica√ß√£o**:
            - Se Ax = b, onde b = [2, 2.0001]·µÄ, a solu√ß√£o √© x = [1, 1]·µÄ
            - Se mudarmos b para [2.0002, 2.0001]·µÄ (uma mudan√ßa de 0.01%), a solu√ß√£o muda para aproximadamente x = [2, 0]·µÄ
            """
        },
        "Aplica√ß√µes Avan√ßadas": {
            "content": """
            # Aplica√ß√µes Avan√ßadas de Sistemas Lineares
            
            ## Ajuste de Curvas e Superf√≠cies
            
            O m√©todo dos m√≠nimos quadrados leva a sistemas lineares para encontrar os coeficientes que minimizam o erro quadr√°tico.
            
            **Exemplo**: Para ajustar um polin√¥mio de grau n a m pontos (x_i, y_i), formamos o sistema normal:
            
            $$
            \\begin{bmatrix}
            m & \\sum x_i & \\sum x_i^2 & \\cdots & \\sum x_i^n \\\\
            \\sum x_i & \\sum x_i^2 & \\sum x_i^3 & \\cdots & \\sum x_i^{n+1} \\\\
            \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\
            \\sum x_i^n & \\sum x_i^{n+1} & \\sum x_i^{n+2} & \\cdots & \\sum x_i^{2n}
            \\end{bmatrix}
            \\begin{bmatrix}
            a_0 \\\\
            a_1 \\\\
            \\vdots \\\\
            a_n
            \\end{bmatrix} =
            \\begin{bmatrix}
            \\sum y_i \\\\
            \\sum x_i y_i \\\\
            \\vdots \\\\
            \\sum x_i^n y_i
            \\end{bmatrix}
            $$
            
            ## Processamento de Imagens
            
            Sistemas lineares s√£o usados em:
            
            1. **Filtros lineares**:
               - Convolu√ß√£o para suaviza√ß√£o, detec√ß√£o de bordas, etc.
               - As m√°scaras de convolu√ß√£o podem ser representadas como sistemas lineares
            
            2. **Restaura√ß√£o de imagens**:
               - Elimina√ß√£o de ru√≠do e desfoque atrav√©s de sistemas lineares regularizados
               - Exemplo: para um modelo de degrada√ß√£o g = Hf + n, onde g √© a imagem observada, f √© a imagem original e n √© o ru√≠do,
                 a restaura√ß√£o pode ser formulada como um sistema linear (H^T H + ŒªI)f = H^T g
            
            3. **Compress√£o**:
               - Transformadas como DCT (usada em JPEG) podem ser implementadas como sistemas lineares
            
            ## Simula√ß√£o de Fluidos
            
            As equa√ß√µes de Navier-Stokes discretizadas levam a grandes sistemas lineares:
            
            1. **M√©todo da press√£o**:
               - A equa√ß√£o de Poisson para a press√£o leva a um sistema linear Ap = b
               - A matriz A √© geralmente esparsa e pode ser resolvida eficientemente com m√©todos especializados
            
            2. **M√©todos de elementos finitos**:
               - Discretizam o dom√≠nio em elementos menores
               - Resultam em sistemas lineares para velocidades e press√µes
            
            ## Tomografia Computadorizada
            
            A reconstru√ß√£o de imagens em tomografia (CT scan) envolve a resolu√ß√£o de sistemas lineares:
            
            1. **Problema de reconstru√ß√£o**:
               - Relaciona as medidas de atenua√ß√£o com os coeficientes de atenua√ß√£o nos voxels
               - Leva a um grande sistema linear Ax = b, onde x s√£o os coeficientes desconhecidos
            
            2. **M√©todos de solu√ß√£o**:
               - Retroproje√ß√£o filtrada
               - M√©todos iterativos como ART (Algebraic Reconstruction Technique), que resolve o sistema de forma iterativa
            
            ## Redes Neurais
            
            Embora as redes neurais modernas sejam n√£o-lineares, muitas opera√ß√µes internas envolvem sistemas lineares:
            
            1. **Camadas lineares**:
               - A opera√ß√£o Wx + b, onde W √© a matriz de pesos, x √© a entrada e b √© o vi√©s
            
            2. **Backpropagation**:
               - O c√°lculo de gradientes envolve opera√ß√µes lineares com matrizes Jacobianas
            
            ## Criptografia
            
            Alguns m√©todos criptogr√°ficos s√£o baseados em sistemas lineares:
            
            1. **Cifra de Hill**:
               - Usa multiplica√ß√£o de matrizes para cifrar blocos de texto
               - A seguran√ßa depende da dificuldade de resolver certos sistemas lineares
            
            2. **Sistemas baseados em reticulados**:
               - Baseiam-se na dificuldade de resolver certos sistemas lineares em reticulados
               - Exemplo: o problema SVP (Shortest Vector Problem) est√° relacionado a encontrar a solu√ß√£o de norma m√≠nima para um sistema homog√™neo

            """
        },

        "M√©todos Iterativos": {
            "content": """
            # M√©todos Iterativos para Sistemas Lineares
            
            Os m√©todos iterativos come√ßam com uma aproxima√ß√£o inicial e melhoram progressivamente a solu√ß√£o.
            
            ## M√©todo de Jacobi
            
            **Procedimento**:
            1. Para cada equa√ß√£o i, isolar a inc√≥gnita x_i
            2. Iniciar com uma aproxima√ß√£o inicial (geralmente zeros)
            3. Em cada itera√ß√£o k+1, calcular:
               x_i^(k+1) = (b_i - Œ£ a_ij x_j^(k)) / a_ii, para j ‚â† i
            4. Repetir at√© convergir
            
            ## M√©todo de Gauss-Seidel
            
            Similar ao m√©todo de Jacobi, mas usa valores j√° atualizados na mesma itera√ß√£o:
            
            x_i^(k+1) = (b_i - Œ£ a_ij x_j^(k+1) - Œ£ a_ij x_j^(k)) / a_ii
                          j<i                j>i
            
            **Condi√ß√µes de converg√™ncia**:
            - Matriz diagonalmente dominante (|a_ii| > Œ£ |a_ij| para j ‚â† i)
            - Matriz definida positiva
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            10x + 2y + z &= 13\\\\
            x + 5y + z &= 7\\\\
            2x + y + 10z &= 13
            \\end{align}
            $$
            
            Isolando as vari√°veis:
            
            $$
            \\begin{align}
            x &= \\frac{13 - 2y - z}{10}\\\\
            y &= \\frac{7 - x - z}{5}\\\\
            z &= \\frac{13 - 2x - y}{10}
            \\end{align}
            $$
            
            **M√©todo de Jacobi**:
            
            Partindo de x^(0) = y^(0) = z^(0) = 0:
            
            Itera√ß√£o 1:
            - x^(1) = (13 - 2√ó0 - 0)/10 = 1.3
            - y^(1) = (7 - 0 - 0)/5 = 1.4
            - z^(1) = (13 - 2√ó0 - 0)/10 = 1.3
            
            Itera√ß√£o 2:
            - x^(2) = (13 - 2√ó1.4 - 1.3)/10 = 0.83
            - y^(2) = (7 - 1.3 - 1.3)/5 = 0.88
            - z^(2) = (13 - 2√ó1.3 - 1.4)/10 = 0.83
            
            O processo continua at√© a converg√™ncia para x = y = z = 1.
            
            **M√©todo de Gauss-Seidel**:
            
            Partindo de x^(0) = y^(0) = z^(0) = 0:
            
            Itera√ß√£o 1:
            - x^(1) = (13 - 2√ó0 - 0)/10 = 1.3
            - y^(1) = (7 - 1.3 - 0)/5 = 1.14
            - z^(1) = (13 - 2√ó1.3 - 1.14)/10 = 0.826
            
            Itera√ß√£o 2:
            - x^(2) = (13 - 2√ó1.14 - 0.826)/10 = 0.8934
            - y^(2) = (7 - 0.8934 - 0.826)/5 = 1.0561
            - z^(2) = (13 - 2√ó0.8934 - 1.0561)/10 = 0.9157
            
            O m√©todo converge mais rapidamente para x = y = z = 1.
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - Mais eficientes para sistemas grandes e esparsos
            - Menor requisito de mem√≥ria
            - Podem lidar com matrizes mal condicionadas
            
            **Desvantagens**:
            - Converg√™ncia n√£o garantida para todas as matrizes
            - Podem ser lentos para atingir alta precis√£o
            """
        },
        "Decomposi√ß√£o LU": {
            "content": """
            # Decomposi√ß√£o LU
            
            A decomposi√ß√£o LU fatoriza a matriz A em um produto de duas matrizes: A = LU, onde:
            - L √© uma matriz triangular inferior
            - U √© uma matriz triangular superior
            
            ## Procedimento para resolver AX = B
            
            1. Decompor A = LU
            2. Resolver LY = B por substitui√ß√£o direta
            3. Resolver UX = Y por substitui√ß√£o reversa
            
            ## Algoritmo para decomposi√ß√£o LU
            
            **Procedimento de Doolittle**:
            
            Para uma matriz n√ón:
            
            1. Para i = 1 at√© n:
               - Para j = i at√© n: u_{ij} = a_{ij} - Œ£(l_{ik} √ó u_{kj}) para k = 1 at√© i-1
               - Para j = i+1 at√© n: l_{ji} = (a_{ji} - Œ£(l_{jk} √ó u_{ki}) para k = 1 at√© i-1) / u_{ii}
            
            2. Para i = 1 at√© n: l_{ii} = 1 (diagonal unit√°ria para L)
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + y + z &= 5\\\\
            4x + 5y + z &= 9\\\\
            x + y + 3z &= 11
            \\end{align}
            $$
            
            **Decomposi√ß√£o LU**:
            
            Matriz A:
            
            $$
            A = \\begin{bmatrix}
            2 & 1 & 1 \\\\
            4 & 5 & 1 \\\\
            1 & 1 & 3
            \\end{bmatrix}
            $$
            
            Calculando L e U:
            
            $$
            L = \\begin{bmatrix}
            1 & 0 & 0 \\\\
            2 & 1 & 0 \\\\
            0.5 & 0.25 & 1
            \\end{bmatrix}
            $$
            
            $$
            U = \\begin{bmatrix}
            2 & 1 & 1 \\\\
            0 & 3 & -1 \\\\
            0 & 0 & 2.5
            \\end{bmatrix}
            $$
            
            **Resolver LY = B**:
            
            $$
            \\begin{bmatrix}
            1 & 0 & 0 \\\\
            2 & 1 & 0 \\\\
            0.5 & 0.25 & 1
            \\end{bmatrix}
            \\begin{bmatrix}
            y_1 \\\\
            y_2 \\\\
            y_3
            \\end{bmatrix} =
            \\begin{bmatrix}
            5 \\\\
            9 \\\\
            11
            \\end{bmatrix}
            $$
            
            - y‚ÇÅ = 5
            - y‚ÇÇ = 9 - 2√ó5 = -1
            - y‚ÇÉ = 11 - 0.5√ó5 - 0.25√ó(-1) = 11 - 2.5 + 0.25 = 8.75
            
            **Resolver UX = Y**:
            
            $$
            \\begin{bmatrix}
            2 & 1 & 1 \\\\
            0 & 3 & -1 \\\\
            0 & 0 & 2.5
            \\end{bmatrix}
            \\begin{bmatrix}
            x \\\\
            y \\\\
            z
            \\end{bmatrix} =
            \\begin{bmatrix}
            5 \\\\
            -1 \\\\
            8.75
            \\end{bmatrix}
            $$
            
            - z = 8.75 / 2.5 = 3.5
            - y = (-1 + z) / 3 = (-1 + 3.5) / 3 = 2.5 / 3 = 0.833...
            - x = (5 - y - z) / 2 = (5 - 0.833 - 3.5) / 2 = 0.667...
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - Eficiente para resolver m√∫ltiplos sistemas com a mesma matriz de coeficientes
            - √ötil para calcular determinantes e inversas
            - Computacionalmente eficiente
            
            **Desvantagens**:
            - Requer armazenamento adicional para as matrizes L e U
            - Pode ser inst√°vel para matrizes mal condicionadas sem pivoteamento
            """
        },
        "Interpreta√ß√£o Geom√©trica": {
            "content": """
            # Interpreta√ß√£o Geom√©trica de Sistemas Lineares
            
            ## Sistemas 2√ó2
            
            Em um sistema com duas equa√ß√µes e duas inc√≥gnitas, cada equa√ß√£o representa uma reta no plano cartesiano.
            
            **Poss√≠veis configura√ß√µes**:
            
            1. **SPD (Sistema Poss√≠vel e Determinado)**:
               - As retas se intersectam em um √∫nico ponto
               - Este ponto representa a √∫nica solu√ß√£o do sistema
               - Exemplo: x + y = 3 e x - y = 1
               
            2. **SPI (Sistema Poss√≠vel e Indeterminado)**:
               - As retas s√£o coincidentes (sobrepostas)
               - Todos os pontos da reta s√£o solu√ß√µes do sistema
               - Exemplo: 2x + 3y = 6 e 4x + 6y = 12
               
            3. **SI (Sistema Imposs√≠vel)**:
               - As retas s√£o paralelas e n√£o coincidentes
               - N√£o h√° nenhum ponto comum, ou seja, n√£o h√° solu√ß√£o
               - Exemplo: x + y = 3 e x + y = 5
            
            ## Sistemas 3√ó3
            
            Em um sistema com tr√™s equa√ß√µes e tr√™s inc√≥gnitas, cada equa√ß√£o representa um plano no espa√ßo tridimensional.
            
            **Poss√≠veis configura√ß√µes**:
            
            1. **SPD (Sistema Poss√≠vel e Determinado)**:
               - Os tr√™s planos se intersectam em um √∫nico ponto
               - Este ponto √© a √∫nica solu√ß√£o do sistema
               
            2. **SPI (Sistema Poss√≠vel e Indeterminado)**:
               - Os planos se intersectam em uma reta (dois planos paralelos intersectados por um terceiro)
               - Ou se intersectam em um plano (tr√™s planos coincidentes)
               - As solu√ß√µes formam uma reta ou um plano
               
            3. **SI (Sistema Imposs√≠vel)**:
               - Os planos n√£o possuem ponto comum de interse√ß√£o
               - Pode ocorrer quando temos planos paralelos ou quando a interse√ß√£o de dois planos √© paralela ao terceiro
            
            ## Rela√ß√£o com o Espa√ßo Vetorial
            
            - As linhas da matriz de coeficientes podem ser vistas como vetores
            - O determinante da matriz est√° relacionado ao volume do paralelep√≠pedo formado por estes vetores
            - Um determinante zero indica que os vetores s√£o linearmente dependentes
            - Para sistemas homog√™neos (AX = 0), o conjunto solu√ß√£o forma um subespa√ßo vetorial
            """
        },
        "Aplica√ß√µes de Sistemas Lineares": {
            "content": """
            # Aplica√ß√µes de Sistemas Lineares
            
            Os sistemas de equa√ß√µes lineares s√£o ferramentas fundamentais em diversas √°reas. Veja algumas aplica√ß√µes importantes:
            
            ## F√≠sica e Engenharia
            
            ### An√°lise de Circuitos El√©tricos
            - Leis de Kirchhoff: correntes em um n√≥ e tens√µes em um la√ßo
            - Cada equa√ß√£o representa a conserva√ß√£o de corrente ou tens√£o
            
            **Exemplo**: Para um circuito com tr√™s malhas, podemos ter:
            ```
            R‚ÇÅI‚ÇÅ + R‚ÇÇ(I‚ÇÅ - I‚ÇÇ) = V‚ÇÅ
            R‚ÇÇ(I‚ÇÇ - I‚ÇÅ) + R‚ÇÉI‚ÇÇ + R‚ÇÑ(I‚ÇÇ - I‚ÇÉ) = 0
            R‚ÇÑ(I‚ÇÉ - I‚ÇÇ) + R‚ÇÖI‚ÇÉ = V‚ÇÇ
            ```
            
            ### Est√°tica e Din√¢mica
            - Equil√≠brio de for√ßas e momentos em estruturas
            - An√°lise de treli√ßas e vigas
            
            **Exemplo**: Para um sistema com tr√™s for√ßas desconhecidas:
            ```
            F‚ÇÅcos(Œ∏‚ÇÅ) + F‚ÇÇcos(Œ∏‚ÇÇ) + F‚ÇÉcos(Œ∏‚ÇÉ) = 0
            F‚ÇÅsin(Œ∏‚ÇÅ) + F‚ÇÇsin(Œ∏‚ÇÇ) + F‚ÇÉsin(Œ∏‚ÇÉ) = 0
            r‚ÇÅ√óF‚ÇÅ + r‚ÇÇ√óF‚ÇÇ + r‚ÇÉ√óF‚ÇÉ = 0
            ```
            
            ### Transfer√™ncia de Calor
            - Modelagem de problemas de condu√ß√£o t√©rmica
            - M√©todos de diferen√ßas finitas para equa√ß√µes diferenciais
            
            ## Economia
            
            ### An√°lise de Insumo-Produto de Leontief
            - Modelagem das interdepend√™ncias entre diferentes setores da economia
            - Previs√£o de como mudan√ßas em um setor afetam outros setores
            
            **Exemplo**: Em uma economia com tr√™s setores:
            ```
            x‚ÇÅ = a‚ÇÅ‚ÇÅx‚ÇÅ + a‚ÇÅ‚ÇÇx‚ÇÇ + a‚ÇÅ‚ÇÉx‚ÇÉ + d‚ÇÅ
            x‚ÇÇ = a‚ÇÇ‚ÇÅx‚ÇÅ + a‚ÇÇ‚ÇÇx‚ÇÇ + a‚ÇÇ‚ÇÉx‚ÇÉ + d‚ÇÇ
            x‚ÇÉ = a‚ÇÉ‚ÇÅx‚ÇÅ + a‚ÇÉ‚ÇÇx‚ÇÇ + a‚ÇÉ‚ÇÉx‚ÇÉ + d‚ÇÉ
            ```
            Onde x‚ÇÅ √© a produ√ß√£o do setor i, a_ij √© quanto do produto i √© usado para produzir uma unidade do produto j, e d_i √© a demanda externa.
            
            ### Otimiza√ß√£o e Programa√ß√£o Linear
            - Maximiza√ß√£o de lucro ou minimiza√ß√£o de custos
            - Aloca√ß√£o √≥tima de recursos limitados
            
            ## Qu√≠mica
            
            ### Balanceamento de Equa√ß√µes Qu√≠micas
            - Cada elemento forma uma equa√ß√£o linear
            - Os coeficientes estequiom√©tricos s√£o as inc√≥gnitas
            
            **Exemplo**: Para a rea√ß√£o C‚ÇÉH‚Çà + O‚ÇÇ ‚Üí CO‚ÇÇ + H‚ÇÇO
            ```
            3a = c       (para o carbono)
            8a = 2e      (para o hidrog√™nio)
            2b = 2c + e  (para o oxig√™nio)
            ```
            
            ### Equil√≠brio Qu√≠mico
            - Determina√ß√£o de concentra√ß√µes em equil√≠brio
            
            ## Computa√ß√£o Gr√°fica
            
            ### Transforma√ß√µes Geom√©tricas
            - Rota√ß√£o, transla√ß√£o e escala de objetos
            - Representadas como transforma√ß√µes matriciais
            
            ### Renderiza√ß√£o 3D
            - Sistemas para determinar proje√ß√µes de objetos 3D em telas 2D
            
            ## Problemas de Mistura
            
            ### Farmacologia
            - Mistura de componentes para atingir concentra√ß√µes espec√≠ficas
            - Formula√ß√£o de medicamentos
            
            **Exemplo**: Um farmac√™utico precisa preparar 100ml de uma solu√ß√£o com 25% de um princ√≠pio ativo, usando solu√ß√µes de 10%, 20% e 40%.
            ```
            x + y + z = 100
            0.1x + 0.2y + 0.4z = 25
            ```
            
            ### Processamento de Alimentos
            - Mistura de ingredientes para atingir perfis nutricionais
            
            ## Tr√°fego e Transporte
            
            ### Fluxo de Redes
            - Modelagem de fluxo de tr√°fego em redes de transporte
            - Otimiza√ß√£o de rotas
            """
        },
        "Sistemas Homog√™neos": {
            "content": """
            # Sistemas Lineares Homog√™neos
            
            Um sistema homog√™neo tem a forma AX = 0 (todos os termos independentes s√£o nulos).
            
            ## Propriedades
            
            1. Todo sistema homog√™neo √© poss√≠vel (sempre admite a solu√ß√£o trivial X = 0)
            2. Um sistema homog√™neo tem solu√ß√µes n√£o-triviais se e somente se det(A) = 0
            3. O conjunto de todas as solu√ß√µes forma um espa√ßo vetorial
            4. A dimens√£o do espa√ßo de solu√ß√µes √© n - posto(A), onde n √© o n√∫mero de inc√≥gnitas
            
            ## Interpreta√ß√£o Geom√©trica
            
            - Em 2D: se det(A) = 0, as equa√ß√µes representam a mesma reta passando pela origem
            - Em 3D: se det(A) = 0, os planos se intersectam em uma reta ou um plano passando pela origem
            
            ## Aplica√ß√µes
            
            - **Espa√ßos nulos**:
            O n√∫cleo (ou kernel) de uma transforma√ß√£o linear √© o espa√ßo das solu√ß√µes de AX = 0
              - Fundamental em √°lgebra linear e geometria
            
            - **Autovalores e autovetores**:
              - Um autovetor v de uma matriz A satisfaz Av = Œªv, ou (A - ŒªI)v = 0
              - Encontrar os autovetores envolve resolver sistemas homog√™neos
            
            - **Equa√ß√µes diferenciais**:
              - Sistemas de equa√ß√µes diferenciais lineares homog√™neas t√™m solu√ß√µes da forma X = e^(Œªt)v
              - Onde Œª √© um autovalor e v √© um autovetor associado
            
            ## Exemplo
            
            Considere o sistema homog√™neo:
            
            $$
            \\begin{align}
            2x + 3y - z &= 0\\\\
            4x + 6y - 2z &= 0\\\\
            -2x - 3y + z &= 0
            \\end{align}
            $$
            
            Observe que a terceira equa√ß√£o √© o oposto da primeira. Al√©m disso, a segunda equa√ß√£o √© um m√∫ltiplo da primeira (multiplicada por 2).
            
            O determinante da matriz dos coeficientes √© zero, o que confirma que o sistema tem solu√ß√µes n√£o-triviais.
            
            O posto da matriz √© 1, e temos 3 inc√≥gnitas, ent√£o a dimens√£o do espa√ßo de solu√ß√µes √© 3 - 1 = 2.
            
            **Solu√ß√£o param√©trica**:
            
            Podemos expressar z e y em termos de x:
            Da primeira equa√ß√£o: z = 2x + 3y
            
            Substituindo na segunda e terceira equa√ß√µes, verificamos que s√£o satisfeitas para qualquer valor de x e y.
            
            Ent√£o a solu√ß√£o geral √©:
            ```
            z = 2x + 3y
            ```
            Onde x e y s√£o par√¢metros livres.
            
            Alternativamente, podemos parametrizar como:
            ```
            x = s
            y = t
            z = 2s + 3t
            ```
            Onde s e t s√£o par√¢metros livres.
            """
        },
        "Estabilidade Num√©rica": {
            "content": """
            # Estabilidade Num√©rica em Sistemas Lineares
            
            ## N√∫mero de Condi√ß√£o
            
            O n√∫mero de condi√ß√£o de uma matriz A, denotado por cond(A), mede a sensibilidade da solu√ß√£o a pequenas perturba√ß√µes nos dados:
            
            $$\\text{cond}(A) = \\|A\\| \\cdot \\|A^{-1}\\|$$
            
            Para a norma-2, isso √© equivalente √† raz√£o entre o maior e o menor valor singular:
            
            $$\\text{cond}_2(A) = \\frac{\\sigma_{\\max}}{\\sigma_{\\min}}$$
            
            **Interpreta√ß√£o**:
            - Um n√∫mero de condi√ß√£o pr√≥ximo de 1 indica uma matriz bem condicionada
            - Um n√∫mero de condi√ß√£o grande indica uma matriz mal condicionada
            - Um n√∫mero de condi√ß√£o infinito indica uma matriz singular
            
            ## Efeitos do Mal Condicionamento
            
            Um sistema mal condicionado tem as seguintes caracter√≠sticas:
            
            - Pequenas perturba√ß√µes nos dados (coeficientes ou termos independentes) podem causar grandes mudan√ßas na solu√ß√£o
            - Erros de arredondamento podem ser amplificados significativamente
            - M√©todos iterativos podem convergir lentamente ou divergir
            
            **Exemplo**:
            
            Considere o sistema:
            
            $$
            \\begin{align}
            1.000x + 0.999y &= 1.999\\\\
            0.999x + 0.998y &= 1.997
            \\end{align}
            $$
            
            A solu√ß√£o exata √© x = y = 1. No entanto, se mudarmos ligeiramente o termo independente da primeira equa√ß√£o para 2.000 (uma perturba√ß√£o de apenas 0.001), a solu√ß√£o muda drasticamente para aproximadamente x = 2, y = 0.
            
            ## Estrat√©gias para Sistemas Mal Condicionados
            
            1. **Pr√©-condicionamento**:
               - Multiplicar o sistema por uma matriz de pr√©-condicionamento para reduzir o n√∫mero de condi√ß√£o
               - Exemplo: ao inv√©s de resolver Ax = b, resolver M‚Åª¬πAx = M‚Åª¬πb, onde M √© escolhida para que M‚Åª¬πA seja bem condicionada
            
            2. **Refinamento iterativo**:
               - Ap√≥s obter uma solu√ß√£o aproximada xÃÉ, calcular o res√≠duo r = b - AxÃÉ
               - Resolver Ad = r para obter a corre√ß√£o d
               - Atualizar a solu√ß√£o: x = xÃÉ + d
               - Repetir, se necess√°rio
            
            3. **M√©todos de regulariza√ß√£o**:
               - Tikhonov: minimizar ||Ax - b||¬≤ + Œª||x||¬≤, onde Œª √© o par√¢metro de regulariza√ß√£o
               - SVD truncada: ignorar componentes associados a valores singulares muito pequenos
            
            4. **Aumentar a precis√£o dos c√°lculos**:
               - Usar aritm√©tica de precis√£o dupla ou estendida
               - Implementar algoritmos que minimizam a propaga√ß√£o de erros de arredondamento
            
            5. **Uso de decomposi√ß√µes est√°veis**:
               - Decomposi√ß√£o QR
               - Decomposi√ß√£o de valores singulares (SVD)
            
            ## Exemplo de An√°lise
            
            Para a matriz:
            
            $$
            A = \\begin{bmatrix}
            1 & 1 \\\\
            1 & 1.0001
            \\end{bmatrix}
            $$
            
            1. O determinante √© muito pequeno: det(A) = 0.0001
            2. O n√∫mero de condi√ß√£o √© aproximadamente 40000
            3. Uma pequena perturba√ß√£o de 0.01% em A pode causar uma mudan√ßa de 400% na solu√ß√£o
            
            **Verifica√ß√£o**:
            - Se Ax = b, onde b = [2, 2.0001]·µÄ, a solu√ß√£o √© x = [1, 1]·µÄ
            - Se mudarmos b para [2.0002, 2.0001]·µÄ (uma mudan√ßa de 0.01%), a solu√ß√£o muda para aproximadamente x = [2, 0]·µÄ
            """
        },
        "Aplica√ß√µes Avan√ßadas": {
            "content": """
            # Aplica√ß√µes Avan√ßadas de Sistemas Lineares
            
            ## Ajuste de Curvas e Superf√≠cies
            
            O m√©todo dos m√≠nimos quadrados leva a sistemas lineares para encontrar os coeficientes que minimizam o erro quadr√°tico.
            
            **Exemplo**: Para ajustar um polin√¥mio de grau n a m pontos (x_i, y_i), formamos o sistema normal:
            
            $$
            \\begin{bmatrix}
            m & \\sum x_i & \\sum x_i^2 & \\cdots & \\sum x_i^n \\\\
            \\sum x_i & \\sum x_i^2 & \\sum x_i^3 & \\cdots & \\sum x_i^{n+1} \\\\
            \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\
            \\sum x_i^n & \\sum x_i^{n+1} & \\sum x_i^{n+2} & \\cdots & \\sum x_i^{2n}
            \\end{bmatrix}
            \\begin{bmatrix}
            a_0 \\\\
            a_1 \\\\
            \\vdots \\\\
            a_n
            \\end{bmatrix} =
            \\begin{bmatrix}
            \\sum y_i \\\\
            \\sum x_i y_i \\\\
            \\vdots \\\\
            \\sum x_i^n y_i
            \\end{bmatrix}
            $$
            
            ## Processamento de Imagens
            
            Sistemas lineares s√£o usados em:
            
            1. **Filtros lineares**:
               - Convolu√ß√£o para suaviza√ß√£o, detec√ß√£o de bordas, etc.
               - As m√°scaras de convolu√ß√£o podem ser representadas como sistemas lineares
            
            2. **Restaura√ß√£o de imagens**:
               - Elimina√ß√£o de ru√≠do e desfoque atrav√©s de sistemas lineares regularizados
               - Exemplo: para um modelo de degrada√ß√£o g = Hf + n, onde g √© a imagem observada, f √© a imagem original e n √© o ru√≠do,
                 a restaura√ß√£o pode ser formulada como um sistema linear (H^T H + ŒªI)f = H^T g
            
            3. **Compress√£o**:
               - Transformadas como DCT (usada em JPEG) podem ser implementadas como sistemas lineares
            
            ## Simula√ß√£o de Fluidos
            
            As equa√ß√µes de Navier-Stokes discretizadas levam a grandes sistemas lineares:
            
            1. **M√©todo da press√£o**:
               - A equa√ß√£o de Poisson para a press√£o leva a um sistema linear Ap = b
               - A matriz A √© geralmente esparsa e pode ser resolvida eficientemente com m√©todos especializados
            
            2. **M√©todos de elementos finitos**:
               - Discretizam o dom√≠nio em elementos menores
               - Resultam em sistemas lineares para velocidades e press√µes
            
            ## Tomografia Computadorizada
            
            A reconstru√ß√£o de imagens em tomografia (CT scan) envolve a resolu√ß√£o de sistemas lineares:
            
            1. **Problema de reconstru√ß√£o**:
               - Relaciona as medidas de atenua√ß√£o com os coeficientes de atenua√ß√£o nos voxels
               - Leva a um grande sistema linear Ax = b, onde x s√£o os coeficientes desconhecidos
            
            2. **M√©todos de solu√ß√£o**:
               - Retroproje√ß√£o filtrada
               - M√©todos iterativos como ART (Algebraic Reconstruction Technique), que resolve o sistema de forma iterativa
            
            ## Redes Neurais
            
            Embora as redes neurais modernas sejam n√£o-lineares, muitas opera√ß√µes internas envolvem sistemas lineares:
            
            1. **Camadas lineares**:
               - A opera√ß√£o Wx + b, onde W √© a matriz de pesos, x √© a entrada e b √© o vi√©s
            
            2. **Backpropagation**:
               - O c√°lculo de gradientes envolve opera√ß√µes lineares com matrizes Jacobianas
            
            ## Criptografia
            
            Alguns m√©todos criptogr√°ficos s√£o baseados em sistemas lineares:
            
            1. **Cifra de Hill**:
               - Usa multiplica√ß√£o de matrizes para cifrar blocos de texto
               - A seguran√ßa depende da dificuldade de resolver certos sistemas lineares
            
            2. **Sistemas baseados em reticulados**:
               - Baseiam-se na dificuldade de resolver certos sistemas lineares em reticulados
               - Exemplo: o problema SVP (Shortest Vector Problem) est√° relacionado a encontrar a solu√ß√£o de norma m√≠nima para um sistema homog√™neo
               """
        },
        "Sistemas N√£o-Lineares": {
            "content": """
            # Sistemas N√£o-Lineares
            
            Em contraste com sistemas lineares, os sistemas n√£o-lineares envolvem fun√ß√µes n√£o-lineares das vari√°veis.
            
            ## Caracter√≠sticas dos Sistemas N√£o-Lineares
            
            1. **M√∫ltiplas solu√ß√µes**:
               - Podem ter 0, 1, um n√∫mero finito ou infinitas solu√ß√µes
               - Dif√≠ceis de classificar a priori
            
            2. **Comportamento complexo**:
               - Podem exibir caos, bifurca√ß√µes e outros fen√¥menos complexos
               - Pequenas mudan√ßas nos par√¢metros podem levar a mudan√ßas dr√°sticas nas solu√ß√µes
            
            3. **M√©todos de resolu√ß√£o**:
               - Geralmente iterativos e n√£o garantem encontrar todas as solu√ß√µes
               - Podem convergir para diferentes solu√ß√µes dependendo do ponto inicial
            
            ## T√©cnicas de Lineariza√ß√£o
            
            Muitos m√©todos para resolver sistemas n√£o-lineares envolvem alguma forma de lineariza√ß√£o:
            
            1. **Expans√£o de Taylor**:
               - Aproximar localmente as fun√ß√µes n√£o-lineares por suas expans√µes de Taylor de primeira ordem
               - Exemplo: f(x) ‚âà f(x‚ÇÄ) + f'(x‚ÇÄ)(x - x‚ÇÄ)
            
            2. **M√©todo de Newton multidimensional**:
               - Generaliza√ß√£o do m√©todo de Newton para sistemas
               - Resolve iterativamente sistemas lineares da forma J(x‚Çñ)Œîx = -F(x‚Çñ)
               - Onde J √© a matriz Jacobiana das derivadas parciais
            
            ## M√©todo de Newton
            
            Para um sistema F(X) = 0 com n equa√ß√µes e n inc√≥gnitas:
            
            1. Come√ßar com uma aproxima√ß√£o inicial X‚ÇÄ
            2. Para cada itera√ß√£o k:
               - Calcular F(X‚Çñ) e a matriz Jacobiana J(X‚Çñ)
               - Resolver o sistema linear J(X‚Çñ)Œîx = -F(X‚Çñ)
               - Atualizar: X‚Çñ‚Çä‚ÇÅ = X‚Çñ + Œîx
               - Verificar converg√™ncia
            
            **Exemplo**:
            
            Para o sistema:
            
            $$
            \\begin{align}
            x^2 + y^2 &= 25\\\\
            x^2 - y^2 &= 7
            \\end{align}
            $$
            
            A matriz Jacobiana √©:
            
            $$
            J(x, y) = \\begin{bmatrix}
            2x & 2y \\\\
            2x & -2y
            \\end{bmatrix}
            $$
            
            Partindo de (4, 3), calculamos:
            
            - F(4, 3) = [(4¬≤ + 3¬≤) - 25, (4¬≤ - 3¬≤) - 7] = [0, 0]
            
            J√° encontramos uma solu√ß√£o exata: (4, 3).
            
            Se tiv√©ssemos partido de (3, 4), ter√≠amos encontrado outra solu√ß√£o: (4, -3).
            
            ## M√©todo do Ponto Fixo
            
            1. Reescrever o sistema na forma X = g(X)
            2. Escolher uma aproxima√ß√£o inicial X‚ÇÄ
            3. Iterar X‚Çñ‚Çä‚ÇÅ = g(X‚Çñ) at√© a converg√™ncia
            
            **Condi√ß√£o de converg√™ncia**:
            O m√©todo converge se ||‚àág(X)|| < 1 na vizinhan√ßa da solu√ß√£o.
            
            ## Aplica√ß√µes de Sistemas N√£o-Lineares
            
            1. **F√≠sica e engenharia**:
               - Equil√≠brio de estruturas com comportamento n√£o-linear
               - Circuitos n√£o-lineares
               - Din√¢mica de fluidos
            
            2. **Qu√≠mica**:
               - Equil√≠brio qu√≠mico com m√∫ltiplas rea√ß√µes
               - Cin√©tica de rea√ß√µes complexas
            
            3. **Economia**:
               - Modelos econ√¥micos com fun√ß√µes n√£o-lineares de utilidade ou produ√ß√£o
               - Equil√≠brio de mercado com demanda e oferta n√£o-lineares
            
            4. **Biologia**:
               - Modelos de popula√ß√µes com intera√ß√µes n√£o-lineares
               - Redes bioqu√≠micas
            """
        },
        "Sistemas Lineares em Programa√ß√£o Linear": {
            "content": """
            # Sistemas Lineares em Programa√ß√£o Linear
            
            A programa√ß√£o linear (PL) √© uma t√©cnica de otimiza√ß√£o para problemas com fun√ß√£o objetivo linear e restri√ß√µes lineares.
            
            ## Formula√ß√£o Padr√£o
            
            Um problema de PL tem a forma:
            
            **Maximizar** (ou Minimizar): c‚ÇÅx‚ÇÅ + c‚ÇÇx‚ÇÇ + ... + c‚Çôx‚Çô
            
            **Sujeito a**:
            ```
            a‚ÇÅ‚ÇÅx‚ÇÅ + a‚ÇÅ‚ÇÇx‚ÇÇ + ... + a‚ÇÅ‚Çôx‚Çô ‚â§ b‚ÇÅ
            a‚ÇÇ‚ÇÅx‚ÇÅ + a‚ÇÇ‚ÇÇx‚ÇÇ + ... + a‚ÇÇ‚Çôx‚Çô ‚â§ b‚ÇÇ
            ...
            a‚Çò‚ÇÅx‚ÇÅ + a‚Çò‚ÇÇx‚ÇÇ + ... + a‚Çò‚Çôx‚Çô ‚â§ b‚Çò
            ```
            
            E: x‚ÇÅ, x‚ÇÇ, ..., x‚Çô ‚â• 0
            
            ## M√©todo Simplex
            
            O m√©todo simplex resolve problemas de PL percorrendo os v√©rtices do poliedro formado pelas restri√ß√µes:
            
            1. Converter para a forma padr√£o, introduzindo vari√°veis de folga:
               ```
               a‚ÇÅ‚ÇÅx‚ÇÅ + ... + a‚ÇÅ‚Çôx‚Çô + s‚ÇÅ = b‚ÇÅ
               ...
               a‚Çò‚ÇÅx‚ÇÅ + ... + a‚Çò‚Çôx‚Çô + s‚Çò = b‚Çò
               ```
            
            2. Encontrar uma solu√ß√£o b√°sica vi√°vel inicial
            
            3. Verificar se a solu√ß√£o atual √© √≥tima:
               - Se todos os coeficientes na fun√ß√£o objetivo s√£o n√£o-negativos, a solu√ß√£o √© √≥tima
               - Caso contr√°rio, selecionar uma vari√°vel para entrar na base
            
            4. Determinar qual vari√°vel sai da base usando o teste da raz√£o
            
            5. Atualizar a solu√ß√£o e retornar ao passo 3
            
            ## Rela√ß√£o com Sistemas Lineares
            
            Em cada itera√ß√£o do simplex, resolvemos um sistema linear:
            
            1. As equa√ß√µes de restri√ß√£o formam um sistema linear
            2. A opera√ß√£o piv√¥ para trocar as vari√°veis b√°sicas √© essencialmente elimina√ß√£o gaussiana
            3. A atualiza√ß√£o da fun√ß√£o objetivo tamb√©m envolve opera√ß√µes de √°lgebra linear
            
            ## Dualidade
            
            Para cada problema de PL (primal), existe um problema dual associado:
            
            - Se o primal √© um problema de maximiza√ß√£o, o dual √© de minimiza√ß√£o, e vice-versa
            - As vari√°veis no dual correspondem √†s restri√ß√µes no primal
            - As restri√ß√µes no dual correspondem √†s vari√°veis no primal
            
            **Exemplo**:
            
            Primal:
            ```
            Maximizar: 3x‚ÇÅ + 2x‚ÇÇ
            Sujeito a:
              x‚ÇÅ + x‚ÇÇ ‚â§ 8
              2x‚ÇÅ + x‚ÇÇ ‚â§ 10
              x‚ÇÅ, x‚ÇÇ ‚â• 0
            ```
            
            Dual:
            ```
            Minimizar: 8y‚ÇÅ + 10y‚ÇÇ
            Sujeito a:
              y‚ÇÅ + 2y‚ÇÇ ‚â• 3
              y‚ÇÅ + y‚ÇÇ ‚â• 2
              y‚ÇÅ, y‚ÇÇ ‚â• 0
            ```
            
            ## Aplica√ß√µes
            
            1. **Aloca√ß√£o de recursos**:
               - Determinar quanto produzir de cada produto para maximizar o lucro
               - Exemplo: Uma f√°brica produz dois produtos que requerem diferentes quantidades de tr√™s recursos limitados
            
            2. **Dieta e mistura**:
               - Encontrar a combina√ß√£o √≥tima de alimentos para minimizar o custo enquanto satisfaz requisitos nutricionais
               - Similar a problemas de mistura em qu√≠mica e engenharia
            
            3. **Transporte e log√≠stica**:
               - Otimizar o fluxo de bens de m√∫ltiplas origens para m√∫ltiplos destinos
               - Minimizar o custo total de transporte
            
            4. **Fluxo de rede**:
               - Encontrar o fluxo m√°ximo em uma rede com capacidades limitadas
               - Ou o fluxo de custo m√≠nimo que satisfaz demandas
            
            5. **Planejamento financeiro**:
               - Otimizar portfolios de investimento
               - Balancear risco e retorno sob restri√ß√µes or√ßament√°rias
            """
        },
        "Teorema de Rouch√©-Capelli": {
            "content": """
            # Teorema de Rouch√©-Capelli
            
            O Teorema de Rouch√©-Capelli (tamb√©m conhecido como Teorema de Kronecker-Capelli) √© um resultado fundamental na teoria de sistemas lineares, que estabelece condi√ß√µes precisas para a exist√™ncia e unicidade de solu√ß√µes.
            
            ## Enunciado Formal
            
            Seja AX = B um sistema linear, onde:
            - A √© uma matriz m √ó n
            - X √© um vetor de inc√≥gnitas n √ó 1
            - B √© um vetor de termos constantes m √ó 1
            
            **O teorema afirma que**:
            
            1. O sistema tem pelo menos uma solu√ß√£o se e somente se o posto da matriz A √© igual ao posto da matriz aumentada [A|B].
            
            2. Se o sistema tem solu√ß√£o, ent√£o:
               - Se posto(A) = n, a solu√ß√£o √© √∫nica (sistema poss√≠vel e determinado)
               - Se posto(A) < n, o sistema tem infinitas solu√ß√µes (sistema poss√≠vel e indeterminado)
            
            ## Significado dos Postos
            
            - **Posto de A**: √â o n√∫mero m√°ximo de linhas (ou colunas) linearmente independentes em A.
            
            - **Posto da matriz aumentada [A|B]**: √â o n√∫mero m√°ximo de linhas linearmente independentes na matriz aumentada.
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            x + y + z &= 6\\\\
            2x + y - z &= 1\\\\
            3x + 2y + 0z &= 7
            \\end{align}
            $$
            
            Podemos escrever a matriz aumentada:
            
            $$
            [A|B] = \\begin{bmatrix}
            1 & 1 & 1 & | & 6 \\\\
            2 & 1 & -1 & | & 1 \\\\
            3 & 2 & 0 & | & 7
            \\end{bmatrix}
            $$
            
            Ap√≥s o escalonamento, podemos determinar que posto(A) = posto([A|B]) = 3 = n.
            
            Pelo teorema, o sistema √© poss√≠vel e determinado, com solu√ß√£o √∫nica.
            
            ## Interpreta√ß√£o Geom√©trica
            
            - **posto(A) = posto([A|B]) = n**: As equa√ß√µes representam variedades (retas, planos, etc.) que se intersectam em um √∫nico ponto.
            
            - **posto(A) = posto([A|B]) < n**: As equa√ß√µes representam variedades que se intersectam em um subespa√ßo de dimens√£o (n - posto(A)).
            
            - **posto(A) < posto([A|B])**: As equa√ß√µes s√£o inconsistentes (por exemplo, representam retas paralelas).
            
            ## Aplica√ß√µes
            
            O Teorema de Rouch√©-Capelli √© √∫til para:
            
            1. **Classifica√ß√£o de sistemas**: Determinar se um sistema √© poss√≠vel e determinado, poss√≠vel e indeterminado ou imposs√≠vel.
            
            2. **An√°lise te√≥rica**: Compreender as condi√ß√µes para exist√™ncia e unicidade de solu√ß√µes em √°lgebra linear.
            
            3. **Verifica√ß√£o a priori**: Determinar se um sistema tem solu√ß√£o antes de tentar resolv√™-lo.
            
            4. **Estudo de espa√ßos vetoriais**: Relacionar sistemas lineares com conceitos de depend√™ncia linear e dimens√£o.
            """
        },
        "Decomposi√ß√£o QR": {
            "content": """
            # Decomposi√ß√£o QR
            
            A decomposi√ß√£o QR √© uma t√©cnica de fatora√ß√£o de matrizes onde uma matriz A √© expressa como o produto de duas matrizes: A = QR, onde:
            
            - Q √© uma matriz ortogonal (suas colunas s√£o vetores ortonormais)
            - R √© uma matriz triangular superior
            
            ## M√©todos para Calcular a Decomposi√ß√£o QR
            
            ### 1. Processo de Gram-Schmidt
            
            O algoritmo cl√°ssico para obter a decomposi√ß√£o QR:
            
            1. Come√ßar com as colunas da matriz A: a‚ÇÅ, a‚ÇÇ, ..., a‚Çô
            2. Calcular os vetores ortonormais q‚ÇÅ, q‚ÇÇ, ..., q‚Çô:
               - q‚ÇÅ = a‚ÇÅ/||a‚ÇÅ||
               - Para j = 2, 3, ..., n:
                 - Calcular v‚±º = a‚±º - Œ£(q·µ¢¬∑a‚±º)q·µ¢ para i = 1 at√© j-1
                 - Normalizar: q‚±º = v‚±º/||v‚±º||
            3. A matriz Q √© formada pelos vetores q‚±º como colunas
            4. A matriz R cont√©m os produtos internos: r·µ¢‚±º = q·µ¢¬∑a‚±º para i ‚â§ j, e zeros abaixo da diagonal
            
            ### 2. Reflex√µes de Householder
            
            Um m√©todo numericamente mais est√°vel:
            
            1. Para cada coluna j da matriz A:
               - Construir uma matriz de reflex√£o H‚±º que anula os elementos abaixo da diagonal na coluna j
               - Aplicar a reflex√£o: A ‚Üê H‚±ºA
            2. O produto das reflex√µes forma Q: Q = H‚ÇÅH‚ÇÇ...H‚Çô
            3. A matriz resultante ap√≥s todas as reflex√µes √© R
            
            ## Aplica√ß√µes na Resolu√ß√£o de Sistemas Lineares
            
            Para resolver o sistema AX = B usando decomposi√ß√£o QR:
            
            1. Decompor A = QR
            2. Substituir no sistema: QRX = B
            3. Multiplicar ambos os lados por Q·µÄ: Q·µÄ(QRX) = Q·µÄB
            4. Simplificar: RX = Q·µÄB (usando a propriedade de que Q·µÄQ = I)
            5. Resolver o sistema triangular RX = Q·µÄB por substitui√ß√£o reversa
            
            ## Vantagens da Decomposi√ß√£o QR
            
            1. **Estabilidade num√©rica**: Mais est√°vel que outros m√©todos, especialmente para matrizes mal condicionadas
            
            2. **Problemas de m√≠nimos quadrados**: Particularmente eficiente para resolver o problema de m√≠nimos quadrados ||Ax - b||
            
            3. **Solu√ß√£o √∫nica**: Para matrizes de posto completo, garante uma solu√ß√£o √∫nica
            
            4. **Aplica√ß√µes avan√ßadas**:
               - C√°lculo de autovalores (m√©todo QR)
               - Problemas de m√≠nimos quadrados
               - Fatora√ß√£o de matrizes em aprendizado de m√°quina
            
            ## Exemplo
            
            Considere a matriz:
            
            $$
            A = \\begin{bmatrix}
            1 & 1 \\\\
            1 & 0 \\\\
            0 & 1
            \\end{bmatrix}
            $$
            
            Usando o processo de Gram-Schmidt:
            
            1. Normalizar a primeira coluna:
               - q‚ÇÅ = (1, 1, 0)·µÄ / ||(1, 1, 0)|| = (1/‚àö2, 1/‚àö2, 0)·µÄ
            
            2. Ortogonalizar a segunda coluna em rela√ß√£o √† primeira:
               - v‚ÇÇ = (1, 0, 1)·µÄ - ((1/‚àö2, 1/‚àö2, 0)¬∑(1, 0, 1))(1/‚àö2, 1/‚àö2, 0)·µÄ
               - v‚ÇÇ = (1, 0, 1)·µÄ - (1/‚àö2)(1/‚àö2, 1/‚àö2, 0)·µÄ
               - v‚ÇÇ = (1, 0, 1)·µÄ - (1/2, 1/2, 0)·µÄ = (1/2, -1/2, 1)·µÄ
               
               Normalizar:
               - q‚ÇÇ = (1/2, -1/2, 1)·µÄ / ||(1/2, -1/2, 1)|| = (1/‚àö3, -1/‚àö3, 2/‚àö3)·µÄ
            
            As matrizes resultantes s√£o:
            
            $$
            Q = \\begin{bmatrix}
            1/\\sqrt{2} & 1/\\sqrt{3} \\\\
            1/\\sqrt{2} & -1/\\sqrt{3} \\\\
            0 & 2/\\sqrt{3}
            \\end{bmatrix}
            $$
            
            $$
            R = \\begin{bmatrix}
            \\sqrt{2} & 1/\\sqrt{2} \\\\
            0 & \\sqrt{3}/\\sqrt{2}
            \\end{bmatrix}
            $$
            
            Podemos verificar que A = QR.
            """
        },
        "Fatora√ß√£o SVD": {
            "content": """
            # Decomposi√ß√£o em Valores Singulares (SVD)
            
            A Decomposi√ß√£o em Valores Singulares (SVD, Singular Value Decomposition) √© uma das ferramentas mais poderosas e vers√°teis da √°lgebra linear, permitindo decompor qualquer matriz em componentes que revelam suas propriedades fundamentais.
            
            ## Defini√ß√£o
            
            Para qualquer matriz A de dimens√£o m √ó n, a SVD expressa A como o produto de tr√™s matrizes:
            
            $$A = U\\Sigma V^T$$
            
            Onde:
            - U √© uma matriz m √ó m ortogonal (suas colunas s√£o os vetores singulares √† esquerda)
            - Œ£ √© uma matriz m √ó n diagonal (contendo os valores singulares)
            - V·µÄ √© a transposta de uma matriz n √ó n ortogonal V (cujas colunas s√£o os vetores singulares √† direita)
            
            ## Valores Singulares
            
            Os valores singulares œÉ·µ¢ s√£o os elementos diagonais da matriz Œ£, ordenados de forma que œÉ‚ÇÅ ‚â• œÉ‚ÇÇ ‚â• ... ‚â• œÉ·µ£ > 0, onde r √© o posto da matriz A.
            
            Eles correspondem √†s ra√≠zes quadradas dos autovalores de A·µÄA (ou AA·µÄ).
            
            ## Propriedades Importantes
            
            1. **Posto**: O n√∫mero de valores singulares n√£o nulos √© igual ao posto da matriz
            
            2. **Norma de Frobenius**: ||A||_F = ‚àö(œÉ‚ÇÅ¬≤ + œÉ‚ÇÇ¬≤ + ... + œÉ·µ£¬≤)
            
            3. **Norma-2**: ||A||‚ÇÇ = œÉ‚ÇÅ (o maior valor singular)
            
            4. **N√∫mero de condi√ß√£o**: cond(A) = œÉ‚ÇÅ/œÉ·µ£ (raz√£o entre o maior e o menor valor singular n√£o nulo)
            
            ## Aplica√ß√µes em Sistemas Lineares
            
            ### 1. Resolu√ß√£o de Sistemas
            
            Para resolver AX = B usando SVD:
            
            1. Decompor A = UŒ£V·µÄ
            2. Reescrever como UŒ£V·µÄX = B
            3. Multiplicar ambos os lados por U·µÄ: U·µÄUŒ£V·µÄX = U·µÄB
            4. Simplificar: Œ£V·µÄX = U·µÄB
            5. Para valores singulares n√£o nulos œÉ·µ¢, a solu√ß√£o √©:
               X = V Œ£‚Å∫ U·µÄB
               Onde Œ£‚Å∫ √© a pseudo-inversa de Œ£ (substituindo cada œÉ·µ¢ n√£o nulo por 1/œÉ·µ¢)
            
            ### 2. Solu√ß√£o de M√≠nimos Quadrados
            
            Para sistemas sobredeterminados (mais equa√ß√µes que inc√≥gnitas), a SVD fornece a solu√ß√£o de m√≠nimos quadrados que minimiza ||AX - B||.
            
            ### 3. Sistemas Mal Condicionados
            
            A SVD permite:
            - Identificar o mau condicionamento atrav√©s do n√∫mero de condi√ß√£o
            - Aplicar regulariza√ß√£o via SVD truncada (ignorando valores singulares muito pequenos)
            
            ## Aplica√ß√µes Avan√ßadas
            
            1. **Compress√£o de dados**:
               - Aproxima√ß√£o de baixo posto de matrizes
               - Usada em processamento de imagens (m√©todo PCA)
            
            2. **Sistemas de recomenda√ß√£o**:
               - Filtragem colaborativa baseada em matriz
               - Descoberta de fatores latentes
            
            3. **An√°lise de ru√≠do e sinal**:
               - Separa√ß√£o de componentes de interesse de ru√≠do
               - Redu√ß√£o de dimensionalidade
            
            ## Exemplo
            
            Para a matriz:
            
            $$
            A = \\begin{bmatrix}
            4 & 0 \\\\
            3 & -5
            \\end{bmatrix}
            $$
            
            A SVD resulta em:
            
            $$
            U = \\begin{bmatrix}
            0.8 & 0.6 \\\\
            0.6 & -0.8
            \\end{bmatrix},
            \\Sigma = \\begin{bmatrix}
            5 & 0 \\\\
            0 & 4
            \\end{bmatrix},
            V = \\begin{bmatrix}
            0.8 & 0.6 \\\\
            -0.6 & 0.8
            \\end{bmatrix}
            $$
            
            Isso revela que o posto da matriz √© 2, o n√∫mero de condi√ß√£o √© 5/4 = 1.25, e a matriz √© bem condicionada.
            """
        }
    }
    
    # Inicializar current_topic no estado da sess√£o se ainda n√£o existir
    if "current_topic" not in st.session_state:
        st.session_state.current_topic = "Introdu√ß√£o aos Sistemas Lineares"
    
    # Selecionar t√≥pico da teoria
    col1, col2 = st.columns([1, 3])
    
    with col1:
        # Usamos uma key diferente para o radio button e armazenamos o valor em uma vari√°vel tempor√°ria
        # Isso evita o erro de tentar modificar st.session_state.theory_topic ap√≥s o widget ser instanciado
        selected_topic = st.radio(
            "T√≥picos:",
            list(theory_topics.keys()),
            index=list(theory_topics.keys()).index(st.session_state.current_topic),
            key="topic_selector"
        )
        
        # Agora verificamos se o t√≥pico mudou e atualizamos o estado da sess√£o
        if selected_topic != st.session_state.current_topic:
            st.session_state.current_topic = selected_topic
        
        st.markdown("---")
        st.markdown("### Material de Apoio")
        
        # Bot√£o para baixar o material em PDF
        if st.button("üì• Baixar Material em PDF", key="download_pdf_btn"):
            st.success(f"Download de '{selected_topic}.pdf' iniciado! (Simula√ß√£o)")
        
        # Bot√£o para acessar videoaulas
        if st.button("üé¨ Acessar Videoaulas", key="video_btn"):
            st.session_state.page = "V√≠deoaulas"
            st.rerun()
            
        # Bot√£o para adicionar aos favoritos
        if st.button("‚≠ê Adicionar aos Favoritos", key="fav_btn"):
            if "favorites" not in st.session_state:
                st.session_state.favorites = {"reference_cards": []}
            
            # Verificar se j√° est√° nos favoritos
            already_saved = False
            for card in st.session_state.favorites.get("reference_cards", []):
                if card.get("title") == selected_topic:
                    already_saved = True
                    break
                    
            if already_saved:
                st.info(f"'{selected_topic}' j√° est√° nos seus favoritos.")
            else:
                st.session_state.favorites.setdefault("reference_cards", []).append(
                    {"title": selected_topic, "date": datetime.datetime.now().strftime("%d/%m/%Y %H:%M")}
                )
                st.success(f"'{selected_topic}' adicionado aos seus favoritos!")
        
        # Lista de t√≥picos relacionados
        # st.markdown("### T√≥picos Relacionados")
        # related_topics = {
        #     "Introdu√ß√£o aos Sistemas Lineares": ["Classifica√ß√£o de Sistemas Lineares", "M√©todo da Adi√ß√£o", "M√©todo da Substitui√ß√£o"],
        #     "Classifica√ß√£o de Sistemas Lineares": ["Introdu√ß√£o aos Sistemas Lineares", "Teorema de Rouch√©-Capelli", "Interpreta√ß√£o Geom√©trica"],
        #     "M√©todo de Elimina√ß√£o de Gauss": ["M√©todo de Gauss-Jordan", "M√©todo da Adi√ß√£o", "M√©todo da Matriz Inversa"],
        #     "M√©todo da Adi√ß√£o": ["M√©todo de Elimina√ß√£o de Gauss", "M√©todo da Substitui√ß√£o", "M√©todo da Compara√ß√£o"],
        #     "M√©todo da Substitui√ß√£o": ["M√©todo da Adi√ß√£o", "M√©todo da Compara√ß√£o", "Introdu√ß√£o aos Sistemas Lineares"],
        #     "M√©todo da Compara√ß√£o": ["M√©todo da Substitui√ß√£o", "M√©todo da Adi√ß√£o", "Classifica√ß√£o de Sistemas Lineares"],
        #     "Regra de Cramer": ["M√©todo da Matriz Inversa", "Classifica√ß√£o de Sistemas Lineares", "Teorema de Rouch√©-Capelli"],
        #     "M√©todo da Matriz Inversa": ["Regra de Cramer", "Decomposi√ß√£o LU", "Fatora√ß√£o SVD"],
        #     "M√©todo de Gauss-Jordan": ["M√©todo de Elimina√ß√£o de Gauss", "M√©todos Iterativos", "Decomposi√ß√£o QR"],
        #     "M√©todos Iterativos": ["M√©todo de Gauss-Jordan", "Estabilidade Num√©rica", "Decomposi√ß√£o LU"],
        #     "Decomposi√ß√£o LU": ["M√©todo da Matriz Inversa", "Estabilidade Num√©rica", "Decomposi√ß√£o QR"],
        #     "Interpreta√ß√£o Geom√©trica": ["Classifica√ß√£o de Sistemas Lineares", "Aplica√ß√µes de Sistemas Lineares", "Sistemas Homog√™neos"],
        #     "Aplica√ß√µes de Sistemas Lineares": ["Introdu√ß√£o aos Sistemas Lineares", "Aplica√ß√µes Avan√ßadas", "Sistemas Lineares em Programa√ß√£o Linear"],
        #     "Sistemas Homog√™neos": ["Classifica√ß√£o de Sistemas Lineares", "Interpreta√ß√£o Geom√©trica", "Fatora√ß√£o SVD"],
        #     "Estabilidade Num√©rica": ["M√©todos Iterativos", "Decomposi√ß√£o LU", "Fatora√ß√£o SVD"],
        #     "Aplica√ß√µes Avan√ßadas": ["Aplica√ß√µes de Sistemas Lineares", "Sistemas N√£o-Lineares", "Fatora√ß√£o SVD"],
        #     "Sistemas N√£o-Lineares": ["Aplica√ß√µes Avan√ßadas", "M√©todos Iterativos", "Sistemas Lineares em Programa√ß√£o Linear"],
        #     "Sistemas Lineares em Programa√ß√£o Linear": ["Aplica√ß√µes de Sistemas Lineares", "Aplica√ß√µes Avan√ßadas", "M√©todo Simplex"],
        #     "Teorema de Rouch√©-Capelli": ["Classifica√ß√£o de Sistemas Lineares", "Sistemas Homog√™neos", "Interpreta√ß√£o Geom√©trica"],
        #     "Decomposi√ß√£o QR": ["Decomposi√ß√£o LU", "Fatora√ß√£o SVD", "Estabilidade Num√©rica"],
        #     "Fatora√ß√£o SVD": ["Decomposi√ß√£o QR", "Estabilidade Num√©rica", "Aplica√ß√µes Avan√ßadas"]
        # }

        # for topic in related_topics.get(selected_topic, []):
        #     if st.button(f"üìå {topic}", key=f"related_{topic}"):
        #         # Atualizar t√≥pico selecionado usando a vari√°vel current_topic
        #         st.session_state.current_topic = topic
        #         st.rerun()
    
    with col2:
        # Atualizar hist√≥rico de t√≥picos estudados
        if selected_topic not in st.session_state.user_progress["topics_studied"]:
            st.session_state.user_progress["topics_studied"].append(selected_topic)
            
        # Exibir conte√∫do do t√≥pico selecionado
        st.markdown(theory_topics[selected_topic]["content"])
        
        # Adicionar bot√£o para exerc√≠cios relacionados
        st.markdown("---")
        st.markdown("### Quer praticar este conte√∫do?")
        
        if st.button("‚úèÔ∏è Praticar com Exerc√≠cios Relacionados", key="practice_btn"):
            # Salvar o t√≥pico atual para a p√°gina de exerc√≠cios usar
            st.session_state.exercise_topic_from_theory = selected_topic
            
            # Mudar para a p√°gina de exerc√≠cios
            st.session_state.page = "Exerc√≠cios"
            
            # Tentar mapear o t√≥pico para um tipo de exerc√≠cio
            topic_to_exercise = {
                "M√©todo de Elimina√ß√£o de Gauss": "Sistemas 3x3",
                "M√©todo da Adi√ß√£o": "Sistemas 2x2",
                "M√©todo da Substitui√ß√£o": "Sistemas 2x2",
                "M√©todo da Compara√ß√£o": "Sistemas 2x2",
                "Regra de Cramer": "Sistemas 2x2",
                "M√©todo da Matriz Inversa": "Sistemas 3x3",
                "Aplica√ß√µes de Sistemas Lineares": "Aplica√ß√µes",
                "M√©todos Iterativos": "M√©todos Iterativos",
                "Sistemas Homog√™neos": "Sistemas SPI",
                "Estabilidade Num√©rica": "Mal Condicionados"
            }
            
            if selected_topic in topic_to_exercise:
                st.session_state.suggested_exercise_topic = topic_to_exercise[selected_topic]
            else:
                st.session_state.suggested_exercise_topic = "Geral"
                
            st.rerun()

# Modificar main() para usar a vers√£o atualizada da fun√ß√£o show_theory_page
def main():
    # Inicializar estados da sess√£o se n√£o existirem
    if "page" not in st.session_state:
        st.session_state.page = "In√≠cio"
    
    if "user_progress" not in st.session_state:
        st.session_state.user_progress = {
            "exercises_completed": 0,
            "correct_answers": 0,
            "topics_studied": [],
            "difficulty_levels": {"F√°cil": 0, "M√©dio": 0, "Dif√≠cil": 0},
            "last_login": datetime.datetime.now().strftime("%d/%m/%Y"),
            "streak": 1
        }
    
    if "favorites" not in st.session_state:
        st.session_state.favorites = {
            "examples": [],
            "reference_cards": [],
            "exercises": []
        }
        
    # Se n√£o houver current_topic definido, inicialize
    if "current_topic" not in st.session_state:
        st.session_state.current_topic = "Introdu√ß√£o aos Sistemas Lineares"
    
    # Barra lateral
    with st.sidebar:
        st.image("calculo.png", width=280)
        st.title("MENU")
        
        # Se√ß√µes principais
        main_sections = {
            "In√≠cio": "üè†",
            "Resolver Sistema": "üßÆ",
            "Teoria": "üìö",
            "Exerc√≠cios": "‚úèÔ∏è",
            "Exemplos": "üìã",
            "Refer√™ncia R√°pida": "üìù",
            "V√≠deoaulas": "üé¨",
            "Meu Progresso": "üìä"
        }
        
        for section, icon in main_sections.items():
            if st.sidebar.button(f"{icon} {section}", key=f"btn_{section}", use_container_width=True):
                st.session_state.page = section
                # Usar rerun em vez de experimental_rerun
                st.rerun()
        
        st.sidebar.markdown("---")
        
        # Configura√ß√µes da aplica√ß√£o
        with st.sidebar.expander("‚öôÔ∏è Configura√ß√µes"):
            st.checkbox("Modo escuro", value=False, key="dark_mode")
            st.checkbox("Mostrar passos detalhados", value=True, key="show_steps_config")
            st.select_slider("Precis√£o num√©rica", options=["Baixa", "M√©dia", "Alta"], value="M√©dia", key="precision")
            st.slider("Tamanho da fonte", min_value=80, max_value=120, value=100, step=10, format="%d%%", key="font_size")
        
        # Informa√ß√µes do usu√°rio
        st.sidebar.markdown("---")
        col1, col2 = st.sidebar.columns([1, 3])
        with col1:
            st.image("calculo.png", width=60)
        with col2:
            st.markdown("**Usu√°rio:** Estudante")
            st.markdown(f"**Progresso:** {int(min(st.session_state.user_progress['exercises_completed'] / 20 * 100, 100))}%")
        
        # Exibir streak
        st.sidebar.markdown(f"üî• **Sequ√™ncia de estudos:** {st.session_state.user_progress['streak']} dias")
        
        st.sidebar.markdown("---")
        st.sidebar.markdown("v1.0.0 | ¬© 2025 SistemaSolver")
    
    # Conte√∫do principal
    if st.session_state.page == "In√≠cio":
        show_home_page()
    elif st.session_state.page == "Resolver Sistema":
        show_solver_page()
    elif st.session_state.page == "Teoria":
        show_theory_page()
    elif st.session_state.page == "Exerc√≠cios":
        show_exercises_page()
    elif st.session_state.page == "Exemplos":
        show_examples_page()
    elif st.session_state.page == "Refer√™ncia R√°pida":
        show_reference_page()
    elif st.session_state.page == "V√≠deoaulas":
        show_videos_page()
    elif st.session_state.page == "Meu Progresso":
        show_progress_page()

# Fun√ß√£o para ser chamada quando a p√°gina de exerc√≠cios √© carregada
def setup_exercises_page_from_theory():
    # Verificar se estamos vindo da p√°gina de teoria
    if "exercise_topic_from_theory" in st.session_state:
        # Usar o t√≥pico sugerido
        if "suggested_exercise_topic" in st.session_state:
            st.session_state.exercise_topic = st.session_state.suggested_exercise_topic
            
        # Limpar as vari√°veis ap√≥s uso
        del st.session_state.exercise_topic_from_theory
        if "suggested_exercise_topic" in st.session_state:
            del st.session_state.suggested_exercise_topic
            
def show_theory_page():
    st.markdown('<h1 class="main-header">Teoria dos Sistemas Lineares</h1>', unsafe_allow_html=True)
    
    theory_topics = {
        "Introdu√ß√£o aos Sistemas Lineares": {
            "content": """
            # Introdu√ß√£o aos Sistemas Lineares
            
            Um **sistema de equa√ß√µes lineares** √© um conjunto de uma ou mais equa√ß√µes lineares envolvendo as mesmas vari√°veis.
            
            ## Defini√ß√£o Formal
            
            Em nota√ß√£o matem√°tica, um sistema linear de m equa√ß√µes e n inc√≥gnitas pode ser escrito como:
            
            $$
            \\begin{align}
            a_{11}x_1 + a_{12}x_2 + \\ldots + a_{1n}x_n &= b_1\\\\
            a_{21}x_1 + a_{22}x_2 + \\ldots + a_{2n}x_n &= b_2\\\\
            \\vdots\\\\
            a_{m1}x_1 + a_{m2}x_2 + \\ldots + a_{mn}x_n &= b_m
            \\end{align}
            $$
            
            Onde:
            - $a_{ij}$ s√£o os coeficientes das inc√≥gnitas
            - $x_j$ s√£o as inc√≥gnitas (ou vari√°veis)
            - $b_i$ s√£o os termos independentes
            
            ## Representa√ß√£o Matricial
            
            O sistema linear tamb√©m pode ser representado na forma matricial:
            
            $$
            A\\mathbf{x} = \\mathbf{b}
            $$
            
            Onde:
            - $A$ √© a matriz dos coeficientes ($m \\times n$)
            - $\\mathbf{x}$ √© o vetor das inc√≥gnitas ($n \\times 1$)
            - $\\mathbf{b}$ √© o vetor dos termos independentes ($m \\times 1$)
            
            ## Tipos de Sistemas
            
            Um sistema linear pode ser:
            1. **Determinado**: Possui exatamente uma solu√ß√£o
            2. **Indeterminado**: Possui infinitas solu√ß√µes
            3. **Imposs√≠vel**: N√£o possui solu√ß√£o
            
            ## Import√¢ncia
            
            Os sistemas lineares s√£o fundamentais na matem√°tica aplicada e aparecem em diversos contextos:
            - F√≠sica (equil√≠brio de for√ßas, circuitos el√©tricos)
            - Economia (modelos de pre√ßo, an√°lise de insumo-produto)
            - Engenharia (an√°lise estrutural, processamento de sinais)
            - Computa√ß√£o gr√°fica (transforma√ß√µes geom√©tricas)
            """
        },
        "Classifica√ß√£o de Sistemas Lineares": {
            "content": """
            # Classifica√ß√£o de Sistemas Lineares
            
            ## Sistemas Poss√≠veis e Determinados (SPD)
            
            Um sistema √© **poss√≠vel e determinado** quando possui **exatamente uma solu√ß√£o**.
            
            **Caracter√≠sticas**:
            - O determinante da matriz dos coeficientes √© diferente de zero (det(A) ‚â† 0)
            - O n√∫mero de equa√ß√µes linearmente independentes √© igual ao n√∫mero de inc√≥gnitas
            - O posto da matriz dos coeficientes √© igual ao posto da matriz ampliada e igual ao n√∫mero de inc√≥gnitas
            
            **Interpreta√ß√£o geom√©trica**:
            - Em 2D: duas retas que se intersectam em um √∫nico ponto
            - Em 3D: tr√™s planos que se intersectam em um √∫nico ponto
            
            ## Sistemas Poss√≠veis e Indeterminados (SPI)
            
            Um sistema √© **poss√≠vel e indeterminado** quando possui **infinitas solu√ß√µes**.
            
            **Caracter√≠sticas**:
            - O posto da matriz dos coeficientes √© igual ao posto da matriz ampliada
            - O posto √© menor que o n√∫mero de inc√≥gnitas
            
            **Interpreta√ß√£o geom√©trica**:
            - Em 2D: retas coincidentes (sobrepostas)
            - Em 3D: planos que se intersectam em uma reta ou coincidem
            
            ## Sistemas Imposs√≠veis (SI)
            
            Um sistema √© **imposs√≠vel** quando **n√£o possui solu√ß√£o**.
            
            **Caracter√≠sticas**:
            - O posto da matriz dos coeficientes √© menor que o posto da matriz ampliada
            
            **Interpreta√ß√£o geom√©trica**:
            - Em 2D: retas paralelas (n√£o se intersectam)
            - Em 3D: planos paralelos ou que se intersectam sem um ponto comum a todos
            
            ## Teorema de Rouch√©-Capelli
            
            O teorema estabelece que:
            
            - Um sistema √© **compat√≠vel** (tem solu√ß√£o) se e somente se o posto da matriz dos coeficientes √© igual ao posto da matriz ampliada.
            
            - Seja r = posto da matriz dos coeficientes = posto da matriz ampliada:
              - Se r = n (n√∫mero de inc√≥gnitas), o sistema √© SPD
              - Se r < n, o sistema √© SPI
            
            - Se o posto da matriz dos coeficientes < posto da matriz ampliada, o sistema √© SI
            """
        },
        "M√©todo de Elimina√ß√£o de Gauss": {
            "content": """
            # M√©todo de Elimina√ß√£o de Gauss
            
            O m√©todo de elimina√ß√£o de Gauss √© um dos algoritmos mais importantes para resolver sistemas lineares. Consiste em transformar o sistema em uma forma triangular superior (escalonada) atrav√©s de opera√ß√µes elementares.
            
            ## Opera√ß√µes Elementares
            
            As opera√ß√µes elementares permitidas s√£o:
            1. Trocar a posi√ß√£o de duas equa√ß√µes
            2. Multiplicar uma equa√ß√£o por uma constante n√£o nula
            3. Substituir uma equa√ß√£o pela soma dela com um m√∫ltiplo de outra equa√ß√£o
            
            ## Algoritmo
            
            O m√©todo pode ser dividido em duas etapas:
            
            ### 1. Elimina√ß√£o para frente (Forward Elimination)
            
            Nesta fase, transformamos a matriz aumentada [A|b] em uma matriz triangular superior. Para cada linha i da matriz:
            
            - Encontrar o piv√¥ (elemento n√£o nulo na posi√ß√£o i,i)
            - Para cada linha j abaixo da linha i:
              - Calcular o fator de elimina√ß√£o: f = a_ji / a_ii
              - Subtrair da linha j a linha i multiplicada por f
            
            ### 2. Substitui√ß√£o reversa (Back Substitution)
            
            Uma vez obtida a forma triangular, resolvemos o sistema de tr√°s para frente:
            
            - Calcular o valor da √∫ltima vari√°vel
            - Substituir esse valor nas equa√ß√µes anteriores para encontrar as demais vari√°veis
            
            ## Elimina√ß√£o Gaussiana com Pivoteamento Parcial
            
            Para melhorar a estabilidade num√©rica, √© comum usar pivoteamento parcial:
            
            - A cada passo, escolher como piv√¥ o elemento de maior valor absoluto na coluna atual
            - Trocar linhas para que este elemento fique na posi√ß√£o diagonal
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            x + y + z &= 6\\\\
            2x - y + z &= 3\\\\
            x + 2y + 3z &= 14
            \\end{align}
            $$
            
            **Matriz aumentada inicial**:
            
            $$
            \\begin{bmatrix}
            1 & 1 & 1 & | & 6 \\\\
            2 & -1 & 1 & | & 3 \\\\
            1 & 2 & 3 & | & 14
            \\end{bmatrix}
            $$
            
            **Ap√≥s elimina√ß√£o para frente**:
            
            $$
            \\begin{bmatrix}
            1 & 1 & 1 & | & 6 \\\\
            0 & -3 & -1 & | & -9 \\\\
            0 & 0 & 5/3 & | & 5
            \\end{bmatrix}
            $$
            
            **Substitui√ß√£o reversa**:
            - Da √∫ltima linha: z = 3
            - Da segunda linha: -3y - 3 = -9, portanto y = 2
            - Da primeira linha: x + 2 + 3 = 6, portanto x = 1
            
            **Solu√ß√£o**: x = 1, y = 2, z = 3
            """
        },
                "M√©todo da Adi√ß√£o": {
            "content": """
            # M√©todo da Adi√ß√£o (ou Elimina√ß√£o por Soma)
            
            O m√©todo da adi√ß√£o √© uma t√©cnica espec√≠fica para resolver sistemas de equa√ß√µes lineares, especialmente √∫til em sistemas com poucas equa√ß√µes. √â um caso particular do m√©todo de elimina√ß√£o de Gauss, focado na elimina√ß√£o de vari√°veis atrav√©s da soma de equa√ß√µes.
            
            ## Procedimento
            
            1. Organizar as equa√ß√µes de modo que os coeficientes de uma determinada vari√°vel possam se anular quando as equa√ß√µes forem somadas ou subtra√≠das
            2. Multiplicar as equa√ß√µes por constantes apropriadas para que os coeficientes da vari√°vel a ser eliminada se tornem opostos
            3. Somar as equa√ß√µes para eliminar a vari√°vel
            4. Repetir o processo at√© obter uma equa√ß√£o com apenas uma vari√°vel
            5. Resolver para essa vari√°vel e substituir nas equa√ß√µes anteriores
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + 3y &= 8 \\quad (1)\\\\
            4x - y &= 10 \\quad (2)
            \\end{align}
            $$
            
            **Passo 1**: Multiplicamos a equa√ß√£o (1) por 2 para que o coeficiente de x se torne 4
            
            $$
            \\begin{align}
            4x + 6y &= 16 \\quad (1')\\\\
            4x - y &= 10 \\quad (2)
            \\end{align}
            $$
            
            **Passo 2**: Subtra√≠mos a equa√ß√£o (2) da equa√ß√£o (1')
            
            $$
            \\begin{align}
            4x + 6y - (4x - y) &= 16 - 10\\\\
            7y &= 6
            \\end{align}
            $$
            
            **Passo 3**: Resolvemos para y
            
            $$y = \\frac{6}{7}$$
            
            **Passo 4**: Substitu√≠mos o valor de y na equa√ß√£o (2)
            
            $$
            \\begin{align}
            4x - \\frac{6}{7} &= 10\\\\
            4x &= 10 + \\frac{6}{7}\\\\
            4x &= \\frac{70 + 6}{7}\\\\
            4x &= \\frac{76}{7}\\\\
            x &= \\frac{19}{7}
            \\end{align}
            $$
            
            **Solu√ß√£o**: $x = \\frac{19}{7}$, $y = \\frac{6}{7}$
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - M√©todo intuitivo e f√°cil de aplicar manualmente para sistemas pequenos
            - N√£o requer conhecimentos avan√ßados de √°lgebra linear
            - Pode ser mais direto que outros m√©todos para certos tipos de sistemas
            
            **Desvantagens**:
            - Pode ser trabalhoso para sistemas maiores
            - A escolha de quais equa√ß√µes combinar e como requer estrat√©gia
            - Menos sistem√°tico que o m√©todo de elimina√ß√£o de Gauss completo
            """
        },
        "M√©todo da Substitui√ß√£o": {
            "content": """
            # M√©todo da Substitui√ß√£o
            
            O m√©todo da substitui√ß√£o √© uma t√©cnica elementar para resolver sistemas de equa√ß√µes lineares, especialmente √∫til para sistemas pequenos ou esparsos (com muitos zeros).
            
            ## Procedimento
            
            1. Isolar uma vari√°vel em uma das equa√ß√µes
            2. Substituir a express√£o obtida nas demais equa√ß√µes, reduzindo o sistema
            3. Repetir o processo at√© obter uma equa√ß√£o com apenas uma vari√°vel
            4. Resolver para essa vari√°vel e substituir nas express√µes anteriores para encontrar as demais vari√°veis
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            x + 2y &= 5 \\quad (1)\\\\
            3x - 4y &= 7 \\quad (2)
            \\end{align}
            $$
            
            **Passo 1**: Isolamos x na equa√ß√£o (1)
            
            $$x = 5 - 2y \quad (3)$$
            
            **Passo 2**: Substitu√≠mos (3) na equa√ß√£o (2)
            
            $$
            \\begin{align}
            3(5 - 2y) - 4y &= 7\\\\
            15 - 6y - 4y &= 7\\\\
            15 - 10y &= 7\\\\
            -10y &= 7 - 15\\\\
            -10y &= -8\\\\
            y &= \\frac{8}{10} = \\frac{4}{5}
            \\end{align}
            $$
            
            **Passo 3**: Substitu√≠mos o valor de y em (3)
            
            $$
            \\begin{align}
            x &= 5 - 2 \\cdot \\frac{4}{5}\\\\
            &= 5 - \\frac{8}{5}\\\\
            &= \\frac{25 - 8}{5}\\\\
            &= \\frac{17}{5}
            \\end{align}
            $$
            
            **Solu√ß√£o**: $x = \\frac{17}{5}$, $y = \\frac{4}{5}$
            
            ## Aplica√ß√£o em Sistemas Triangulares
            
            O m√©todo da substitui√ß√£o √© particularmente eficiente para sistemas triangulares. De fato, a substitui√ß√£o reversa usada ap√≥s a elimina√ß√£o gaussiana √© uma aplica√ß√£o deste m√©todo.
            
            Para um sistema triangular superior:
            
            $$
            \\begin{align}
            a_{11}x_1 + a_{12}x_2 + \\ldots + a_{1n}x_n &= b_1\\\\
            a_{22}x_2 + \\ldots + a_{2n}x_n &= b_2\\\\
            \\vdots\\\\
            a_{nn}x_n &= b_n
            \\end{align}
            $$
            
            Come√ßamos resolvendo $x_n = b_n/a_{nn}$ e substitu√≠mos nas equa√ß√µes anteriores.
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - M√©todo intuitivo e f√°cil de entender
            - Eficiente para sistemas pequenos ou triangulares
            - √ötil em sistemas onde algumas vari√°veis podem ser facilmente isoladas
            
            **Desvantagens**:
            - Pode levar a c√°lculos complexos se as express√µes substitu√≠das forem complicadas
            - N√£o √© t√£o sistem√°tico ou eficiente computacionalmente quanto outros m√©todos para sistemas grandes
            """
        },
        "M√©todo da Compara√ß√£o": {
            "content": """
            # M√©todo da Compara√ß√£o
            
            O m√©todo da compara√ß√£o √© uma t√©cnica para resolver sistemas de equa√ß√µes lineares que consiste em isolar a mesma vari√°vel em diferentes equa√ß√µes e, em seguida, igualar as express√µes resultantes.
            
            ## Procedimento
            
            1. Isolar a mesma vari√°vel em duas ou mais equa√ß√µes do sistema
            2. Igualar as express√µes obtidas, formando novas equa√ß√µes com menos vari√°veis
            3. Resolver o sistema reduzido
            4. Substituir as solu√ß√µes encontradas nas express√µes iniciais para obter as demais vari√°veis
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + 3y &= 7 \\quad (1)\\\\
            5x - 2y &= 8 \\quad (2)
            \\end{align}
            $$
            
            **Passo 1**: Isolamos x em ambas as equa√ß√µes
            
            Da equa√ß√£o (1):
            $$x = \\frac{7 - 3y}{2} \\quad (3)$$
            
            Da equa√ß√£o (2):
            $$x = \\frac{8 + 2y}{5} \\quad (4)$$
            
            **Passo 2**: Igualamos as express√µes (3) e (4)
            
            $$
            \\begin{align}
            \\frac{7 - 3y}{2} &= \\frac{8 + 2y}{5}\\\\
            5(7 - 3y) &= 2(8 + 2y)\\\\
            35 - 15y &= 16 + 4y\\\\
            35 - 15y &= 16 + 4y\\\\
            35 - 16 &= 4y + 15y\\\\
            19 &= 19y\\\\
            y &= 1
            \\end{align}
            $$
            
            **Passo 3**: Substitu√≠mos y = 1 em uma das express√µes para x, por exemplo em (3)
            
            $$
            \\begin{align}
            x &= \\frac{7 - 3(1)}{2}\\\\
            &= \\frac{7 - 3}{2}\\\\
            &= \\frac{4}{2}\\\\
            &= 2
            \\end{align}
            $$
            
            **Solu√ß√£o**: x = 2, y = 1
            
            ## Verifica√ß√£o
            
            Podemos verificar a solu√ß√£o substituindo os valores nas equa√ß√µes originais:
            
            Equa√ß√£o (1): 2(2) + 3(1) = 4 + 3 = 7 ‚úì
            
            Equa√ß√£o (2): 5(2) - 2(1) = 10 - 2 = 8 ‚úì
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - M√©todo intuitivo que n√£o requer conhecimentos avan√ßados
            - √ötil para sistemas com duas equa√ß√µes e duas inc√≥gnitas
            - Pode ser mais direto em certos casos espec√≠ficos
            
            **Desvantagens**:
            - Torna-se complicado para sistemas maiores
            - Pode levar a express√µes alg√©bricas complexas
            - Menos eficiente computacionalmente que m√©todos mais sistem√°ticos
            """
        },
        "Regra de Cramer": {
            "content": """
            # Regra de Cramer
            
            A regra de Cramer √© um m√©todo para resolver sistemas lineares usando determinantes. √â aplic√°vel apenas a sistemas com mesmo n√∫mero de equa√ß√µes e inc√≥gnitas, onde o determinante da matriz dos coeficientes √© diferente de zero (sistemas SPD).
            
            ## Procedimento
            
            Para um sistema AX = B:
            
            1. Calcular o determinante D da matriz A
            2. Para cada vari√°vel x·µ¢:
               - Substituir a coluna i da matriz A pela coluna B, obtendo a matriz A·µ¢
               - Calcular o determinante D·µ¢
               - A solu√ß√£o para x·µ¢ √© dada por x·µ¢ = D·µ¢/D
            
            ## F√≥rmula
            
            Para um sistema 2√ó2:
            
            $$
            \\begin{align}
            a_1x + b_1y &= c_1\\\\
            a_2x + b_2y &= c_2
            \\end{align}
            $$
            
            As solu√ß√µes s√£o:
            
            $$
            x = \\frac{\\begin{vmatrix} c_1 & b_1 \\\\ c_2 & b_2 \\end{vmatrix}}{\\begin{vmatrix} a_1 & b_1 \\\\ a_2 & b_2 \\end{vmatrix}} = \\frac{c_1b_2 - b_1c_2}{a_1b_2 - b_1a_2}
            $$
            
            $$
            y = \\frac{\\begin{vmatrix} a_1 & c_1 \\\\ a_2 & c_2 \\end{vmatrix}}{\\begin{vmatrix} a_1 & b_1 \\\\ a_2 & b_2 \\end{vmatrix}} = \\frac{a_1c_2 - c_1a_2}{a_1b_2 - b_1a_2}
            $$
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + 3y &= 8\\\\
            4x - y &= 1
            \\end{align}
            $$
            
            **Determinante principal**:
            
            $$
            D = \\begin{vmatrix} 2 & 3 \\\\ 4 & -1 \\end{vmatrix} = 2 \\times (-1) - 3 \\times 4 = -2 - 12 = -14
            $$
            
            **Determinante para x**:
            
            $$
            D_x = \\begin{vmatrix} 8 & 3 \\\\ 1 & -1 \\end{vmatrix} = 8 \\times (-1) - 3 \\times 1 = -8 - 3 = -11
            $$
            
            **Determinante para y**:
            
            $$
            D_y = \\begin{vmatrix} 2 & 8 \\\\ 4 & 1 \\end{vmatrix} = 2 \\times 1 - 8 \\times 4 = 2 - 32 = -30
            $$
            
            **Solu√ß√£o**:
            
            $$
            x = \\frac{D_x}{D} = \\frac{-11}{-14} = \\frac{11}{14}
            $$
            
            $$
            y = \\frac{D_y}{D} = \\frac{-30}{-14} = \\frac{15}{7}
            $$
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - M√©todo direto (n√£o iterativo)
            - F√°cil de entender e aplicar para sistemas pequenos
            
            **Desvantagens**:
            - Aplic√°vel apenas a sistemas quadrados (n√ón) com determinante n√£o nulo
            - Computacionalmente ineficiente para sistemas grandes
            - N√£o √© recomendado para sistemas mal condicionados
            """
        },
        "M√©todo da Matriz Inversa": {
            "content": """
            # M√©todo da Matriz Inversa
            
            O m√©todo da matriz inversa √© uma abordagem direta para resolver sistemas lineares na forma AX = B, onde A √© uma matriz quadrada invers√≠vel.
            
            ## Procedimento
            
            1. Verificar se a matriz A √© invers√≠vel (det(A) ‚â† 0)
            2. Calcular a matriz inversa A‚Åª¬π
            3. Multiplicar ambos os lados da equa√ß√£o por A‚Åª¬π: A‚Åª¬π(AX) = A‚Åª¬πB
            4. Simplificar: X = A‚Åª¬πB
            
            ## C√°lculo da Matriz Inversa
            
            Para uma matriz 2√ó2:
            
            $$
            \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix}^{-1} = \\frac{1}{ad-bc} \\begin{bmatrix} d & -b \\\\ -c & a \\end{bmatrix}
            $$
            
            Para matrizes maiores, pode-se usar:
            - M√©todo da matriz adjunta
            - Elimina√ß√£o gaussiana
            - Decomposi√ß√£o LU
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + y &= 5\\\\
            3x + 4y &= 11
            \\end{align}
            $$
            
            Na forma matricial:
            
            $$
            \\begin{bmatrix} 2 & 1 \\\\ 3 & 4 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix} = \\begin{bmatrix} 5 \\\\ 11 \\end{bmatrix}
            $$
            
            **Determinante**:
            
            $$
            \\det(A) = 2 \\times 4 - 1 \\times 3 = 8 - 3 = 5
            $$
            
            **Matriz inversa**:
            
            $$
            A^{-1} = \\frac{1}{5} \\begin{bmatrix} 4 & -1 \\\\ -3 & 2 \\end{bmatrix} = \\begin{bmatrix} 4/5 & -1/5 \\\\ -3/5 & 2/5 \\end{bmatrix}
            $$
            
            **Solu√ß√£o**:
            
            $$
            \\begin{bmatrix} x \\\\ y \\end{bmatrix} = \\begin{bmatrix} 4/5 & -1/5 \\\\ -3/5 & 2/5 \\end{bmatrix} \\begin{bmatrix} 5 \\\\ 11 \\end{bmatrix} = \\begin{bmatrix} 4/5 \\times 5 - 1/5 \\times 11 \\\\ -3/5 \\times 5 + 2/5 \\times 11 \\end{bmatrix} = \\begin{bmatrix} 4 - 11/5 \\\\ -3 + 22/5 \\end{bmatrix} = \\begin{bmatrix} 9/5 \\\\ 7/5 \\end{bmatrix}
            $$
            
            Portanto, x = 9/5 e y = 7/5.
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - M√©todo direto e elegante
            - √ötil quando precisamos resolver m√∫ltiplos sistemas com a mesma matriz de coeficientes
            
            **Desvantagens**:
            - Aplic√°vel apenas a sistemas quadrados (n√ón) com determinante n√£o nulo
            - Computacionalmente ineficiente para sistemas grandes
            - Pode ser numericamente inst√°vel para matrizes mal condicionadas
            """
        },
        "M√©todo de Gauss-Jordan": {
            "content": """
            # M√©todo de Gauss-Jordan
            
            O m√©todo de Gauss-Jordan √© uma extens√£o do m√©todo de elimina√ß√£o de Gauss que leva a matriz aumentada √† forma escalonada reduzida.
            
            ## Procedimento
            
            1. Aplicar opera√ß√µes elementares para obter 1's na diagonal principal
            2. Zerar todos os elementos acima e abaixo da diagonal principal
            
            **Forma final da matriz aumentada**:
            ```
            | 1 0 0 ... | x‚ÇÅ |
            | 0 1 0 ... | x‚ÇÇ |
            | 0 0 1 ... | x‚ÇÉ |
            | ...       | ... |
            ```
            
            O vetor solu√ß√£o pode ser lido diretamente da √∫ltima coluna da matriz.
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + y + z &= 5\\\\
            x - y + 2z &= 4\\\\
            3x + 2y - z &= 3
            \\end{align}
            $$
            
            **Matriz aumentada inicial**:
            
            $$
            \\begin{bmatrix}
            2 & 1 & 1 & | & 5 \\\\
            1 & -1 & 2 & | & 4 \\\\
            3 & 2 & -1 & | & 3
            \\end{bmatrix}
            $$
            
            **Passo 1**: Obter 1 na posi√ß√£o (1,1) e zerar os outros elementos da primeira coluna
            
            Dividir a primeira linha por 2:
            
            $$
            \\begin{bmatrix}
            1 & 1/2 & 1/2 & | & 5/2 \\\\
            1 & -1 & 2 & | & 4 \\\\
            3 & 2 & -1 & | & 3
            \\end{bmatrix}
            $$
            
            Subtrair a primeira linha da segunda:
            
            $$
            \\begin{bmatrix}
            1 & 1/2 & 1/2 & | & 5/2 \\\\
            0 & -3/2 & 3/2 & | & 3/2 \\\\
            3 & 2 & -1 & | & 3
            \\end{bmatrix}
            $$
            
            Subtrair 3 vezes a primeira linha da terceira:
            
            $$
            \\begin{bmatrix}
            1 & 1/2 & 1/2 & | & 5/2 \\\\
            0 & -3/2 & 3/2 & | & 3/2 \\\\
            0 & 1/2 & -5/2 & | & -9/2
            \\end{bmatrix}
            $$
            
            **Passo 2**: Obter 1 na posi√ß√£o (2,2) e zerar os outros elementos da segunda coluna
            
            Multiplicar a segunda linha por -2/3:
            
            $$
            \\begin{bmatrix}
            1 & 1/2 & 1/2 & | & 5/2 \\\\
            0 & 1 & -1 & | & -1 \\\\
            0 & 1/2 & -5/2 & | & -9/2
            \\end{bmatrix}
            $$
            
            Subtrair 1/2 vezes a segunda linha da primeira:
            
            $$
            \\begin{bmatrix}
            1 & 0 & 1 & | & 3 \\\\
            0 & 1 & -1 & | & -1 \\\\
            0 & 1/2 & -5/2 & | & -9/2
            \\end{bmatrix}
            $$
            
            Subtrair 1/2 vezes a segunda linha da terceira:
            
            $$
            \\begin{bmatrix}
            1 & 0 & 1 & | & 3 \\\\
            0 & 1 & -1 & | & -1 \\\\
            0 & 0 & -2 & | & -4
            \\end{bmatrix}
            $$
            
            **Passo 3**: Obter 1 na posi√ß√£o (3,3) e zerar os outros elementos da terceira coluna
            
            Multiplicar a terceira linha por -1/2:
            
            $$
            \\begin{bmatrix}
            1 & 0 & 1 & | & 3 \\\\
            0 & 1 & -1 & | & -1 \\\\
            0 & 0 & 1 & | & 2
            \\end{bmatrix}
            $$
            
            Subtrair 1 vez a terceira linha da primeira:
            
            $$
            \\begin{bmatrix}
            1 & 0 & 0 & | & 1 \\\\
            0 & 1 & -1 & | & -1 \\\\
            0 & 0 & 1 & | & 2
            \\end{bmatrix}
            $$
            
            Somar 1 vez a terceira linha √† segunda:
            
            $$
            \\begin{bmatrix}
            1 & 0 & 0 & | & 1 \\\\
            0 & 1 & 0 & | & 1 \\\\
            0 & 0 & 1 & | & 2
            \\end{bmatrix}
            $$
            
            A solu√ß√£o pode ser lida diretamente da √∫ltima coluna: x = 1, y = 1, z = 2.
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - A solu√ß√£o √© obtida diretamente, sem necessidade de substitui√ß√£o reversa
            - √ötil para calcular a inversa de uma matriz
            
            **Desvantagens**:
            - Requer mais opera√ß√µes que o m√©todo de Gauss padr√£o
            - Pode ser numericamente menos est√°vel em alguns casos
            """
        },
        "M√©todos Iterativos": {
            "content": """
            # M√©todos Iterativos para Sistemas Lineares
            
            Os m√©todos iterativos come√ßam com uma aproxima√ß√£o inicial e melhoram progressivamente a solu√ß√£o.
            
            ## M√©todo de Jacobi
            
            **Procedimento**:
            1. Para cada equa√ß√£o i, isolar a inc√≥gnita x_i
            2. Iniciar com uma aproxima√ß√£o inicial (geralmente zeros)
            3. Em cada itera√ß√£o k+1, calcular:
               x_i^(k+1) = (b_i - Œ£ a_ij x_j^(k)) / a_ii, para j ‚â† i
            4. Repetir at√© convergir
            
            ## M√©todo de Gauss-Seidel
            
            Similar ao m√©todo de Jacobi, mas usa valores j√° atualizados na mesma itera√ß√£o:
            
            x_i^(k+1) = (b_i - Œ£ a_ij x_j^(k+1) - Œ£ a_ij x_j^(k)) / a_ii
                          j<i                j>i
            
            **Condi√ß√µes de converg√™ncia**:
            - Matriz diagonalmente dominante (|a_ii| > Œ£ |a_ij| para j ‚â† i)
            - Matriz definida positiva
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            10x + 2y + z &= 13\\\\
            x + 5y + z &= 7\\\\
            2x + y + 10z &= 13
            \\end{align}
            $$
            
            Isolando as vari√°veis:
            
            $$
            \\begin{align}
            x &= \\frac{13 - 2y - z}{10}\\\\
            y &= \\frac{7 - x - z}{5}\\\\
            z &= \\frac{13 - 2x - y}{10}
            \\end{align}
            $$
            
            **M√©todo de Jacobi**:
            
            Partindo de x^(0) = y^(0) = z^(0) = 0:
            
            Itera√ß√£o 1:
            - x^(1) = (13 - 2√ó0 - 0)/10 = 1.3
            - y^(1) = (7 - 0 - 0)/5 = 1.4
            - z^(1) = (13 - 2√ó0 - 0)/10 = 1.3
            
            Itera√ß√£o 2:
            - x^(2) = (13 - 2√ó1.4 - 1.3)/10 = 0.83
            - y^(2) = (7 - 1.3 - 1.3)/5 = 0.88
            - z^(2) = (13 - 2√ó1.3 - 1.4)/10 = 0.83
            
            O processo continua at√© a converg√™ncia para x = y = z = 1.
            
            **M√©todo de Gauss-Seidel**:
            
            Partindo de x^(0) = y^(0) = z^(0) = 0:
            
            Itera√ß√£o 1:
            - x^(1) = (13 - 2√ó0 - 0)/10 = 1.3
            - y^(1) = (7 - 1.3 - 0)/5 = 1.14
            - z^(1) = (13 - 2√ó1.3 - 1.14)/10 = 0.826
            
            Itera√ß√£o 2:
            - x^(2) = (13 - 2√ó1.14 - 0.826)/10 = 0.8934
            - y^(2) = (7 - 0.8934 - 0.826)/5 = 1.0561
            - z^(2) = (13 - 2√ó0.8934 - 1.0561)/10 = 0.9157
            
            O m√©todo converge mais rapidamente para x = y = z = 1.
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - Mais eficientes para sistemas grandes e esparsos
            - Menor requisito de mem√≥ria
            - Podem lidar com matrizes mal condicionadas
            
            **Desvantagens**:
            - Converg√™ncia n√£o garantida para todas as matrizes
            - Podem ser lentos para atingir alta precis√£o
            """
        },
        "Decomposi√ß√£o LU": {
            "content": """
            # Decomposi√ß√£o LU
            
            A decomposi√ß√£o LU fatoriza a matriz A em um produto de duas matrizes: A = LU, onde:
            - L √© uma matriz triangular inferior
            - U √© uma matriz triangular superior
            
            ## Procedimento para resolver AX = B
            
            1. Decompor A = LU
            2. Resolver LY = B por substitui√ß√£o direta
            3. Resolver UX = Y por substitui√ß√£o reversa
            
            ## Algoritmo para decomposi√ß√£o LU
            
            **Procedimento de Doolittle**:
            
            Para uma matriz n√ón:
            
            1. Para i = 1 at√© n:
               - Para j = i at√© n: u_{ij} = a_{ij} - Œ£(l_{ik} √ó u_{kj}) para k = 1 at√© i-1
               - Para j = i+1 at√© n: l_{ji} = (a_{ji} - Œ£(l_{jk} √ó u_{ki}) para k = 1 at√© i-1) / u_{ii}
            
            2. Para i = 1 at√© n: l_{ii} = 1 (diagonal unit√°ria para L)
            
            ## Exemplo
            
            Considere o sistema:
            
            $$
            \\begin{align}
            2x + y + z &= 5\\\\
            4x + 5y + z &= 9\\\\
            x + y + 3z &= 11
            \\end{align}
            $$
            
            **Decomposi√ß√£o LU**:
            
            Matriz A:
            
            $$
            A = \\begin{bmatrix}
            2 & 1 & 1 \\\\
            4 & 5 & 1 \\\\
            1 & 1 & 3
            \\end{bmatrix}
            $$
            
            Calculando L e U:
            
            $$
            L = \\begin{bmatrix}
            1 & 0 & 0 \\\\
            2 & 1 & 0 \\\\
            0.5 & 0.25 & 1
            \\end{bmatrix}
            $$
            
            $$
            U = \\begin{bmatrix}
            2 & 1 & 1 \\\\
            0 & 3 & -1 \\\\
            0 & 0 & 2.5
            \\end{bmatrix}
            $$
            
            **Resolver LY = B**:
            
            $$
            \\begin{bmatrix}
            1 & 0 & 0 \\\\
            2 & 1 & 0 \\\\
            0.5 & 0.25 & 1
            \\end{bmatrix}
            \\begin{bmatrix}
            y_1 \\\\
            y_2 \\\\
            y_3
            \\end{bmatrix} =
            \\begin{bmatrix}
            5 \\\\
            9 \\\\
            11
            \\end{bmatrix}
            $$
            
            - y‚ÇÅ = 5
            - y‚ÇÇ = 9 - 2√ó5 = -1
            - y‚ÇÉ = 11 - 0.5√ó5 - 0.25√ó(-1) = 11 - 2.5 + 0.25 = 8.75
            
            **Resolver UX = Y**:
            
            $$
            \\begin{bmatrix}
            2 & 1 & 1 \\\\
            0 & 3 & -1 \\\\
            0 & 0 & 2.5
            \\end{bmatrix}
            \\begin{bmatrix}
            x \\\\
            y \\\\
            z
            \\end{bmatrix} =
            \\begin{bmatrix}
            5 \\\\
            -1 \\\\
            8.75
            \\end{bmatrix}
            $$
            
            - z = 8.75 / 2.5 = 3.5
            - y = (-1 + z) / 3 = (-1 + 3.5) / 3 = 2.5 / 3 = 0.833...
            - x = (5 - y - z) / 2 = (5 - 0.833 - 3.5) / 2 = 0.667...
            
            ## Vantagens e Desvantagens
            
            **Vantagens**:
            - Eficiente para resolver m√∫ltiplos sistemas com a mesma matriz de coeficientes
            - √ötil para calcular determinantes e inversas
            - Computacionalmente eficiente
            
            **Desvantagens**:
            - Requer armazenamento adicional para as matrizes L e U
            - Pode ser inst√°vel para matrizes mal condicionadas sem pivoteamento
            """
        },
        "Interpreta√ß√£o Geom√©trica": {
            "content": """
            # Interpreta√ß√£o Geom√©trica de Sistemas Lineares
            
            ## Sistemas 2√ó2
            
            Em um sistema com duas equa√ß√µes e duas inc√≥gnitas, cada equa√ß√£o representa uma reta no plano cartesiano.
            
            **Poss√≠veis configura√ß√µes**:
            
            1. **SPD (Sistema Poss√≠vel e Determinado)**:
               - As retas se intersectam em um √∫nico ponto
               - Este ponto representa a √∫nica solu√ß√£o do sistema
               - Exemplo: x + y = 3 e x - y = 1
               
            2. **SPI (Sistema Poss√≠vel e Indeterminado)**:
               - As retas s√£o coincidentes (sobrepostas)
               - Todos os pontos da reta s√£o solu√ß√µes do sistema
               - Exemplo: 2x + 3y = 6 e 4x + 6y = 12
               
            3. **SI (Sistema Imposs√≠vel)**:
               - As retas s√£o paralelas e n√£o coincidentes
               - N√£o h√° nenhum ponto comum, ou seja, n√£o h√° solu√ß√£o
               - Exemplo: x + y = 3 e x + y = 5
            
            ## Sistemas 3√ó3
            
            Em um sistema com tr√™s equa√ß√µes e tr√™s inc√≥gnitas, cada equa√ß√£o representa um plano no espa√ßo tridimensional.
            
            **Poss√≠veis configura√ß√µes**:
            
            1. **SPD (Sistema Poss√≠vel e Determinado)**:
               - Os tr√™s planos se intersectam em um √∫nico ponto
               - Este ponto √© a √∫nica solu√ß√£o do sistema
               
            2. **SPI (Sistema Poss√≠vel e Indeterminado)**:
               - Os planos se intersectam em uma reta (dois planos paralelos intersectados por um terceiro)
               - Ou se intersectam em um plano (tr√™s planos coincidentes)
               - As solu√ß√µes formam uma reta ou um plano
               
            3. **SI (Sistema Imposs√≠vel)**:
               - Os planos n√£o possuem ponto comum de interse√ß√£o
               - Pode ocorrer quando temos planos paralelos ou quando a interse√ß√£o de dois planos √© paralela ao terceiro
            
            ## Rela√ß√£o com o Espa√ßo Vetorial
            
            - As linhas da matriz de coeficientes podem ser vistas como vetores
            - O determinante da matriz est√° relacionado ao volume do paralelep√≠pedo formado por estes vetores
            - Um determinante zero indica que os vetores s√£o linearmente dependentes
            - Para sistemas homog√™neos (AX = 0), o conjunto solu√ß√£o forma um subespa√ßo vetorial
            """
        },
        "Aplica√ß√µes de Sistemas Lineares": {
            "content": """
            # Aplica√ß√µes de Sistemas Lineares
            
            Os sistemas de equa√ß√µes lineares s√£o ferramentas fundamentais em diversas √°reas. Veja algumas aplica√ß√µes importantes:
            
            ## F√≠sica e Engenharia
            
            ### An√°lise de Circuitos El√©tricos
            - Leis de Kirchhoff: correntes em um n√≥ e tens√µes em um la√ßo
            - Cada equa√ß√£o representa a conserva√ß√£o de corrente ou tens√£o
            
            **Exemplo**: Para um circuito com tr√™s malhas, podemos ter:
            ```
            R‚ÇÅI‚ÇÅ + R‚ÇÇ(I‚ÇÅ - I‚ÇÇ) = V‚ÇÅ
            R‚ÇÇ(I‚ÇÇ - I‚ÇÅ) + R‚ÇÉI‚ÇÇ + R‚ÇÑ(I‚ÇÇ - I‚ÇÉ) = 0
            R‚ÇÑ(I‚ÇÉ - I‚ÇÇ) + R‚ÇÖI‚ÇÉ = V‚ÇÇ
            ```
            
            ### Est√°tica e Din√¢mica
            - Equil√≠brio de for√ßas e momentos em estruturas
            - An√°lise de treli√ßas e vigas
            
            **Exemplo**: Para um sistema com tr√™s for√ßas desconhecidas:
            ```
            F‚ÇÅcos(Œ∏‚ÇÅ) + F‚ÇÇcos(Œ∏‚ÇÇ) + F‚ÇÉcos(Œ∏‚ÇÉ) = 0
            F‚ÇÅsin(Œ∏‚ÇÅ) + F‚ÇÇsin(Œ∏‚ÇÇ) + F‚ÇÉsin(Œ∏‚ÇÉ) = 0
            r‚ÇÅ√óF‚ÇÅ + r‚ÇÇ√óF‚ÇÇ + r‚ÇÉ√óF‚ÇÉ = 0
            ```
            
            ### Transfer√™ncia de Calor
            - Modelagem de problemas de condu√ß√£o t√©rmica
            - M√©todos de diferen√ßas finitas para equa√ß√µes diferenciais
            
            ## Economia
            
            ### An√°lise de Insumo-Produto de Leontief
            - Modelagem das interdepend√™ncias entre diferentes setores da economia
            - Previs√£o de como mudan√ßas em um setor afetam outros setores
            
            **Exemplo**: Em uma economia com tr√™s setores:
            ```
            x‚ÇÅ = a‚ÇÅ‚ÇÅx‚ÇÅ + a‚ÇÅ‚ÇÇx‚ÇÇ + a‚ÇÅ‚ÇÉx‚ÇÉ + d‚ÇÅ
            x‚ÇÇ = a‚ÇÇ‚ÇÅx‚ÇÅ + a‚ÇÇ‚ÇÇx‚ÇÇ + a‚ÇÇ‚ÇÉx‚ÇÉ + d‚ÇÇ
            x‚ÇÉ = a‚ÇÉ‚ÇÅx‚ÇÅ + a‚ÇÉ‚ÇÇx‚ÇÇ + a‚ÇÉ‚ÇÉx‚ÇÉ + d‚ÇÉ
            ```
            Onde x‚ÇÅ √© a produ√ß√£o do setor i, a_ij √© quanto do produto i √© usado para produzir uma unidade do produto j, e d_i √© a demanda externa.
            
            ### Otimiza√ß√£o e Programa√ß√£o Linear
            - Maximiza√ß√£o de lucro ou minimiza√ß√£o de custos
            - Aloca√ß√£o √≥tima de recursos limitados
            
            ## Qu√≠mica
            
            ### Balanceamento de Equa√ß√µes Qu√≠micas
            - Cada elemento forma uma equa√ß√£o linear
            - Os coeficientes estequiom√©tricos s√£o as inc√≥gnitas
            
            **Exemplo**: Para a rea√ß√£o C‚ÇÉH‚Çà + O‚ÇÇ ‚Üí CO‚ÇÇ + H‚ÇÇO
            ```
            3a = c       (para o carbono)
            8a = 2e      (para o hidrog√™nio)
            2b = 2c + e  (para o oxig√™nio)
            ```
            
            ### Equil√≠brio Qu√≠mico
            - Determina√ß√£o de concentra√ß√µes em equil√≠brio
            
            ## Computa√ß√£o Gr√°fica
            
            ### Transforma√ß√µes Geom√©tricas
            - Rota√ß√£o, transla√ß√£o e escala de objetos
            - Representadas como transforma√ß√µes matriciais
            
            ### Renderiza√ß√£o 3D
            - Sistemas para determinar proje√ß√µes de objetos 3D em telas 2D
            
            ## Problemas de Mistura
            
            ### Farmacologia
            - Mistura de componentes para atingir concentra√ß√µes espec√≠ficas
            - Formula√ß√£o de medicamentos
            
            **Exemplo**: Um farmac√™utico precisa preparar 100ml de uma solu√ß√£o com 25% de um princ√≠pio ativo, usando solu√ß√µes de 10%, 20% e 40%.
            ```
            x + y + z = 100
            0.1x + 0.2y + 0.4z = 25
            ```
            
            ### Processamento de Alimentos
            - Mistura de ingredientes para atingir perfis nutricionais
            
            ## Tr√°fego e Transporte
            
            ### Fluxo de Redes
            - Modelagem de fluxo de tr√°fego em redes de transporte
            - Otimiza√ß√£o de rotas
            """
        },
        "Sistemas Homog√™neos": {
            "content": """
            # Sistemas Lineares Homog√™neos
            
            Um sistema homog√™neo tem a forma AX = 0 (todos os termos independentes s√£o nulos).
            
            ## Propriedades
            
            1. Todo sistema homog√™neo √© poss√≠vel (sempre admite a solu√ß√£o trivial X = 0)
            2. Um sistema homog√™neo tem solu√ß√µes n√£o-triviais se e somente se det(A) = 0
            3. O conjunto de todas as solu√ß√µes forma um espa√ßo vetorial
            4. A dimens√£o do espa√ßo de solu√ß√µes √© n - posto(A), onde n √© o n√∫mero de inc√≥gnitas
            
            ## Interpreta√ß√£o Geom√©trica
            
            - Em 2D: se det(A) = 0, as equa√ß√µes representam a mesma reta passando pela origem
            - Em 3D: se det(A) = 0, os planos se intersectam em uma reta ou um plano passando pela origem
            
            ## Aplica√ß√µes
            
            - **Espa√ßos nulos**:
            O n√∫cleo (ou kernel) de uma transforma√ß√£o linear √© o espa√ßo das solu√ß√µes de AX = 0
              - Fundamental em √°lgebra linear e geometria
            
            - **Autovalores e autovetores**:
              - Um autovetor v de uma matriz A satisfaz Av = Œªv, ou (A - ŒªI)v = 0
              - Encontrar os autovetores envolve resolver sistemas homog√™neos
            
            - **Equa√ß√µes diferenciais**:
              - Sistemas de equa√ß√µes diferenciais lineares homog√™neas t√™m solu√ß√µes da forma X = e^(Œªt)v
              - Onde Œª √© um autovalor e v √© um autovetor associado
            
            ## Exemplo
            
            Considere o sistema homog√™neo:
            
            $$
            \\begin{align}
            2x + 3y - z &= 0\\\\
            4x + 6y - 2z &= 0\\\\
            -2x - 3y + z &= 0
            \\end{align}
            $$
            
            Observe que a terceira equa√ß√£o √© o oposto da primeira. Al√©m disso, a segunda equa√ß√£o √© um m√∫ltiplo da primeira (multiplicada por 2).
            
            O determinante da matriz dos coeficientes √© zero, o que confirma que o sistema tem solu√ß√µes n√£o-triviais.
            
            O posto da matriz √© 1, e temos 3 inc√≥gnitas, ent√£o a dimens√£o do espa√ßo de solu√ß√µes √© 3 - 1 = 2.
            
            **Solu√ß√£o param√©trica**:
            
            Podemos expressar z e y em termos de x:
            Da primeira equa√ß√£o: z = 2x + 3y
            
            Substituindo na segunda e terceira equa√ß√µes, verificamos que s√£o satisfeitas para qualquer valor de x e y.
            
            Ent√£o a solu√ß√£o geral √©:
            ```
            z = 2x + 3y
            ```
            Onde x e y s√£o par√¢metros livres.
            
            Alternativamente, podemos parametrizar como:
            ```
            x = s
            y = t
            z = 2s + 3t
            ```
            Onde s e t s√£o par√¢metros livres.
            """
        },
        "Estabilidade Num√©rica": {
            "content": """
            # Estabilidade Num√©rica em Sistemas Lineares
            
            ## N√∫mero de Condi√ß√£o
            
            O n√∫mero de condi√ß√£o de uma matriz A, denotado por cond(A), mede a sensibilidade da solu√ß√£o a pequenas perturba√ß√µes nos dados:
            
            $$\\text{cond}(A) = \\|A\\| \\cdot \\|A^{-1}\\|$$
            
            Para a norma-2, isso √© equivalente √† raz√£o entre o maior e o menor valor singular:
            
            $$\\text{cond}_2(A) = \\frac{\\sigma_{\\max}}{\\sigma_{\\min}}$$
            
            **Interpreta√ß√£o**:
            - Um n√∫mero de condi√ß√£o pr√≥ximo de 1 indica uma matriz bem condicionada
            - Um n√∫mero de condi√ß√£o grande indica uma matriz mal condicionada
            - Um n√∫mero de condi√ß√£o infinito indica uma matriz singular
            
            ## Efeitos do Mal Condicionamento
            
            Um sistema mal condicionado tem as seguintes caracter√≠sticas:
            
            - Pequenas perturba√ß√µes nos dados (coeficientes ou termos independentes) podem causar grandes mudan√ßas na solu√ß√£o
            - Erros de arredondamento podem ser amplificados significativamente
            - M√©todos iterativos podem convergir lentamente ou divergir
            
            **Exemplo**:
            
            Considere o sistema:
            
            $$
            \\begin{align}
            1.000x + 0.999y &= 1.999\\\\
            0.999x + 0.998y &= 1.997
            \\end{align}
            $$
            
            A solu√ß√£o exata √© x = y = 1. No entanto, se mudarmos ligeiramente o termo independente da primeira equa√ß√£o para 2.000 (uma perturba√ß√£o de apenas 0.001), a solu√ß√£o muda drasticamente para aproximadamente x = 2, y = 0.
            
            ## Estrat√©gias para Sistemas Mal Condicionados
            
            1. **Pr√©-condicionamento**:
               - Multiplicar o sistema por uma matriz de pr√©-condicionamento para reduzir o n√∫mero de condi√ß√£o
               - Exemplo: ao inv√©s de resolver Ax = b, resolver M‚Åª¬πAx = M‚Åª¬πb, onde M √© escolhida para que M‚Åª¬πA seja bem condicionada
            
            2. **Refinamento iterativo**:
               - Ap√≥s obter uma solu√ß√£o aproximada xÃÉ, calcular o res√≠duo r = b - AxÃÉ
               - Resolver Ad = r para obter a corre√ß√£o d
               - Atualizar a solu√ß√£o: x = xÃÉ + d
               - Repetir, se necess√°rio
            
            3. **M√©todos de regulariza√ß√£o**:
               - Tikhonov: minimizar ||Ax - b||¬≤ + Œª||x||¬≤, onde Œª √© o par√¢metro de regulariza√ß√£o
               - SVD truncada: ignorar componentes associados a valores singulares muito pequenos
            
            4. **Aumentar a precis√£o dos c√°lculos**:
               - Usar aritm√©tica de precis√£o dupla ou estendida
               - Implementar algoritmos que minimizam a propaga√ß√£o de erros de arredondamento
            
            5. **Uso de decomposi√ß√µes est√°veis**:
               - Decomposi√ß√£o QR
               - Decomposi√ß√£o de valores singulares (SVD)
            
            ## Exemplo de An√°lise
            
            Para a matriz:
            
            $$
            A = \\begin{bmatrix}
            1 & 1 \\\\
            1 & 1.0001
            \\end{bmatrix}
            $$
            
            1. O determinante √© muito pequeno: det(A) = 0.0001
            2. O n√∫mero de condi√ß√£o √© aproximadamente 40000
            3. Uma pequena perturba√ß√£o de 0.01% em A pode causar uma mudan√ßa de 400% na solu√ß√£o
            
            **Verifica√ß√£o**:
            - Se Ax = b, onde b = [2, 2.0001]·µÄ, a solu√ß√£o √© x = [1, 1]·µÄ
            - Se mudarmos b para [2.0002, 2.0001]·µÄ (uma mudan√ßa de 0.01%), a solu√ß√£o muda para aproximadamente x = [2, 0]·µÄ
            """
        },
        "Aplica√ß√µes Avan√ßadas": {
            "content": """
            # Aplica√ß√µes Avan√ßadas de Sistemas Lineares
            
            ## Ajuste de Curvas e Superf√≠cies
            
            O m√©todo dos m√≠nimos quadrados leva a sistemas lineares para encontrar os coeficientes que minimizam o erro quadr√°tico.
            
            **Exemplo**: Para ajustar um polin√¥mio de grau n a m pontos (x_i, y_i), formamos o sistema normal:
            
            $$
            \\begin{bmatrix}
            m & \\sum x_i & \\sum x_i^2 & \\cdots & \\sum x_i^n \\\\
            \\sum x_i & \\sum x_i^2 & \\sum x_i^3 & \\cdots & \\sum x_i^{n+1} \\\\
            \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\
            \\sum x_i^n & \\sum x_i^{n+1} & \\sum x_i^{n+2} & \\cdots & \\sum x_i^{2n}
            \\end{bmatrix}
            \\begin{bmatrix}
            a_0 \\\\
            a_1 \\\\
            \\vdots \\\\
            a_n
            \\end{bmatrix} =
            \\begin{bmatrix}
            \\sum y_i \\\\
            \\sum x_i y_i \\\\
            \\vdots \\\\
            \\sum x_i^n y_i
            \\end{bmatrix}
            $$
            
            ## Processamento de Imagens
            
            Sistemas lineares s√£o usados em:
            
            1. **Filtros lineares**:
               - Convolu√ß√£o para suaviza√ß√£o, detec√ß√£o de bordas, etc.
               - As m√°scaras de convolu√ß√£o podem ser representadas como sistemas lineares
            
            2. **Restaura√ß√£o de imagens**:
               - Elimina√ß√£o de ru√≠do e desfoque atrav√©s de sistemas lineares regularizados
               - Exemplo: para um modelo de degrada√ß√£o g = Hf + n, onde g √© a imagem observada, f √© a imagem original e n √© o ru√≠do,
                 a restaura√ß√£o pode ser formulada como um sistema linear (H^T H + ŒªI)f = H^T g
            
            3. **Compress√£o**:
               - Transformadas como DCT (usada em JPEG) podem ser implementadas como sistemas lineares
            
            ## Simula√ß√£o de Fluidos
            
            As equa√ß√µes de Navier-Stokes discretizadas levam a grandes sistemas lineares:
            
            1. **M√©todo da press√£o**:
               - A equa√ß√£o de Poisson para a press√£o leva a um sistema linear Ap = b
               - A matriz A √© geralmente esparsa e pode ser resolvida eficientemente com m√©todos especializados
            
            2. **M√©todos de elementos finitos**:
               - Discretizam o dom√≠nio em elementos menores
               - Resultam em sistemas lineares para velocidades e press√µes
            
            ## Tomografia Computadorizada
            
            A reconstru√ß√£o de imagens em tomografia (CT scan) envolve a resolu√ß√£o de sistemas lineares:
            
            1. **Problema de reconstru√ß√£o**:
               - Relaciona as medidas de atenua√ß√£o com os coeficientes de atenua√ß√£o nos voxels
               - Leva a um grande sistema linear Ax = b, onde x s√£o os coeficientes desconhecidos
            
            2. **M√©todos de solu√ß√£o**:
               - Retroproje√ß√£o filtrada
               - M√©todos iterativos como ART (Algebraic Reconstruction Technique), que resolve o sistema de forma iterativa
            
            ## Redes Neurais
            
            Embora as redes neurais modernas sejam n√£o-lineares, muitas opera√ß√µes internas envolvem sistemas lineares:
            
            1. **Camadas lineares**:
               - A opera√ß√£o Wx + b, onde W √© a matriz de pesos, x √© a entrada e b √© o vi√©s
            
            2. **Backpropagation**:
               - O c√°lculo de gradientes envolve opera√ß√µes lineares com matrizes Jacobianas
            
            ## Criptografia
            
            Alguns m√©todos criptogr√°ficos s√£o baseados em sistemas lineares:
            
            1. **Cifra de Hill**:
               - Usa multiplica√ß√£o de matrizes para cifrar blocos de texto
               - A seguran√ßa depende da dificuldade de resolver certos sistemas lineares
            
            2. **Sistemas baseados em reticulados**:
               - Baseiam-se na dificuldade de resolver certos sistemas lineares em reticulados
               - Exemplo: o problema SVP (Shortest Vector Problem) est√° relacionado a encontrar a solu√ß√£o de norma m√≠nima para um sistema homog√™neo
            """
        },
        "Sistemas N√£o-Lineares": {
            "content": """
            # Sistemas N√£o-Lineares
            
            Em contraste com sistemas lineares, os sistemas n√£o-lineares envolvem fun√ß√µes n√£o-lineares das vari√°veis.
            
            ## Caracter√≠sticas dos Sistemas N√£o-Lineares
            
            1. **M√∫ltiplas solu√ß√µes**:
               - Podem ter 0, 1, um n√∫mero finito ou infinitas solu√ß√µes
               - Dif√≠ceis de classificar a priori
            
            2. **Comportamento complexo**:
               - Podem exibir caos, bifurca√ß√µes e outros fen√¥menos complexos
               - Pequenas mudan√ßas nos par√¢metros podem levar a mudan√ßas dr√°sticas nas solu√ß√µes
            
            3. **M√©todos de resolu√ß√£o**:
               - Geralmente iterativos e n√£o garantem encontrar todas as solu√ß√µes
               - Podem convergir para diferentes solu√ß√µes dependendo do ponto inicial
            
            ## T√©cnicas de Lineariza√ß√£o
            
            Muitos m√©todos para resolver sistemas n√£o-lineares envolvem alguma forma de lineariza√ß√£o:
            
            1. **Expans√£o de Taylor**:
               - Aproximar localmente as fun√ß√µes n√£o-lineares por suas expans√µes de Taylor de primeira ordem
               - Exemplo: f(x) ‚âà f(x‚ÇÄ) + f'(x‚ÇÄ)(x - x‚ÇÄ)
            
            2. **M√©todo de Newton multidimensional**:
               - Generaliza√ß√£o do m√©todo de Newton para sistemas
               - Resolve iterativamente sistemas lineares da forma J(x‚Çñ)Œîx = -F(x‚Çñ)
               - Onde J √© a matriz Jacobiana das derivadas parciais
            
            ## M√©todo de Newton
            
            Para um sistema F(X) = 0 com n equa√ß√µes e n inc√≥gnitas:
            
            1. Come√ßar com uma aproxima√ß√£o inicial X‚ÇÄ
            2. Para cada itera√ß√£o k:
               - Calcular F(X‚Çñ) e a matriz Jacobiana J(X‚Çñ)
               - Resolver o sistema linear J(X‚Çñ)Œîx = -F(X‚Çñ)
               - Atualizar: X‚Çñ‚Çä‚ÇÅ = X‚Çñ + Œîx
               - Verificar converg√™ncia
            
            **Exemplo**:
            
            Para o sistema:
            
            $$
            \\begin{align}
            x^2 + y^2 &= 25\\\\
            x^2 - y^2 &= 7
            \\end{align}
            $$
            
            A matriz Jacobiana √©:
            
            $$
            J(x, y) = \\begin{bmatrix}
            2x & 2y \\\\
            2x & -2y
            \\end{bmatrix}
            $$
            
            Partindo de (4, 3), calculamos:
            
            - F(4, 3) = [(4¬≤ + 3¬≤) - 25, (4¬≤ - 3¬≤) - 7] = [0, 0]
            
            J√° encontramos uma solu√ß√£o exata: (4, 3).
            
            Se tiv√©ssemos partido de (3, 4), ter√≠amos encontrado outra solu√ß√£o: (4, -3).
            
            ## M√©todo do Ponto Fixo
            
            1. Reescrever o sistema na forma X = g(X)
            2. Escolher uma aproxima√ß√£o inicial X‚ÇÄ
            3. Iterar X‚Çñ‚Çä‚ÇÅ = g(X‚Çñ) at√© a converg√™ncia
            
            **Condi√ß√£o de converg√™ncia**:
            O m√©todo converge se ||‚àág(X)|| < 1 na vizinhan√ßa da solu√ß√£o.
            
            ## Aplica√ß√µes de Sistemas N√£o-Lineares
            
            1. **F√≠sica e engenharia**:
               - Equil√≠brio de estruturas com comportamento n√£o-linear
               - Circuitos n√£o-lineares
               - Din√¢mica de fluidos
            
            2. **Qu√≠mica**:
               - Equil√≠brio qu√≠mico com m√∫ltiplas rea√ß√µes
               - Cin√©tica de rea√ß√µes complexas
            
            3. **Economia**:
               - Modelos econ√¥micos com fun√ß√µes n√£o-lineares de utilidade ou produ√ß√£o
               - Equil√≠brio de mercado com demanda e oferta n√£o-lineares
            
            4. **Biologia**:
               - Modelos de popula√ß√µes com intera√ß√µes n√£o-lineares
               - Redes bioqu√≠micas
            """
        },
        "Sistemas Lineares em Programa√ß√£o Linear": {
            "content": """
            # Sistemas Lineares em Programa√ß√£o Linear
            
            A programa√ß√£o linear (PL) √© uma t√©cnica de otimiza√ß√£o para problemas com fun√ß√£o objetivo linear e restri√ß√µes lineares.
            
            ## Formula√ß√£o Padr√£o
            
            Um problema de PL tem a forma:
            
            **Maximizar** (ou Minimizar): c‚ÇÅx‚ÇÅ + c‚ÇÇx‚ÇÇ + ... + c‚Çôx‚Çô
            
            **Sujeito a**:
            ```
            a‚ÇÅ‚ÇÅx‚ÇÅ + a‚ÇÅ‚ÇÇx‚ÇÇ + ... + a‚ÇÅ‚Çôx‚Çô ‚â§ b‚ÇÅ
            a‚ÇÇ‚ÇÅx‚ÇÅ + a‚ÇÇ‚ÇÇx‚ÇÇ + ... + a‚ÇÇ‚Çôx‚Çô ‚â§ b‚ÇÇ
            ...
            a‚Çò‚ÇÅx‚ÇÅ + a‚Çò‚ÇÇx‚ÇÇ + ... + a‚Çò‚Çôx‚Çô ‚â§ b‚Çò
            ```
            
            E: x‚ÇÅ, x‚ÇÇ, ..., x‚Çô ‚â• 0
            
            ## M√©todo Simplex
            
            O m√©todo simplex resolve problemas de PL percorrendo os v√©rtices do poliedro formado pelas restri√ß√µes:
            
            1. Converter para a forma padr√£o, introduzindo vari√°veis de folga:
               ```
               a‚ÇÅ‚ÇÅx‚ÇÅ + ... + a‚ÇÅ‚Çôx‚Çô + s‚ÇÅ = b‚ÇÅ
               ...
               a‚Çò‚ÇÅx‚ÇÅ + ... + a‚Çò‚Çôx‚Çô + s‚Çò = b‚Çò
               ```
            
            2. Encontrar uma solu√ß√£o b√°sica vi√°vel inicial
            
            3. Verificar se a solu√ß√£o atual √© √≥tima:
               - Se todos os coeficientes na fun√ß√£o objetivo s√£o n√£o-negativos, a solu√ß√£o √© √≥tima
               - Caso contr√°rio, selecionar uma vari√°vel para entrar na base
            
            4. Determinar qual vari√°vel sai da base usando o teste da raz√£o
            
            5. Atualizar a solu√ß√£o e retornar ao passo 3
            
            ## Rela√ß√£o com Sistemas Lineares
            
            Em cada itera√ß√£o do simplex, resolvemos um sistema linear:
            
            1. As equa√ß√µes de restri√ß√£o formam um sistema linear
            2. A opera√ß√£o piv√¥ para trocar as vari√°veis b√°sicas √© essencialmente elimina√ß√£o gaussiana
            3. A atualiza√ß√£o da fun√ß√£o objetivo tamb√©m envolve opera√ß√µes de √°lgebra linear
            
            ## Dualidade
            
            Para cada problema de PL (primal), existe um problema dual associado:
            
            - Se o primal √© um problema de maximiza√ß√£o, o dual √© de minimiza√ß√£o, e vice-versa
            - As vari√°veis no dual correspondem √†s restri√ß√µes no primal
            - As restri√ß√µes no dual correspondem √†s vari√°veis no primal
            
            **Exemplo**:
            
            Primal:
            ```
            Maximizar: 3x‚ÇÅ + 2x‚ÇÇ
            Sujeito a:
              x‚ÇÅ + x‚ÇÇ ‚â§ 8
              2x‚ÇÅ + x‚ÇÇ ‚â§ 10
              x‚ÇÅ, x‚ÇÇ ‚â• 0
            ```
            
            Dual:
            ```
            Minimizar: 8y‚ÇÅ + 10y‚ÇÇ
            Sujeito a:
              y‚ÇÅ + 2y‚ÇÇ ‚â• 3
              y‚ÇÅ + y‚ÇÇ ‚â• 2
              y‚ÇÅ, y‚ÇÇ ‚â• 0
            ```
            
            ## Aplica√ß√µes
            
            1. **Aloca√ß√£o de recursos**:
               - Determinar quanto produzir de cada produto para maximizar o lucro
               - Exemplo: Uma f√°brica produz dois produtos que requerem diferentes quantidades de tr√™s recursos limitados
            
            2. **Dieta e mistura**:
               - Encontrar a combina√ß√£o √≥tima de alimentos para minimizar o custo enquanto satisfaz requisitos nutricionais
               - Similar a problemas de mistura em qu√≠mica e engenharia
            
            3. **Transporte e log√≠stica**:
               - Otimizar o fluxo de bens de m√∫ltiplas origens para m√∫ltiplos destinos
               - Minimizar o custo total de transporte
            
            4. **Fluxo de rede**:
               - Encontrar o fluxo m√°ximo em uma rede com capacidades limitadas
               - Ou o fluxo de custo m√≠nimo que satisfaz demandas
            
            5. **Planejamento financeiro**:
               - Otimizar portfolios de investimento
               - Balancear risco e retorno sob restri√ß√µes or√ßament√°rias
            """
        }
    }
    
    # Selecionar t√≥pico da teoria
    col1, col2 = st.columns([1, 3])
    
    with col1:
        selected_topic = st.radio(
            "T√≥picos:",
            list(theory_topics.keys()),
            key="theory_topic"
        )
        
        st.markdown("---")
        st.markdown("### Material de Apoio")
        
        # Bot√£o para baixar o material em PDF
        if st.button("üì• Baixar Material em PDF", key="download_pdf_btn"):
            st.success(f"Download de '{selected_topic}.pdf' iniciado! (Simula√ß√£o)")
        
        # Bot√£o para acessar videoaulas
        if st.button("üé¨ Acessar Videoaulas", key="video_btn"):
            st.session_state.page = "V√≠deoaulas"
            st.rerun()
            
        # Bot√£o para adicionar aos favoritos
        if st.button("‚≠ê Adicionar aos Favoritos", key="fav_btn"):
            if "favorites" not in st.session_state:
                st.session_state.favorites = {"reference_cards": []}
            
            # Verificar se j√° est√° nos favoritos
            already_saved = False
            for card in st.session_state.favorites.get("reference_cards", []):
                if card.get("title") == selected_topic:
                    already_saved = True
                    break
                    
            if already_saved:
                st.info(f"'{selected_topic}' j√° est√° nos seus favoritos.")
            else:
                st.session_state.favorites.setdefault("reference_cards", []).append(
                    {"title": selected_topic, "date": datetime.datetime.now().strftime("%d/%m/%Y %H:%M")}
                )
                st.success(f"'{selected_topic}' adicionado aos seus favoritos!")
        
        # Lista de t√≥picos relacionados
        # st.markdown("### T√≥picos Relacionados")
        # related_topics = {
        #     "Introdu√ß√£o aos Sistemas Lineares": ["Classifica√ß√£o de Sistemas Lineares", "Aplica√ß√µes de Sistemas Lineares"],
        #     "Classifica√ß√£o de Sistemas Lineares": ["Introdu√ß√£o aos Sistemas Lineares", "Teorema de Rouch√©-Capelli", "Interpreta√ß√£o Geom√©trica"],
        #     "M√©todo de Elimina√ß√£o de Gauss": ["M√©todo de Gauss-Jordan", "M√©todo da Matriz Inversa"],
        #     "Regra de Cramer": ["M√©todo da Matriz Inversa", "Classifica√ß√£o de Sistemas Lineares"],
        #     "M√©todo da Matriz Inversa": ["Regra de Cramer", "Decomposi√ß√£o LU"],
        #     "M√©todo de Gauss-Jordan": ["M√©todo de Elimina√ß√£o de Gauss", "M√©todos Iterativos"],
        #     "M√©todos Iterativos": ["M√©todo de Gauss-Jordan", "Estabilidade Num√©rica"],
        #     "Decomposi√ß√£o LU": ["M√©todo da Matriz Inversa", "Estabilidade Num√©rica"],
        #     "Interpreta√ß√£o Geom√©trica": ["Classifica√ß√£o de Sistemas Lineares", "Aplica√ß√µes de Sistemas Lineares"],
        #     "Aplica√ß√µes de Sistemas Lineares": ["Introdu√ß√£o aos Sistemas Lineares", "Aplica√ß√µes Avan√ßadas"],
        #     "Sistemas Homog√™neos": ["Classifica√ß√£o de Sistemas Lineares", "Interpreta√ß√£o Geom√©trica"],
        #     "Estabilidade Num√©rica": ["M√©todos Iterativos", "Decomposi√ß√£o LU"],
        #     "Aplica√ß√µes Avan√ßadas": ["Aplica√ß√µes de Sistemas Lineares", "Sistemas N√£o-Lineares"],
        #     "Sistemas N√£o-Lineares": ["Aplica√ß√µes Avan√ßadas", "M√©todos Iterativos"],
        #     "Sistemas Lineares em Programa√ß√£o Linear": ["Aplica√ß√µes de Sistemas Lineares", "Aplica√ß√µes Avan√ßadas"]
        # }
        
        # for topic in related_topics.get(selected_topic, []):
        #     if st.button(f"üìå {topic}", key=f"related_{topic}"):
        #         # Atualizar t√≥pico selecionado
        #         st.session_state.theory_topic = topic
        #         st.rerun()
    
    with col2:
        # Atualizar hist√≥rico de t√≥picos estudados
        if selected_topic not in st.session_state.user_progress["topics_studied"]:
            st.session_state.user_progress["topics_studied"].append(selected_topic)
            
        # Exibir conte√∫do do t√≥pico selecionado
        st.markdown(theory_topics[selected_topic]["content"])
        
        # Adicionar bot√£o para exerc√≠cios relacionados
        st.markdown("---")
        st.markdown("### Quer praticar este conte√∫do?")
        
        if st.button("‚úèÔ∏è Praticar com Exerc√≠cios Relacionados", key="practice_btn"):
            st.session_state.page = "Exerc√≠cios"
            # Tentar mapear o t√≥pico para um tipo de exerc√≠cio
            topic_to_exercise = {
                "M√©todo de Elimina√ß√£o de Gauss": "Sistemas 3x3",
                "Regra de Cramer": "Sistemas 2x2",
                "Aplica√ß√µes de Sistemas Lineares": "Aplica√ß√µes",
                "M√©todos Iterativos": "M√©todos Iterativos",
                "Sistemas Homog√™neos": "Sistemas SPI"
            }
            
            st.session_state.exercise_topic = topic_to_exercise.get(selected_topic, "Geral")
            st.rerun()

# Modificar o main() para incluir a inicializa√ß√£o correta de current_topic
def main():
    # Inicializar estados da sess√£o se n√£o existirem
    if "page" not in st.session_state:
        st.session_state.page = "In√≠cio"
    
    if "user_progress" not in st.session_state:
        st.session_state.user_progress = {
            "exercises_completed": 0,
            "correct_answers": 0,
            "topics_studied": [],
            "difficulty_levels": {"F√°cil": 0, "M√©dio": 0, "Dif√≠cil": 0},
            "last_login": datetime.datetime.now().strftime("%d/%m/%Y"),
            "streak": 1
        }
    
    if "favorites" not in st.session_state:
        st.session_state.favorites = {
            "examples": [],
            "reference_cards": [],
            "exercises": []
        }
        
    # Se n√£o houver current_topic definido, inicialize
    if "current_topic" not in st.session_state:
        st.session_state.current_topic = "Introdu√ß√£o aos Sistemas Lineares"
    
    # Barra lateral
    with st.sidebar:
        st.image("calculo.png", width=280)
        st.title("MENU")
        
        # Se√ß√µes principais
        main_sections = {
            "In√≠cio": "üè†",
            "Resolver Sistema": "üßÆ",
            "Teoria": "üìö",
            "Exerc√≠cios": "‚úèÔ∏è",
            "Exemplos": "üìã",
            "Refer√™ncia R√°pida": "üìù",
            "V√≠deoaulas": "üé¨",
            "Meu Progresso": "üìä"
        }
        
        for section, icon in main_sections.items():
            if st.sidebar.button(f"{icon} {section}", key=f"btn_{section}", use_container_width=True):
                st.session_state.page = section
                # Usar rerun em vez de experimental_rerun
                st.rerun()
        
        st.sidebar.markdown("---")
        
        # Configura√ß√µes da aplica√ß√£o
        with st.sidebar.expander("‚öôÔ∏è Configura√ß√µes"):
            st.checkbox("Modo escuro", value=False, key="dark_mode")
            st.checkbox("Mostrar passos detalhados", value=True, key="show_steps_config")
            st.select_slider("Precis√£o num√©rica", options=["Baixa", "M√©dia", "Alta"], value="M√©dia", key="precision")
            st.slider("Tamanho da fonte", min_value=80, max_value=120, value=100, step=10, format="%d%%", key="font_size")
        
        # Informa√ß√µes do usu√°rio
        st.sidebar.markdown("---")
        col1, col2 = st.sidebar.columns([1, 3])
        with col1:
            st.image("calculo.png", width=60)
        with col2:
            st.markdown("**Usu√°rio:** Estudante")
            st.markdown(f"**Progresso:** {int(min(st.session_state.user_progress['exercises_completed'] / 20 * 100, 100))}%")
        
        # Exibir streak
        st.sidebar.markdown(f"üî• **Sequ√™ncia de estudos:** {st.session_state.user_progress['streak']} dias")
        
        st.sidebar.markdown("---")
        st.sidebar.markdown("v1.0.0 | ¬© 2025 SistemaSolver")
    
    # Conte√∫do principal
    if st.session_state.page == "In√≠cio":
        show_home_page()
    elif st.session_state.page == "Resolver Sistema":
        show_solver_page()
    elif st.session_state.page == "Teoria":
        show_theory_page()
    elif st.session_state.page == "Exerc√≠cios":
        show_exercises_page()
    elif st.session_state.page == "Exemplos":
        show_examples_page()
    elif st.session_state.page == "Refer√™ncia R√°pida":
        show_reference_page()
    elif st.session_state.page == "V√≠deoaulas":
        show_videos_page()
    elif st.session_state.page == "Meu Progresso":
        show_progress_page()

# Fun√ß√£o para a p√°gina de resolver sistema
def show_solver_page():
    # Inicializar vari√°veis de estado se n√£o existirem
    if "solver_show_steps" not in st.session_state:
        st.session_state.solver_show_steps = True
    
    # Controle de abas
    if "solver_current_tab" not in st.session_state:
        st.session_state.solver_current_tab = "Inserir Sistema"
        
    st.markdown('<h1 class="main-header">Resolver Sistema Linear</h1>', unsafe_allow_html=True)
    
    # Abas de navega√ß√£o
    tabs = ["üìù Inserir Sistema", "üîç Resultados", "üìä Visualiza√ß√£o"]
    selected_tab = st.radio("", tabs, horizontal=True, 
                            index=tabs.index(f"{'üìù Inserir Sistema' if st.session_state.solver_current_tab == 'Inserir Sistema' else 'üîç Resultados' if st.session_state.solver_current_tab == 'Resultados' else 'üìä Visualiza√ß√£o'}"),
                            key="solver_tab_selector")
    
    # Atualizar a aba atual
    if "üìù Inserir Sistema" in selected_tab:
        st.session_state.solver_current_tab = "Inserir Sistema"
    elif "üîç Resultados" in selected_tab:
        st.session_state.solver_current_tab = "Resultados"
    else:
        st.session_state.solver_current_tab = "Visualiza√ß√£o"
    
    # Conte√∫do da aba atual
    if st.session_state.solver_current_tab == "Inserir Sistema":
        st.markdown('<h2 class="sub-header">Insira seu sistema de equa√ß√µes lineares</h2>', unsafe_allow_html=True)
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            system_input_method = st.radio(
                "M√©todo de entrada:",
                ["Manual (Coeficientes)", "Equa√ß√µes (Texto)", "Matriz Aumentada"],
                horizontal=True
            )
            
        with col2:
            vars_count = st.number_input("N√∫mero de vari√°veis:", min_value=2, max_value=6, value=2)
        
        # Inicializar listas vazias para coeficientes e constantes
        coeffs = []
        constants = []
        
        if system_input_method == "Manual (Coeficientes)":
            equations_count = st.number_input("N√∫mero de equa√ß√µes:", min_value=1, max_value=8, value=vars_count)
            
            st.markdown("### Insira os coeficientes e termos independentes")
            
            var_names = ["x", "y", "z", "w", "v", "u"][:vars_count]
            
            for i in range(equations_count):
                cols = st.columns(vars_count + 1)
                
                eq_coeffs = []
                for j in range(vars_count):
                    with cols[j]:
                        coef = st.number_input(
                            f"Coeficiente de {var_names[j]} na equa√ß√£o {i+1}:",
                            value=1.0 if i == j else 0.0,
                            step=0.1,
                            format="%.2f",
                            key=f"coef_{i}_{j}"
                        )
                        eq_coeffs.append(coef)
                
                with cols[-1]:
                    const = st.number_input(
                        f"Termo independente da equa√ß√£o {i+1}:",
                        value=0.0,
                        step=0.1,
                        format="%.2f",
                        key=f"const_{i}"
                    )
                
                coeffs.append(eq_coeffs)
                constants.append(const)
                
                # Mostrar a equa√ß√£o formatada
                eq_str = format_equation(eq_coeffs, var_names, const)
                st.write(f"Equa√ß√£o {i+1}: {eq_str}")
                
        elif system_input_method == "Equa√ß√µes (Texto)":
            st.markdown("""
            Insira cada equa√ß√£o em uma linha separada, usando a sintaxe:
            ```
            a*x + b*y + c*z = d
            ```
            Exemplo:
            ```
            2*x + 3*y = 5
            x - y = 1
            ```
            """)
            
            equations_text = st.text_area(
                "Equa√ß√µes (uma por linha):",
                height=150,
                help="Insira uma equa√ß√£o por linha. Use * para multiplica√ß√£o.",
                value="x + y = 10\n2*x - y = 5"
            )
            
            try:
                # Processar as equa√ß√µes de texto
                equations = equations_text.strip().split('\n')
                
                var_symbols = []
                for i in range(vars_count):
                    if i < len(["x", "y", "z", "w", "v", "u"]):
                        var_symbols.append(sp.symbols(["x", "y", "z", "w", "v", "u"][i]))
                
                for eq_text in equations:
                    if not eq_text.strip():
                        continue
                        
                    # Substituir = por - ( para padronizar
                    eq_text = eq_text.replace("=", "-(") + ")"
                    
                    # Converter para express√£o sympy
                    expr = sp.sympify(eq_text)
                    
                    # Extrair coeficientes
                    eq_coeffs = []
                    for var in var_symbols:
                        coef = expr.coeff(var)
                        eq_coeffs.append(float(coef))
                    
                    # Extrair termo constante
                    const = -float(expr.subs([(var, 0) for var in var_symbols]))
                    
                    coeffs.append(eq_coeffs)
                    constants.append(const)
                
                # Mostrar as equa√ß√µes interpretadas
                st.markdown("### Equa√ß√µes interpretadas:")
                for i, (eq_coef, eq_const) in enumerate(zip(coeffs, constants)):
                    var_names = ["x", "y", "z", "w", "v", "u"][:vars_count]
                    eq_str = format_equation(eq_coef, var_names, eq_const)
                    st.write(f"Equa√ß√£o {i+1}: {eq_str}")
                    
            except Exception as e:
                st.error(f"Erro ao processar as equa√ß√µes: {str(e)}")
                st.stop()
                
        else:  # Matriz Aumentada
            st.markdown("""
            Insira a matriz aumentada do sistema. Cada linha representa uma equa√ß√£o, e a √∫ltima coluna cont√©m os termos independentes.
            """)
            
            matrix_text = st.text_area(
                "Matriz aumentada (uma linha por equa√ß√£o):",
                height=150,
                help="Insira os elementos da matriz separados por espa√ßos, com uma linha por equa√ß√£o.",
                value="1 1 10\n2 -1 5"
            )
            
            try:
                # Processar a matriz aumentada
                matrix_rows = matrix_text.strip().split('\n')
                augmented_matrix = []
                
                for row_text in matrix_rows:
                    if not row_text.strip():
                        continue
                    
                    # Converter elementos para n√∫meros
                    elements = [float(e) for e in row_text.split()]
                    augmented_matrix.append(elements)
                
                # Verificar dimens√µes
                if any(len(row) != vars_count + 1 for row in augmented_matrix):
                    st.error(f"Erro: cada linha deve ter {vars_count + 1} elementos (coeficientes + termo independente).")
                    st.stop()
                
                # Extrair coeficientes e constantes
                coeffs = [row[:-1] for row in augmented_matrix]
                constants = [row[-1] for row in augmented_matrix]
                
                # Mostrar as equa√ß√µes interpretadas
                st.markdown("### Equa√ß√µes interpretadas:")
                for i, (eq_coef, eq_const) in enumerate(zip(coeffs, constants)):
                    var_names = ["x", "y", "z", "w", "v", "u"][:vars_count]
                    eq_str = format_equation(eq_coef, var_names, eq_const)
                    st.write(f"Equa√ß√£o {i+1}: {eq_str}")
                
            except Exception as e:
                st.error(f"Erro ao processar a matriz aumentada: {str(e)}")
                st.stop()
        
        # M√©todo de resolu√ß√£o
        st.markdown("### M√©todo de Resolu√ß√£o")
        
        col1, col2 = st.columns(2)
        
        with col1:
            solution_method = st.selectbox(
                "Escolha o m√©todo:",
                ["Elimina√ß√£o de Gauss", "Gauss-Jordan", "Regra de Cramer", "Matriz Inversa", 
                 "Decomposi√ß√£o LU", "Jacobi", "Gauss-Seidel", "Todos os M√©todos"],
                key="solution_method_select"
            )
            
        with col2:
            show_steps = st.checkbox("Mostrar passos detalhados", value=True, key="show_steps_checkbox")
        
        # Op√ß√µes extras para m√©todos iterativos
        max_iter = 50
        tolerance = 1e-6
        
        if solution_method in ["Jacobi", "Gauss-Seidel"]:
            col1, col2 = st.columns(2)
            with col1:
                max_iter = st.number_input("N√∫mero m√°ximo de itera√ß√µes:", min_value=5, max_value=100, value=50, key="max_iter_input")
            with col2:
                tolerance = st.number_input("Toler√¢ncia:", min_value=1e-10, max_value=1e-2, value=1e-6, format="%.1e", key="tolerance_input")
        
        # Verificar se temos dados suficientes para resolver
        solve_ready = len(coeffs) > 0 and len(constants) > 0 and len(coeffs[0]) == vars_count
        
        # Bot√£o para resolver
        solve_clicked = st.button("Resolver Sistema", type="primary", key="solve_btn", disabled=not solve_ready)
        
        if solve_clicked:
            # Criar a matriz e o vetor do sistema
            try:
                A, b = create_system_matrix(coeffs, constants, vars_count)
                
                # Guardar dados no estado da sess√£o
                st.session_state.system_solved = True
                st.session_state.A = A
                st.session_state.b = b
                st.session_state.vars_count = vars_count
                st.session_state.solution_method = solution_method
                st.session_state.solver_show_steps = show_steps
                st.session_state.max_iter = max_iter
                st.session_state.tolerance = tolerance
                st.session_state.system_classification = classify_system(A, b)
                
                # Computar solu√ß√µes pelos diferentes m√©todos
                results = {}
                
                with st.spinner("Resolvendo o sistema..."):
                    if solution_method in ["Elimina√ß√£o de Gauss", "Todos os M√©todos"]:
                        steps, solution = gaussian_elimination_steps(A, b)
                        results["Elimina√ß√£o de Gauss"] = {"steps": steps, "solution": solution}
                        
                    if solution_method in ["Gauss-Jordan", "Todos os M√©todos"]:
                        steps, solution = gauss_jordan_steps(A, b)
                        results["Gauss-Jordan"] = {"steps": steps, "solution": solution}
                        
                    if vars_count <= 4 and solution_method in ["Regra de Cramer", "Todos os M√©todos"]:
                        if A.shape[0] == A.shape[1]:  # Apenas para sistemas quadrados
                            steps, solution = cramer_rule(A, b, detailed=show_steps)
                            results["Regra de Cramer"] = {"steps": steps, "solution": solution}
                        
                    if solution_method in ["Matriz Inversa", "Todos os M√©todos"]:
                        if A.shape[0] == A.shape[1]:  # Apenas para sistemas quadrados
                            steps, solution = matrix_inverse_method(A, b, detailed=show_steps)
                            results["Matriz Inversa"] = {"steps": steps, "solution": solution}
                            
                    if solution_method in ["Decomposi√ß√£o LU", "Todos os M√©todos"]:
                        if A.shape[0] == A.shape[1]:  # Apenas para sistemas quadrados
                            steps, solution = lu_decomposition_method(A, b, detailed=show_steps)
                            results["Decomposi√ß√£o LU"] = {"steps": steps, "solution": solution}
                            
                    if solution_method in ["Jacobi", "Todos os M√©todos"]:
                        steps, solution = jacobi_iteration_method(A, b, max_iter=max_iter, tolerance=tolerance, detailed=show_steps)
                        results["Jacobi"] = {"steps": steps, "solution": solution}
                        
                    if solution_method in ["Gauss-Seidel", "Todos os M√©todos"]:
                        steps, solution = gauss_seidel_method(A, b, max_iter=max_iter, tolerance=tolerance, detailed=show_steps)
                        results["Gauss-Seidel"] = {"steps": steps, "solution": solution}
                        
                st.session_state.results = results
                
                # Atualizar progresso do usu√°rio
                if "user_progress" in st.session_state:
                    st.session_state.user_progress["exercises_completed"] += 1
                
                # Mostrar mensagem de sucesso e sugerir ir para a pr√≥xima aba
                st.success("Sistema resolvido com sucesso! Veja os resultados na aba 'Resultados'.")
                
                # Mudar para a aba de resultados automaticamente
                st.session_state.solver_current_tab = "Resultados"
                st.rerun()
                
            except Exception as e:
                st.error(f"Erro ao resolver o sistema: {str(e)}")
                st.session_state.system_solved = False

    elif st.session_state.solver_current_tab == "Resultados":
        # Verificar se um sistema foi resolvido
        if not hasattr(st.session_state, 'system_solved') or not st.session_state.system_solved:
            st.info("Insira e resolva um sistema na aba 'Inserir Sistema'")
            st.session_state.solver_current_tab = "Inserir Sistema"
            st.rerun()
        else:
            # C√≥digo da aba "Resultados"
            st.markdown('<h2 class="sub-header">Resultados da Resolu√ß√£o</h2>', unsafe_allow_html=True)
            
            # Exibir classifica√ß√£o do sistema
            st.markdown(f"**Classifica√ß√£o do Sistema:** {st.session_state.system_classification}")
            
            # Mostrar as equa√ß√µes do sistema
            st.markdown("### Sistema original:")
            var_names = ["x", "y", "z", "w", "v", "u"][:st.session_state.vars_count]
            A = st.session_state.A
            b = st.session_state.b
            
            for i in range(len(b)):
                eq_str = format_equation(A[i], var_names, b[i])
                st.write(f"Equa√ß√£o {i+1}: {eq_str}")
            
            # Exibir matriz aumentada
            with st.expander("Ver matriz aumentada", expanded=False):
                augmented = np.column_stack((A, b))
                st.markdown("**Matriz aumentada [A|b]:**")
                st.dataframe(pd.DataFrame(augmented, 
                                        columns=[f"{var}" for var in var_names] + ["b"],
                                        index=[f"Eq {i+1}" for i in range(len(b))]))
            
            # Exibir solu√ß√£o para cada m√©todo
            st.markdown("### Resultados por m√©todo:")
            
            for method, result in st.session_state.results.items():
                with st.expander(f"üìä {method}", expanded=method == st.session_state.solution_method):
                    steps = result["steps"]
                    solution = result["solution"]
                    
                    if solution is not None:
                        st.markdown("**Solu√ß√£o encontrada:**")
                        
                        # Criar dataframe da solu√ß√£o
                        solution_df = pd.DataFrame({
                            "Vari√°vel": var_names[:len(solution)],
                            "Valor": [float(val) for val in solution]
                        })
                        st.dataframe(solution_df)
                        
                        # Mostrar precis√£o da solu√ß√£o
                        residual = np.linalg.norm(np.dot(A, solution) - b)
                        st.markdown(f"**Res√≠duo:** {residual:.2e}")
                        
                        # Verifica√ß√£o r√°pida da solu√ß√£o
                        st.markdown("**Verifica√ß√£o r√°pida:**")
                        for i in range(len(b)):
                            calculated = np.dot(A[i], solution)
                            is_correct = abs(calculated - b[i]) < 1e-10
                            st.markdown(f"Equa√ß√£o {i+1}: {calculated:.4f} ‚âà {b[i]:.4f} {'‚úì' if is_correct else '‚úó'}")
                        
                    else:
                        st.write("N√£o foi poss√≠vel encontrar uma solu√ß√£o √∫nica por este m√©todo.")
                    
                    if st.session_state.solver_show_steps:
                        st.markdown("**Passos detalhados:**")
                        for step in steps:
                            st.write(step)
            
            # Adicionar interpreta√ß√£o da solu√ß√£o
            st.markdown("### Interpreta√ß√£o da Solu√ß√£o")
            
            if st.session_state.system_classification == "Sistema Poss√≠vel e Determinado (SPD)":
                st.success("O sistema possui uma √∫nica solu√ß√£o, que satisfaz todas as equa√ß√µes simultaneamente.")
                
                # Obter uma solu√ß√£o v√°lida (qualquer uma)
                solution = None
                for result in st.session_state.results.values():
                    if result["solution"] is not None:
                        solution = result["solution"]
                        break
                
                if solution is not None:
                    st.markdown("### Verifica√ß√£o Detalhada")
                    
                    for i in range(len(b)):
                        eq_result = np.dot(A[i], solution)
                        is_correct = abs(eq_result - b[i]) < 1e-10
                        
                        eq_str = format_equation(A[i], var_names, b[i])
                        
                        substitution = " + ".join([f"{A[i][j]:.2f} √ó {solution[j]:.4f}" for j in range(len(solution)) if abs(A[i][j]) > 1e-10])
                        if not substitution:
                            substitution = "0"
                        
                        result_str = f"{eq_result:.4f} ‚âà {b[i]:.4f}" if is_correct else f"{eq_result:.4f} ‚â† {b[i]:.4f}"
                        
                        if is_correct:
                            st.success(f"Equa√ß√£o {i+1}: {eq_str}\n{substitution} = {result_str} ‚úì")
                        else:
                            st.error(f"Equa√ß√£o {i+1}: {eq_str}\n{substitution} = {result_str} ‚úó")
                            
            elif st.session_state.system_classification == "Sistema Poss√≠vel e Indeterminado (SPI)":
                st.info("""
                O sistema possui infinitas solu√ß√µes. Isso ocorre porque h√° menos equa√ß√µes linearmente independentes
                do que vari√°veis, criando um espa√ßo de solu√ß√µes poss√≠veis.
                
                A solu√ß√£o pode ser expressa de forma param√©trica, onde uma ou mais vari√°veis s√£o expressas em termos
                de par√¢metros livres.
                """)
                
                # Tentar obter solu√ß√£o simb√≥lica
                try:
                    A = st.session_state.A
                    b = st.session_state.b
                    symbolic_solution, var_symbols = sympy_solve_system(A, b)
                    
                    if symbolic_solution:
                        st.markdown("### Solu√ß√£o Param√©trica")
                        
                        if isinstance(symbolic_solution, dict):
                            for var, expr in symbolic_solution.items():
                                st.latex(f"{sp.latex(var)} = {sp.latex(expr)}")
                        else:
                            st.latex(sp.latex(symbolic_solution))
                except:
                    st.warning("N√£o foi poss√≠vel obter uma representa√ß√£o param√©trica da solu√ß√£o.")
                    
            else:  # Sistema Imposs√≠vel
                st.error("""
                O sistema n√£o possui solu√ß√£o. Isso ocorre porque as equa√ß√µes s√£o inconsistentes entre si,
                ou seja, n√£o existe um conjunto de valores para as vari√°veis que satisfa√ßa todas as equa√ß√µes
                simultaneamente.
                
                Geometricamente, isso pode ser interpretado como:
                - Em 2D: retas paralelas que nunca se intersectam
                - Em 3D: planos sem ponto comum de interse√ß√£o
                """)
                
            # Adicionar bot√µes de a√ß√£o para a solu√ß√£o
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üìä Ver Visualiza√ß√£o", key="view_viz_btn"):
                    st.session_state.solver_current_tab = "Visualiza√ß√£o"
                    st.rerun()

            with col2:
                if st.button("üìã Salvar nos Exemplos", key="save_example_btn"):
                    if "favorites" not in st.session_state:
                        st.session_state.favorites = {"examples": []}
                    
                    # Criar um exemplo para salvar
                    example = {
                        "title": f"Sistema {A.shape[0]}√ó{A.shape[1]} ({st.session_state.system_classification.split(' ')[2]})",
                        "A": A.tolist(),
                        "b": b.tolist(),
                        "date": datetime.datetime.now().strftime("%d/%m/%Y %H:%M")
                    }
                    
                    st.session_state.favorites["examples"].append(example)
                    st.success("Sistema salvo nos exemplos favoritos!")
            
            with col3:
                if st.button("üì• Exportar Solu√ß√£o", key="export_solution_btn"):
                    st.success("Solu√ß√£o exportada! (Simula√ß√£o)")
    
    elif st.session_state.solver_current_tab == "Visualiza√ß√£o":
        # Verificar se um sistema foi resolvido
        if not hasattr(st.session_state, 'system_solved') or not st.session_state.system_solved:
            st.info("Insira e resolva um sistema na aba 'Inserir Sistema'")
            st.session_state.solver_current_tab = "Inserir Sistema"
            st.rerun()
        else:
            # C√≥digo da aba "Visualiza√ß√£o"
            st.markdown('<h2 class="sub-header">Visualiza√ß√£o Gr√°fica</h2>', unsafe_allow_html=True)
            
            if st.session_state.vars_count == 2:
                try:
                    fig = plot_2d_system(st.session_state.A, st.session_state.b)
                    if fig:
                        st.pyplot(fig)
                        
                        # Adicionar interpreta√ß√£o geom√©trica
                        st.markdown("### Interpreta√ß√£o Geom√©trica")
                        
                        if st.session_state.system_classification == "Sistema Poss√≠vel e Determinado (SPD)":
                            st.markdown("""
                            Cada equa√ß√£o do sistema representa uma reta no plano cartesiano.
                            A solu√ß√£o do sistema √© o ponto de interse√ß√£o entre estas retas.
                            
                            As coordenadas deste ponto satisfazem simultaneamente todas as equa√ß√µes do sistema.
                            """)
                        elif st.session_state.system_classification == "Sistema Poss√≠vel e Indeterminado (SPI)":
                            st.markdown("""
                            As retas s√£o coincidentes (sobrepostas), o que significa que qualquer
                            ponto em uma das retas √© uma solu√ß√£o v√°lida para o sistema.
                            
                            Geometricamente, isso ocorre quando as equa√ß√µes representam a mesma reta
                            ou quando algumas das equa√ß√µes s√£o redundantes (combina√ß√µes lineares de outras).
                            """)
                        else:  # SI
                            st.markdown("""
                            As retas s√£o paralelas, o que indica que n√£o h√° ponto de interse√ß√£o
                            e, portanto, o sistema n√£o possui solu√ß√£o.
                            
                            Este √© um caso onde as equa√ß√µes s√£o inconsistentes: n√£o existe um par de valores
                            (x, y) que satisfa√ßa todas as equa√ß√µes simultaneamente.
                            """)
                    else:
                        st.warning("N√£o foi poss√≠vel gerar a visualiza√ß√£o do sistema.")
                except Exception as e:
                    st.error(f"Erro ao gerar o gr√°fico: {str(e)}")
                    
            elif st.session_state.vars_count == 3:
                try:
                    fig = plot_3d_system(st.session_state.A, st.session_state.b)
                    if fig:
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Adicionar interpreta√ß√£o geom√©trica
                        st.markdown("### Interpreta√ß√£o Geom√©trica")
                        
                        if st.session_state.system_classification == "Sistema Poss√≠vel e Determinado (SPD)":
                            st.markdown("""
                            Cada equa√ß√£o do sistema representa um plano no espa√ßo tridimensional.
                            A solu√ß√£o do sistema √© o ponto √∫nico de interse√ß√£o entre estes planos.
                            
                            As coordenadas deste ponto satisfazem simultaneamente todas as equa√ß√µes do sistema.
                            """)
                        elif st.session_state.system_classification == "Sistema Poss√≠vel e Indeterminado (SPI)":
                            st.markdown("""
                            Os planos se intersectam em uma reta ou em um plano comum,
                            resultando em infinitas solu√ß√µes poss√≠veis.
                            
                            Isso ocorre quando temos menos equa√ß√µes linearmente independentes
                            do que vari√°veis. As solu√ß√µes formam um espa√ßo geom√©trico (reta ou plano).
                            """)
                        else:  # SI
                            st.markdown("""
                            Os planos n√£o possuem um ponto comum de interse√ß√£o,
                            o que indica que o sistema n√£o tem solu√ß√£o.
                            
                            Geometricamente, isso pode ocorrer quando temos tr√™s planos paralelos
                            ou quando a interse√ß√£o de dois planos √© uma reta paralela ao terceiro plano.
                            """)
                    else:
                        st.warning("N√£o foi poss√≠vel gerar a visualiza√ß√£o 3D do sistema.")
                except Exception as e:
                    st.error(f"Erro ao gerar o gr√°fico 3D: {str(e)}")
                    
            else:
                st.info("""
                A visualiza√ß√£o gr√°fica est√° dispon√≠vel apenas para sistemas com 2 ou 3 vari√°veis.
                
                Para sistemas com mais vari√°veis, voc√™ pode usar outras t√©cnicas de an√°lise,
                como a redu√ß√£o do sistema ou a proje√ß√£o em subespa√ßos.
                """)
                
                # Oferecer alternativas para visualiza√ß√£o
                st.markdown("### Alternativas para An√°lise Visual")
                
                viz_options = st.radio(
                    "Escolha uma alternativa:",
                    ["Matriz Ampliada", "Gr√°fico de Sparsidade", "Nenhuma"],
                    horizontal=True
                )
                
                if viz_options == "Matriz Ampliada":
                    A = st.session_state.A
                    b = st.session_state.b
                    augmented = np.column_stack((A, b))
                    
                    fig, ax = plt.subplots(figsize=(10, 6))
                    cax = ax.matshow(augmented, cmap='coolwarm')
                    
                    # Adicionar colorbar
                    fig.colorbar(cax)
                    
                    # Adicionar r√≥tulos
                    var_names = ["x", "y", "z", "w", "v", "u"][:A.shape[1]] + ["b"]
                    ax.set_xticks(np.arange(A.shape[1] + 1))
                    ax.set_xticklabels(var_names)
                    ax.set_yticks(np.arange(A.shape[0]))
                    ax.set_yticklabels([f"Eq {i+1}" for i in range(A.shape[0])])
                    
                    plt.title("Visualiza√ß√£o da Matriz Ampliada")
                    st.pyplot(fig)
                    
                elif viz_options == "Gr√°fico de Sparsidade":
                    A = st.session_state.A
                    
                    fig, ax = plt.subplots(figsize=(10, 6))
                    ax.spy(A, markersize=15, color='#1E88E5')
                    
                    # Adicionar r√≥tulos
                    var_names = ["x", "y", "z", "w", "v", "u"][:A.shape[1]]
                    ax.set_xticks(np.arange(A.shape[1]))
                    ax.set_xticklabels(var_names)
                    ax.set_yticks(np.arange(A.shape[0]))
                    ax.set_yticklabels([f"Eq {i+1}" for i in range(A.shape[0])])
                    
                    plt.title("Gr√°fico de Sparsidade dos Coeficientes")
                    st.pyplot(fig)
                    
def show_exercises_page():
    st.markdown('<h1 class="main-header">Exerc√≠cios de Sistemas Lineares</h1>', unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4 = st.tabs(["üìù Praticar", "üèÜ Desafios", "üìã Hist√≥rico", "üìä Progresso"])
    
    with tab1:
        st.markdown('<h2 class="sub-header">Pratique seus conhecimentos</h2>', unsafe_allow_html=True)
        
        # Configura√ß√µes do exerc√≠cio
        col1, col2, col3 = st.columns(3)
        
        with col1:
            difficulty = st.select_slider(
                "N√≠vel de dificuldade:",
                options=["F√°cil", "M√©dio", "Dif√≠cil"],
                value="M√©dio"
            )
            
        with col2:
            exercise_topics = [
                "Geral",
                "Sistemas 2x2",
                "Sistemas 3x3",
                "Sistemas 4x4",
                "Sistemas SPI",
                "Sistemas SI",
                "M√©todos Iterativos",
                "Mal Condicionados",
                "Aplica√ß√µes"
            ]
            
            topic = st.selectbox(
                "T√≥pico:",
                exercise_topics,
                index=0,
                key="exercise_topic_selector"
            )
            
        with col3:
            method = st.selectbox(
                "M√©todo de resolu√ß√£o:",
                ["Qualquer m√©todo", "Elimina√ß√£o de Gauss", "Regra de Cramer", 
                 "Matriz Inversa", "Gauss-Jordan", "M√©todos Iterativos"],
                index=0
            )
        
        # Gerar novo exerc√≠cio
        if "current_exercise" not in st.session_state or st.button("Gerar Novo Exerc√≠cio", key="generate_exercise_btn"):
            try:
                if "problem" in topic.lower():
                    # Exerc√≠cio de aplica√ß√£o
                    exercise_data = get_practice_exercise(difficulty, topic)
                    st.session_state.current_exercise = {
                        "problem": exercise_data.get("problem", ""),
                        "A": exercise_data.get("A"),
                        "b": exercise_data.get("b"),
                        "vars": exercise_data.get("vars", []),
                        "solution": None,  # Ser√° calculado abaixo
                        "difficulty": difficulty,
                        "topic": topic
                    }
                    
                    # Calcular solu√ß√£o
                    try:
                        if st.session_state.current_exercise["A"] is not None and st.session_state.current_exercise["b"] is not None:
                            A = st.session_state.current_exercise["A"]
                            b = st.session_state.current_exercise["b"]
                            
                            system_type = classify_system(A, b)
                            st.session_state.current_exercise["system_type"] = system_type
                            
                            if system_type == "Sistema Poss√≠vel e Determinado (SPD)":
                                try:
                                    solution = np.linalg.solve(A, b)
                                    st.session_state.current_exercise["solution"] = solution
                                except:
                                    _, solution = gaussian_elimination_steps(A, b)
                                    st.session_state.current_exercise["solution"] = solution
                    except:
                        st.session_state.current_exercise["system_type"] = "Desconhecido"
                        
                else:
                    # Exerc√≠cio normal
                    A, b, question, equations, solution, system_type = get_practice_exercise(difficulty, topic)
                    st.session_state.current_exercise = {
                        "A": A,
                        "b": b,
                        "question": question,
                        "equations": equations,
                        "solution": solution,
                        "difficulty": difficulty,
                        "topic": topic,
                        "system_type": system_type
                    }
            except Exception as e:
                st.error(f"Erro ao gerar exerc√≠cio: {str(e)}")
                if "current_exercise" not in st.session_state:
                    st.session_state.current_exercise = {
                        "question": "Erro ao gerar exerc√≠cio",
                        "equations": [],
                        "difficulty": difficulty,
                        "topic": topic
                    }
        
        # Mostrar o exerc√≠cio atual
        if "problem" in st.session_state.current_exercise:
            # Mostrar exerc√≠cio de aplica√ß√£o
            st.markdown(f"### Problema de Aplica√ß√£o ({st.session_state.current_exercise['difficulty']})")
            
            st.markdown(f"#### {st.session_state.current_exercise['problem']}")
            
            with st.expander("Ver dica", expanded=False):
                st.markdown("""
                **Dica**: Para resolver esse tipo de problema:
                1. Identifique as vari√°veis envolvidas
                2. Configure as equa√ß√µes do sistema
                3. Resolva o sistema usando o m√©todo mais adequado
                """)
                
                if st.session_state.current_exercise["A"] is not None and st.session_state.current_exercise["vars"] is not None:
                    st.markdown("**Sistema associado:**")
                    A = st.session_state.current_exercise["A"]
                    b = st.session_state.current_exercise["b"]
                    var_names = st.session_state.current_exercise["vars"]
                    
                    for i in range(min(len(b), A.shape[0])):
                        eq_str = format_equation(A[i], var_names[:A.shape[1]], b[i])
                        st.write(f"Equa√ß√£o {i+1}: {eq_str}")
            
        else:
            # Mostrar exerc√≠cio normal
            st.markdown(f"### {st.session_state.current_exercise['question']} ({st.session_state.current_exercise['difficulty']})")
            
            for i, eq in enumerate(st.session_state.current_exercise['equations']):
                st.markdown(f"{i+1}. {eq}")
            
            with st.expander("Ver dica", expanded=False):
                if "system_type" in st.session_state.current_exercise:
                    system_type = st.session_state.current_exercise["system_type"]
                    st.markdown(f"**Classifica√ß√£o do sistema**: {system_type}")
                    
                    if system_type == "Sistema Poss√≠vel e Determinado (SPD)":
                        method_recommendation = ""
                        if st.session_state.current_exercise["A"].shape[0] == st.session_state.current_exercise["A"].shape[1]:
                            method_recommendation = "Voc√™ pode usar qualquer m√©todo (Elimina√ß√£o de Gauss, Regra de Cramer, Matriz Inversa)."
                        else:
                            method_recommendation = "Como o sistema n√£o √© quadrado, √© recomendado usar o m√©todo de Elimina√ß√£o de Gauss."
                            
                        st.markdown(f"**Dica**: Este sistema tem solu√ß√£o √∫nica. {method_recommendation}")
                    
                    elif system_type == "Sistema Poss√≠vel e Indeterminado (SPI)":
                        st.markdown("""
                        **Dica**: Este sistema tem infinitas solu√ß√µes. Voc√™ pode resolver escalonando a matriz e expressando algumas vari√°veis em termos de outras (par√¢metros).
                        """)
                    
                    else:  # SI
                        st.markdown("""
                        **Dica**: Verifique se o sistema tem solu√ß√£o. Um sistema √© imposs√≠vel quando cont√©m equa√ß√µes inconsistentes.
                        """)
        
        # Adicionar visualiza√ß√£o se for sistema 2x2 ou 3x3
        if "A" in st.session_state.current_exercise and st.session_state.current_exercise["A"] is not None:
            A = st.session_state.current_exercise["A"]
            b = st.session_state.current_exercise["b"]
            
            if A.shape[1] == 2:
                with st.expander("Visualiza√ß√£o Gr√°fica", expanded=False):
                    try:
                        fig = plot_2d_system(A, b)
                        if fig:
                            st.pyplot(fig)
                    except:
                        st.warning("N√£o foi poss√≠vel gerar a visualiza√ß√£o do sistema.")
            elif A.shape[1] == 3:
                with st.expander("Visualiza√ß√£o 3D", expanded=False):
                    try:
                        fig = plot_3d_system(A, b)
                        if fig:
                            st.plotly_chart(fig, use_container_width=True)
                    except:
                        st.warning("N√£o foi poss√≠vel gerar a visualiza√ß√£o 3D do sistema.")
        
        # Campo para resposta do usu√°rio
        st.markdown("### Sua resposta")
        
        solution_type = st.radio(
            "Tipo de sistema:",
            ["Sistema Poss√≠vel e Determinado (SPD)", "Sistema Poss√≠vel e Indeterminado (SPI)", "Sistema Imposs√≠vel (SI)"],
            horizontal=True,
            key="solution_type_radio"
        )
        
        if solution_type == "Sistema Poss√≠vel e Determinado (SPD)":
            if "vars" in st.session_state.current_exercise and st.session_state.current_exercise["vars"]:
                var_names = st.session_state.current_exercise["vars"]
            else:
                var_names = ["x", "y", "z", "w"][:st.session_state.current_exercise["A"].shape[1]]
                
            cols = st.columns(min(4, len(var_names)))
            user_values = []
            
            for i, var in enumerate(var_names[:len(cols)]):
                with cols[i]:
                    val = st.number_input(f"Valor de {var}:", step=0.1, format="%.4f", key=f"answer_{var}")
                    user_values.append(val)
                    
            if len(var_names) > 4:
                cols = st.columns(min(4, len(var_names) - 4))
                for i, var in enumerate(var_names[4:4+len(cols)]):
                    with cols[i]:
                        val = st.number_input(f"Valor de {var}:", step=0.1, format="%.4f", key=f"answer_{var}")
                        user_values.append(val)
            
        else:  # SPI ou SI
            user_answer = st.text_area(
                "Explique por que o sistema √© SPI ou SI e, se for SPI, escreva a solu√ß√£o param√©trica:",
                height=100,
                placeholder="Ex: 'O sistema √© SPI porque...' ou 'O sistema √© SI porque...'"
            )
        
        # Verificar resposta
        if st.button("Verificar Resposta", key="check_answer_btn"):
            if solution_type == "Sistema Poss√≠vel e Determinado (SPD)":
                if "solution" in st.session_state.current_exercise and st.session_state.current_exercise["solution"] is not None:
                    solution = st.session_state.current_exercise["solution"]
                    
                    if len(user_values) != len(solution):
                        st.error("O n√∫mero de valores inseridos n√£o corresponde ao n√∫mero de inc√≥gnitas.")
                    else:
                        correct = True
                        for u, s in zip(user_values, solution):
                            if abs(u - s) > 1e-2:
                                correct = False
                                break
                                
                        if correct:
                            st.success("‚úÖ Correto! Sua solu√ß√£o est√° correta.")
                            
                            # Atualizar estat√≠sticas
                            st.session_state.user_progress["exercises_completed"] += 1
                            st.session_state.user_progress["correct_answers"] += 1
                            st.session_state.user_progress["difficulty_levels"][difficulty] += 1
                            
                            # Mostrar verifica√ß√£o
                            if "A" in st.session_state.current_exercise and "b" in st.session_state.current_exercise:
                                A = st.session_state.current_exercise["A"]
                                b = st.session_state.current_exercise["b"]
                                
                                for i in range(len(b)):
                                    expected = b[i]
                                    calculated = np.dot(A[i], user_values)
                                    diff = abs(expected - calculated)
                                    
                                    if diff < 1e-10:
                                        st.write(f"Equa√ß√£o {i+1}: {calculated:.4f} = {expected:.4f} ‚úì")
                                    else:
                                        st.write(f"Equa√ß√£o {i+1}: {calculated:.4f} ‚âà {expected:.4f} (erro: {diff:.4e})")
                        else:
                            st.error("‚ùå Incorreto. Verifique seus c√°lculos e tente novamente.")
                            
                            # Atualizar estat√≠sticas
                            st.session_state.user_progress["exercises_completed"] += 1
                else:
                    if "system_type" in st.session_state.current_exercise:
                        expected_type = st.session_state.current_exercise["system_type"]
                        if expected_type == solution_type:
                            st.success("‚úÖ Classifica√ß√£o correta do sistema!")
                            
                            # Atualizar estat√≠sticas
                            st.session_state.user_progress["exercises_completed"] += 1
                            st.session_state.user_progress["correct_answers"] += 1
                        else:
                            st.error(f"‚ùå Classifica√ß√£o incorreta. O sistema √© um {expected_type}.")
                            
                            # Atualizar estat√≠sticas
                            st.session_state.user_progress["exercises_completed"] += 1
                    else:
                        st.warning("N√£o foi poss√≠vel verificar a resposta. Tente outro exerc√≠cio.")
            else:  # SPI ou SI
                if "system_type" in st.session_state.current_exercise:
                    expected_type = st.session_state.current_exercise["system_type"]
                    if expected_type == solution_type:
                        st.success("‚úÖ Classifica√ß√£o correta do sistema!")
                        
                        # Verificar explica√ß√£o b√°sica
                        if solution_type == "Sistema Poss√≠vel e Indeterminado (SPI)" and "par√¢metr" in user_answer.lower():
                            st.success("‚úÖ Sua explica√ß√£o sobre par√¢metros est√° correta!")
                        elif solution_type == "Sistema Imposs√≠vel (SI)" and ("inconsist" in user_answer.lower() or "incompat√≠vel" in user_answer.lower()):
                            st.success("‚úÖ Sua explica√ß√£o sobre inconsist√™ncia est√° correta!")
                        else:
                            st.info("Sua resposta est√° parcialmente correta. Certifique-se de explicar adequadamente por que o sistema √© SPI ou SI.")
                        
                        # Atualizar estat√≠sticas
                        st.session_state.user_progress["exercises_completed"] += 1
                        st.session_state.user_progress["correct_answers"] += 1
                    else:
                        st.error(f"‚ùå Classifica√ß√£o incorreta. O sistema √© um {expected_type}.")
                        
                        # Atualizar estat√≠sticas
                        st.session_state.user_progress["exercises_completed"] += 1
                else:
                    st.warning("N√£o foi poss√≠vel verificar a resposta. Tente outro exerc√≠cio.")
                    
            # Salvar no hist√≥rico
            if "exercise_history" not in st.session_state:
                st.session_state.exercise_history = []
            
            # Verificar se este exerc√≠cio j√° est√° no hist√≥rico para n√£o duplicar
            already_in_history = False
            for entry in st.session_state.exercise_history:
                if "equations" in entry and "equations" in st.session_state.current_exercise:
                    if entry["equations"] == st.session_state.current_exercise["equations"]:
                        already_in_history = True
                        break
                elif "problem" in entry and "problem" in st.session_state.current_exercise:
                    if entry["problem"] == st.session_state.current_exercise["problem"]:
                        already_in_history = True
                        break
            
            if not already_in_history:
                history_entry = {
                    "date": datetime.datetime.now().strftime("%d/%m/%Y %H:%M"),
                    "difficulty": st.session_state.current_exercise["difficulty"],
                    "topic": st.session_state.current_exercise["topic"],
                    "correct": correct if solution_type == "Sistema Poss√≠vel e Determinado (SPD)" else (expected_type == solution_type)
                }
                
                if "equations" in st.session_state.current_exercise:
                    history_entry["equations"] = st.session_state.current_exercise["equations"]
                if "problem" in st.session_state.current_exercise:
                    history_entry["problem"] = st.session_state.current_exercise["problem"]
                
                st.session_state.exercise_history.append(history_entry)
        
        # Bot√£o para ver a solu√ß√£o
        if st.button("Ver Solu√ß√£o", key="show_solution_btn"):
            st.markdown("### Solu√ß√£o Detalhada")
            
            if "system_type" in st.session_state.current_exercise:
                system_type = st.session_state.current_exercise["system_type"]
                st.markdown(f"**Classifica√ß√£o do Sistema**: {system_type}")
            
            if "A" in st.session_state.current_exercise and st.session_state.current_exercise["A"] is not None:
                A = st.session_state.current_exercise["A"]
                b = st.session_state.current_exercise["b"]
                
                # Escolher m√©todo apropriado com base nas prefer√™ncias do usu√°rio
                solution_method = method if method != "Qualquer m√©todo" else "Elimina√ß√£o de Gauss"
                
                if solution_method == "Elimina√ß√£o de Gauss":
                    steps, solution = gaussian_elimination_steps(A, b)
                    
                    st.markdown("#### M√©todo de Elimina√ß√£o de Gauss:")
                    for step in steps:
                        st.write(step)
                    
                elif solution_method == "Regra de Cramer" and A.shape[0] == A.shape[1]:
                    steps, solution = cramer_rule(A, b, detailed=True)
                    
                    st.markdown("#### Regra de Cramer:")
                    for step in steps:
                        st.write(step)
                        
                elif solution_method == "Matriz Inversa" and A.shape[0] == A.shape[1]:
                    steps, solution = matrix_inverse_method(A, b, detailed=True)
                    
                    st.markdown("#### M√©todo da Matriz Inversa:")
                    for step in steps:
                        st.write(step)
                        
                elif solution_method == "Gauss-Jordan":
                    steps, solution = gauss_jordan_steps(A, b)
                    
                    st.markdown("#### M√©todo de Gauss-Jordan:")
                    for step in steps:
                        st.write(step)
                        
                elif solution_method == "M√©todos Iterativos":
                    # Verificar se √© apropriado para m√©todos iterativos
                    is_diag_dominant = True
                    for i in range(min(A.shape[0], A.shape[1])):
                        if i < A.shape[0] and i < A.shape[1]:
                            if abs(A[i, i]) <= np.sum(np.abs(A[i, :])) - abs(A[i, i]):
                                is_diag_dominant = False
                                break
                    
                    if is_diag_dominant:
                        steps_jacobi, solution_jacobi = jacobi_iteration_method(A, b, detailed=True)
                        steps_gauss_seidel, solution_gauss_seidel = gauss_seidel_method(A, b, detailed=True)
                        
                        st.markdown("#### M√©todo de Jacobi:")
                        for step in steps_jacobi:
                            st.write(step)
                            
                        st.markdown("#### M√©todo de Gauss-Seidel:")
                        for step in steps_gauss_seidel:
                            st.write(step)
                            
                        solution = solution_gauss_seidel  # Usar Gauss-Seidel como solu√ß√£o final
                    else:
                        st.warning("Este sistema n√£o √© diagonalmente dominante, o que pode fazer com que os m√©todos iterativos n√£o convirjam. Usando Elimina√ß√£o de Gauss como alternativa.")
                        steps, solution = gaussian_elimination_steps(A, b)
                        
                        st.markdown("#### M√©todo de Elimina√ß√£o de Gauss:")
                        for step in steps:
                            st.write(step)
                else:
                    steps, solution = gaussian_elimination_steps(A, b)
                    
                    st.markdown("#### M√©todo de Elimina√ß√£o de Gauss:")
                    for step in steps:
                        st.write(step)
                
                # Mostrar a solu√ß√£o final
                st.markdown("#### Solu√ß√£o Final:")
                
                if solution is not None:
                    if "vars" in st.session_state.current_exercise and st.session_state.current_exercise["vars"]:
                        var_names = st.session_state.current_exercise["vars"]
                    else:
                        var_names = ["x", "y", "z", "w"][:A.shape[1]]
                        
                    for i, var in enumerate(var_names):
                        if i < len(solution):
                            st.markdown(f"- {var} = {solution[i]:.4f}")
                else:
                    if system_type == "Sistema Poss√≠vel e Indeterminado (SPI)":
                        st.markdown("Este sistema possui infinitas solu√ß√µes. A solu√ß√£o pode ser expressa em forma param√©trica.")
                        
                        # Tentar obter solu√ß√£o simb√≥lica
                        try:
                            symbolic_solution, _ = sympy_solve_system(A, b)
                            
                            if symbolic_solution:
                                st.markdown("**Solu√ß√£o Param√©trica:**")
                                
                                if isinstance(symbolic_solution, dict):
                                    for var, expr in symbolic_solution.items():
                                        st.latex(f"{sp.latex(var)} = {sp.latex(expr)}")
                                else:
                                    st.latex(sp.latex(symbolic_solution))
                        except:
                            st.info("N√£o foi poss√≠vel determinar a forma param√©trica exata da solu√ß√£o.")
                    
                    elif system_type == "Sistema Imposs√≠vel (SI)":
                        st.markdown("Este sistema n√£o possui solu√ß√£o, pois as equa√ß√µes s√£o inconsistentes entre si.")
                    
            else:
                st.warning("N√£o foi poss√≠vel obter a solu√ß√£o para este exerc√≠cio.")
                
            # Salvar no hist√≥rico mesmo se o usu√°rio viu a solu√ß√£o sem tentar
            if "exercise_history" not in st.session_state:
                st.session_state.exercise_history = []
            
            # Verificar se este exerc√≠cio j√° est√° no hist√≥rico para n√£o duplicar
            already_in_history = False
            for entry in st.session_state.exercise_history:
                if "equations" in entry and "equations" in st.session_state.current_exercise:
                    if entry["equations"] == st.session_state.current_exercise["equations"]:
                        already_in_history = True
                        break
                elif "problem" in entry and "problem" in st.session_state.current_exercise:
                    if entry["problem"] == st.session_state.current_exercise["problem"]:
                        already_in_history = True
                        break
            
            if not already_in_history:
                history_entry = {
                    "date": datetime.datetime.now().strftime("%d/%m/%Y %H:%M"),
                    "difficulty": st.session_state.current_exercise["difficulty"],
                    "topic": st.session_state.current_exercise["topic"],
                    "correct": False,
                    "viewed_solution": True
                }
                
                if "equations" in st.session_state.current_exercise:
                    history_entry["equations"] = st.session_state.current_exercise["equations"]
                if "problem" in st.session_state.current_exercise:
                    history_entry["problem"] = st.session_state.current_exercise["problem"]
                
                st.session_state.exercise_history.append(history_entry)
                
            # Atualizar estat√≠sticas
            st.session_state.user_progress["exercises_completed"] += 1
    
    with tab2:
        st.markdown('<h2 class="sub-header">Desafios Semanais</h2>', unsafe_allow_html=True)
        
        # Lista de desafios
        challenges = [
            {
                "title": "Circuitos El√©tricos",
                "description": "Resolva um sistema de equa√ß√µes que modela um circuito com 5 correntes desconhecidas.",
                "difficulty": "Dif√≠cil",
                "points": 100,
                "deadline": "25/03/2025",
                "status": "Dispon√≠vel"
            },
            {
                "title": "Mistura Qu√≠mica",
                "description": "Encontre as quantidades exatas para uma mistura qu√≠mica com 4 componentes.",
                "difficulty": "M√©dio",
                "points": 75,
                "deadline": "27/03/2025",
                "status": "Dispon√≠vel"
            },
            {
                "title": "Balanceamento de Rea√ß√µes",
                "description": "Use sistemas lineares para balancear uma rea√ß√£o qu√≠mica complexa.",
                "difficulty": "M√©dio",
                "points": 50,
                "deadline": "30/03/2025",
                "status": "Dispon√≠vel"
            },
            {
                "title": "Sistema Mal Condicionado",
                "description": "Resolva um sistema linearmente independente, mas numericamente inst√°vel.",
                "difficulty": "Dif√≠cil",
                "points": 125,
                "deadline": "01/04/2025",
                "status": "Bloqueado"
            },
            {
                "title": "An√°lise de Tr√°fego",
                "description": "Modele e resolva um problema de fluxo de tr√°fego em uma rede com 6 n√≥s.",
                "difficulty": "Dif√≠cil",
                "points": 150,
                "deadline": "05/04/2025",
                "status": "Bloqueado"
            }
        ]
        
        # Mostrar desafios dispon√≠veis em cards
        st.markdown("### Desafios dispon√≠veis")
        
        for i, challenge in enumerate(challenges):
            if challenge["status"] == "Dispon√≠vel":
                with st.container():
                    st.markdown(f"""
                    <div style="background-color: #f8f9fa; border-radius: 10px; padding: 15px; margin-bottom: 15px; border-left: 5px solid #1E88E5;">
                        <h4 style="margin-top: 0;">{challenge["title"]} <span style="background-color: #e3f2fd; color: #1E88E5; padding: 3px 8px; border-radius: 10px; font-size: 0.8rem; float: right;">{challenge["difficulty"]} ‚Ä¢ {challenge["points"]} pontos</span></h4>
                        <p>{challenge["description"]}</p>
                        <p style="color: #666; font-size: 0.9rem;">Prazo: {challenge["deadline"]}</p>
                        <button style="background-color: #1E88E5; color: white; border: none; padding: 5px 15px; border-radius: 5px; cursor: pointer;">Iniciar Desafio</button>
                    </div>
                    """, unsafe_allow_html=True)
        
        # Mostrar desafios bloqueados
        st.markdown("### Pr√≥ximos desafios")
        
        for i, challenge in enumerate(challenges):
            if challenge["status"] == "Bloqueado":
                with st.container():
                    st.markdown(f"""
                    <div style="background-color: #f8f9fa; border-radius: 10px; padding: 15px; margin-bottom: 15px; border-left: 5px solid #9e9e9e; opacity: 0.7;">
                        <h4 style="margin-top: 0;">{challenge["title"]} <span style="background-color: #f5f5f5; color: #757575; padding: 3px 8px; border-radius: 10px; font-size: 0.8rem; float: right;">{challenge["difficulty"]} ‚Ä¢ {challenge["points"]} pontos</span></h4>
                        <p>{challenge["description"]}</p>
                        <p style="color: #666; font-size: 0.9rem;">Dispon√≠vel a partir de: {challenge["deadline"]}</p>
                        <button style="background-color: #9e9e9e; color: white; border: none; padding: 5px 15px; border-radius: 5px; cursor: not-allowed;">Bloqueado</button>
                    </div>
                    """, unsafe_allow_html=True)
        
        # Ranking
        st.markdown("### Ranking dos Desafios")
        
        ranking_data = [
            {"Posi√ß√£o": 1, "Usu√°rio": "MatematicaMaster", "Pontos": 425, "Desafios": 4},
            {"Posi√ß√£o": 2, "Usu√°rio": "AlgebraF√£", "Pontos": 350, "Desafios": 3},
            {"Posi√ß√£o": 3, "Usu√°rio": "SistemasGuru", "Pontos": 275, "Desafios": 3},
            {"Posi√ß√£o": 4, "Usu√°rio": "Estudante (voc√™)", "Pontos": 150, "Desafios": 2},
            {"Posi√ß√£o": 5, "Usu√°rio": "MatrizInversa", "Pontos": 125, "Desafios": 1},
        ]
        
        st.dataframe(
            pd.DataFrame(ranking_data),
            use_container_width=True,
            hide_index=True
        )
    
    with tab3:
        st.markdown('<h2 class="sub-header">Seu Hist√≥rico de Exerc√≠cios</h2>', unsafe_allow_html=True)
        
        if "exercise_history" not in st.session_state or not st.session_state.exercise_history:
            st.info("Seu hist√≥rico de exerc√≠cios aparecer√° aqui ap√≥s voc√™ resolver alguns problemas.")
        else:
            # Estat√≠sticas
            total = len(st.session_state.exercise_history)
            correct = sum(1 for e in st.session_state.exercise_history if e.get("correct", False))
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                st.markdown(f'<p class="metric-value">{total}</p>', unsafe_allow_html=True)
                st.markdown('<p class="metric-label">Total de Exerc√≠cios</p>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            with col2:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                st.markdown(f'<p class="metric-value">{correct}</p>', unsafe_allow_html=True)
                st.markdown('<p class="metric-label">Acertos</p>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            with col3:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                st.markdown(f'<p class="metric-value">{int(correct/total*100) if total > 0 else 0}%</p>', unsafe_allow_html=True)
                st.markdown('<p class="metric-label">Taxa de Acerto</p>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Filtros
            col1, col2 = st.columns(2)
            
            with col1:
                filter_difficulty = st.multiselect(
                    "Filtrar por dificuldade:",
                    ["F√°cil", "M√©dio", "Dif√≠cil"],
                    default=["F√°cil", "M√©dio", "Dif√≠cil"]
                )
                
            with col2:
                filter_status = st.multiselect(
                    "Filtrar por status:",
                    ["Correto", "Incorreto", "Visualizado"],
                    default=["Correto", "Incorreto", "Visualizado"]
                )
            
            # Filtrar hist√≥rico
            filtered_history = []
            for entry in st.session_state.exercise_history:
                if entry.get("difficulty") in filter_difficulty:
                    status = "Visualizado" if entry.get("viewed_solution", False) else ("Correto" if entry.get("correct", False) else "Incorreto")
                    if status in filter_status:
                        filtered_history.append(entry)
            
            # Tabela de hist√≥rico
            if filtered_history:
                history_data = []
                for i, exercise in enumerate(filtered_history[::-1]):  # Mais recente primeiro
                    status = "Visualizado" if exercise.get("viewed_solution", False) else ("Correto" if exercise.get("correct", False) else "Incorreto")
                    
                    question = ""
                    if "equations" in exercise and exercise["equations"]:
                        question = "<br>".join(exercise["equations"])
                    elif "problem" in exercise:
                        question = exercise["problem"][:100] + "..." if len(exercise["problem"]) > 100 else exercise["problem"]
                    
                    history_data.append({
                        "Data": exercise.get("date", ""),
                        "Dificuldade": exercise.get("difficulty", ""),
                        "T√≥pico": exercise.get("topic", ""),
                        "Quest√£o": question,
                        "Resultado": status
                    })
                
                history_df = pd.DataFrame(history_data)
                st.dataframe(history_df, use_container_width=True, hide_index=True)
                
                # Bot√£o para exportar hist√≥rico
                if st.button("üì• Exportar Hist√≥rico (CSV)", key="export_history_btn"):
                    csv = history_df.to_csv(index=False)
                    
                    # Criar link para download
                    b64 = base64.b64encode(csv.encode()).decode()
                    href = f'<a href="data:file/csv;base64,{b64}" download="historico_exercicios.csv">Clique para baixar o hist√≥rico completo</a>'
                    st.markdown(href, unsafe_allow_html=True)
                    st.success("Hist√≥rico exportado com sucesso!")
            else:
                st.info("Nenhum exerc√≠cio encontrado com os filtros selecionados.")
                
            # Bot√£o para limpar hist√≥rico
            if st.button("üóëÔ∏è Limpar Hist√≥rico", key="clear_history_btn"):
                st.session_state.exercise_history = []
                st.rerun()
    
    with tab4:
        st.markdown('<h2 class="sub-header">Seu Progresso de Aprendizagem</h2>', unsafe_allow_html=True)
        
        # Dados de progresso
        exercises_completed = st.session_state.user_progress["exercises_completed"]
        correct_answers = st.session_state.user_progress["correct_answers"]
        topics_studied = st.session_state.user_progress["topics_studied"]
        difficulty_levels = st.session_state.user_progress["difficulty_levels"]
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.markdown(f'<p class="metric-value">{exercises_completed}</p>', unsafe_allow_html=True)
            st.markdown('<p class="metric-label">Exerc√≠cios</p>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
            
        with col2:
            accuracy = int(correct_answers / max(1, exercises_completed) * 100)
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.markdown(f'<p class="metric-value">{accuracy}%</p>', unsafe_allow_html=True)
            st.markdown('<p class="metric-label">Precis√£o</p>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
            
        with col3:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.markdown(f'<p class="metric-value">{len(topics_studied)}</p>', unsafe_allow_html=True)
            st.markdown('<p class="metric-label">T√≥picos</p>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
            
        with col4:
            streak = st.session_state.user_progress["streak"]
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.markdown(f'<p class="metric-value">{streak}</p>', unsafe_allow_html=True)
            st.markdown('<p class="metric-label">Sequ√™ncia</p>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Gr√°ficos de progresso
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de precis√£o por dificuldade
            st.markdown("### Precis√£o por N√≠vel de Dificuldade")
            
            # Simular dados para o gr√°fico
            difficulty_data = {
                "F√°cil": min(100, 75 + difficulty_levels["F√°cil"] * 5),
                "M√©dio": min(100, 60 + difficulty_levels["M√©dio"] * 4),
                "Dif√≠cil": min(100, 40 + difficulty_levels["Dif√≠cil"] * 3)
            }
            
            fig, ax = plt.subplots(figsize=(8, 5))
            
            difficulties = list(difficulty_data.keys())
            accuracies = list(difficulty_data.values())
            colors = ['#4CAF50', '#FFC107', '#F44336']
            
            bars = ax.bar(difficulties, accuracies, color=colors)
            
            # Adicionar r√≥tulos
            ax.set_ylim(0, 100)
            ax.set_ylabel('Precis√£o (%)')
            ax.set_title('Precis√£o por N√≠vel de Dificuldade')
            
            # Adicionar valores nas barras
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}%',
                            xy=(bar.get_x() + bar.get_width() / 2, height),
                            xytext=(0, 3),  # 3 pontos de offset vertical
                            textcoords="offset points",
                            ha='center', va='bottom')
            
            st.pyplot(fig)
            
        with col2:
            # Gr√°fico de t√≥picos estudados
            st.markdown("### T√≥picos Estudados")
            
            # Simular dados para o gr√°fico
            topics_count = {}
            all_topics = ["Sistemas 2x2", "Sistemas 3x3", "M√©todos Iterativos", "Aplica√ß√µes", "Mal Condicionados", "Sistemas SPI", "Sistemas SI"]
            
            for topic in all_topics:
                # Contar ocorr√™ncias nos t√≥picos estudados
                count = sum(1 for t in topics_studied if topic.lower() in t.lower())
                if count > 0 or topic in ["Sistemas 2x2", "Sistemas 3x3", "Aplica√ß√µes"]:  # Garantir que alguns t√≥picos b√°sicos apare√ßam
                    topics_count[topic] = max(1, count)
            
            # Se n√£o houver t√≥picos estudados, adicionar alguns padr√£o
            if not topics_count:
                topics_count = {
                    "Sistemas 2x2": 3,
                    "Sistemas 3x3": 2,
                    "Aplica√ß√µes": 1
                }
            
            fig, ax = plt.subplots(figsize=(8, 5))
            
            topics = list(topics_count.keys())
            counts = list(topics_count.values())
            
            # Ordenar por contagem
            sorted_indices = sorted(range(len(counts)), key=lambda i: counts[i], reverse=True)
            topics = [topics[i] for i in sorted_indices]
            counts = [counts[i] for i in sorted_indices]
            
            # Limitar a 5 t√≥picos para melhor visualiza√ß√£o
            if len(topics) > 5:
                topics = topics[:5]
                counts = counts[:5]
            
            bars = ax.barh(topics, counts, color='#1E88E5')
            
            # Adicionar r√≥tulos
            ax.set_xlabel('N√∫mero de Estudos')
            ax.set_title('T√≥picos Mais Estudados')
            
            # Adicionar valores nas barras
            for i, bar in enumerate(bars):
                width = bar.get_width()
                ax.annotate(f'{width}',
                           xy=(width, bar.get_y() + bar.get_height()/2),
                           xytext=(3, 0),  # 3 pontos de offset horizontal
                           textcoords="offset points",
                           ha='left', va='center')
            
            st.pyplot(fig)
        
        # Curva de progresso ao longo do tempo
        st.markdown("### Progresso ao Longo do Tempo")
        
        # Simular dados de progresso por dia
        today = datetime.datetime.now()
        dates = [(today - datetime.timedelta(days=i)).strftime("%d/%m") for i in range(6, -1, -1)]
        
        # Simular exerc√≠cios por dia
        exercises_per_day = [0, 2, 5, 0, 3, 1, 4]
        correct_per_day = [0, 1, 3, 0, 2, 1, 3]
        
        # Ajustar com o progresso real
        exercises_per_day[-1] = min(10, exercises_completed)
        correct_per_day[-1] = min(exercises_per_day[-1], correct_answers)
        
        fig, ax = plt.subplots(figsize=(10, 5))
        
        ax.plot(dates, exercises_per_day, 'o-', color='#1E88E5', label='Exerc√≠cios')
        ax.plot(dates, correct_per_day, 'o-', color='#4CAF50', label='Acertos')
        
        # Adicionar √°rea sombreada
        ax.fill_between(dates, correct_per_day, color='#4CAF50', alpha=0.3)
        
        # Adicionar r√≥tulos
        ax.set_xlabel('Data')
        ax.set_ylabel('Quantidade')
        ax.set_title('Progresso nos √öltimos 7 Dias')
        ax.legend()
        
        # Ajustar limites
        ax.set_ylim(0, max(exercises_per_day) + 2)
        
        # Adicionar grade
        ax.grid(True, alpha=0.3)
        
        st.pyplot(fig)
        
        # Metas e recomenda√ß√µes
        st.markdown("### Metas e Recomenda√ß√µes")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div style="background-color: #e3f2fd; border-radius: 10px; padding: 15px; margin-bottom: 15px;">
                <h4 style="margin-top: 0;">üìä Metas Semanais</h4>
                <ul>
                    <li>Completar 20 exerc√≠cios</li>
                    <li>Atingir precis√£o de 80%</li>
                    <li>Estudar 5 t√≥picos diferentes</li>
                    <li>Resolver 2 desafios</li>
                </ul>
                <div style="background-color: #bbdefb; height: 10px; border-radius: 5px; margin-top: 10px;">
                    <div style="background-color: #1E88E5; width: 45%; height: 100%; border-radius: 5px;"></div>
                </div>
                <p style="text-align: right; margin-top: 5px; font-size: 0.9rem;">Progresso: 45%</p>
            </div>
            """, unsafe_allow_html=True)
            
        with col2:
            st.markdown("""
            <div style="background-color: #e8f5e9; border-radius: 10px; padding: 15px; margin-bottom: 15px;">
                <h4 style="margin-top: 0;">üìö Recomenda√ß√µes</h4>
                <p>Com base no seu desempenho, recomendamos:</p>
                <ul>
                    <li>Praticar mais exerc√≠cios de <strong>Sistemas 3√ó3</strong></li>
                    <li>Revisar o <strong>M√©todo de Gauss-Jordan</strong></li>
                    <li>Tentar resolver problemas de <strong>aplica√ß√£o pr√°tica</strong></li>
                </ul>
                <button style="background-color: #4CAF50; color: white; border: none; padding: 5px 15px; border-radius: 5px; cursor: pointer; margin-top: 10px;">Gerar Exerc√≠cio Recomendado</button>
            </div>
            """, unsafe_allow_html=True)
            
        # Certificados e conquistas
        st.markdown("### Certificados e Conquistas")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            <div style="background-color: #fff3e0; border-radius: 10px; padding: 15px; text-align: center;">
                <h4 style="margin-top: 0;">ü•â Iniciante</h4>
                <p style="font-size: 0.9rem;">Completou 10 exerc√≠cios</p>
                <p style="color: #FB8C00; font-weight: bold;">CONQUISTADO</p>
            </div>
            """, unsafe_allow_html=True)
            
        with col2:
            st.markdown("""
            <div style="background-color: #f5f5f5; border-radius: 10px; padding: 15px; text-align: center;">
                <h4 style="margin-top: 0;">ü•à Intermedi√°rio</h4>
                <p style="font-size: 0.9rem;">Completar 30 exerc√≠cios com 70% de precis√£o</p>
                <p style="color: #9E9E9E; font-weight: bold;">EM PROGRESSO (45%)</p>
            </div>
            """, unsafe_allow_html=True)
            
        with col3:
            st.markdown("""
            <div style="background-color: #f5f5f5; border-radius: 10px; padding: 15px; text-align: center;">
                <h4 style="margin-top: 0;">ü•á Avan√ßado</h4>
                <p style="font-size: 0.9rem;">Resolver 5 desafios dif√≠ceis</p>
                <p style="color: #9E9E9E; font-weight: bold;">BLOQUEADO</p>
            </div>
            """, unsafe_allow_html=True)

def show_examples_page():
    st.markdown('<h1 class="main-header">Exemplos Resolvidos</h1>', unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 3])
    
    with col1:
        st.markdown("### Categorias")
        
        example_types = [
            "Sistema 2√ó2 (SPD)",
            "Sistema 2√ó2 (SPI)",
            "Sistema 2√ó2 (SI)",
            "Sistema 3√ó3 (SPD)",
            "Sistema 3√ó3 (SPI)",
            "Sistema 3√ó3 (SI)",
            "Sistema 4√ó4 (SPD)",
            "Sistema Mal Condicionado",
            "M√©todo Iterativo",
            "Aplica√ß√£o: Mistura",
            "Aplica√ß√£o: Circuitos",
            "Aplica√ß√£o: Balanceamento Qu√≠mico",
            "M√©todo: Gauss-Jordan",
            "M√©todo: Decomposi√ß√£o LU",
            "M√©todo: Gauss-Seidel"
        ]
        
        selected_example = st.radio(
            "Selecione um exemplo:",
            example_types,
            key="example_type"
        )
        
        st.markdown("---")
        st.markdown("### M√©todos de Resolu√ß√£o")
        
        methods = [
            "Elimina√ß√£o de Gauss",
            "Gauss-Jordan",
            "Regra de Cramer",
            "Matriz Inversa",
            "Decomposi√ß√£o LU",
            "Jacobi",
            "Gauss-Seidel",
            "Passo a Passo Detalhado"
        ]
        
        selected_methods = st.multiselect(
            "Mostrar solu√ß√£o por:",
            methods,
            default=["Elimina√ß√£o de Gauss", "Passo a Passo Detalhado"]
        )
        
        st.markdown("---")
        st.markdown("### Meus Exemplos")
        
        # Mostrar exemplos salvos
        if "favorites" in st.session_state and "examples" in st.session_state.favorites and st.session_state.favorites["examples"]:
            for i, example in enumerate(st.session_state.favorites["examples"]):
                if st.button(f"{example['title']} ({example['date']})", key=f"saved_example_{i}"):
                    # Carregar exemplo salvo
                    st.session_state.custom_example = {
                        "title": example["title"],
                        "A": np.array(example["A"]),
                        "b": np.array(example["b"]),
                        "date": example["date"]
                    }
                    
                    st.rerun()
        else:
            st.info("Voc√™ ainda n√£o salvou nenhum exemplo. Os sistemas que voc√™ resolver e salvar aparecer√£o aqui.")
            
        if st.button("‚ûï Adicionar Sistema Personalizado", key="add_custom_btn"):
            st.session_state.adding_custom_example = True
            st.rerun()
    
    with col2:
        # Interface para adicionar sistema personalizado
        if hasattr(st.session_state, 'adding_custom_example') and st.session_state.adding_custom_example:
            st.markdown("### Adicionar Sistema Personalizado")
            
            # Interface para entrada do sistema
            num_vars = st.number_input("N√∫mero de vari√°veis:", min_value=2, max_value=4, value=2, key="custom_vars")
            num_eqs = st.number_input("N√∫mero de equa√ß√µes:", min_value=1, max_value=5, value=2, key="custom_eqs")
            
            # Criar campos para coeficientes
            coeffs = []
            constants = []
            
            var_names = ["x", "y", "z", "w"][:num_vars]
            
            for i in range(num_eqs):
                st.markdown(f"**Equa√ß√£o {i+1}**")
                cols = st.columns(num_vars + 1)
                
                eq_coeffs = []
                for j in range(num_vars):
                    with cols[j]:
                        coef = st.number_input(
                            f"Coef. de {var_names[j]}:",
                            value=1.0 if i == j else 0.0,
                            step=0.1,
                            format="%.2f",
                            key=f"custom_coef_{i}_{j}"
                        )
                        eq_coeffs.append(coef)
                
                with cols[-1]:
                    const = st.number_input(
                        f"Termo indep.:",
                        value=0.0,
                        step=0.1,
                        format="%.2f",
                        key=f"custom_const_{i}"
                    )
                
                coeffs.append(eq_coeffs)
                constants.append(const)
                
                # Mostrar a equa√ß√£o formatada
                eq_str = format_equation(eq_coeffs, var_names, const)
                st.write(f"Equa√ß√£o {i+1}: {eq_str}")
            
            # Bot√µes
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("Cancelar", key="cancel_custom_btn"):
                    st.session_state.adding_custom_example = False
                    st.rerun()
            
            with col2:
                if st.button("Salvar Sistema", key="save_custom_btn", type="primary"):
                    # Criar matriz e vetor
                    A, b = create_system_matrix(coeffs, constants, num_vars)
                    
                    # Classificar sistema
                    system_type = classify_system(A, b)
                    system_type_short = "SPD" if "Determinado" in system_type else ("SPI" if "Indeterminado" in system_type else "SI")
                    
                    # Salvar exemplo
                    if "favorites" not in st.session_state:
                        st.session_state.favorites = {"examples": []}
                    
                    st.session_state.favorites.setdefault("examples", []).append({
                        "title": f"Sistema {A.shape[0]}√ó{A.shape[1]} ({system_type_short})",
                        "A": A.tolist(),
                        "b": b.tolist(),
                        "date": datetime.datetime.now().strftime("%d/%m/%Y %H:%M")
                    })
                    
                    st.session_state.adding_custom_example = False
                    st.success("Sistema personalizado salvo com sucesso!")
                    st.rerun()
                    
            st.markdown("---")
        
        # Exibir exemplo personalizado se existir
        if hasattr(st.session_state, 'custom_example') and st.session_state.custom_example:
            example = {
                "title": st.session_state.custom_example["title"],
                "A": st.session_state.custom_example["A"],
                "b": st.session_state.custom_example["b"],
                "solution": None,
                "explanation": f"Sistema personalizado adicionado em {st.session_state.custom_example['date']}."
            }
            
            try:
                # Tentar calcular a solu√ß√£o
                system_type = classify_system(example["A"], example["b"])
                
                if system_type == "Sistema Poss√≠vel e Determinado (SPD)":
                    try:
                        solution = np.linalg.solve(example["A"], example["b"])
                        example["solution"] = solution
                    except:
                        pass
            except:
                pass
        else:
            # Obter exemplo selecionado
            example = get_example_system(selected_example)
        
        st.header(example["title"])
        
        st.markdown("### Sistema de Equa√ß√µes")
        for i, eq in enumerate(example["equations"]):
            st.write(f"Equa√ß√£o {i+1}: {eq}")
        
        # Classifica√ß√£o do sistema
        if example["A"] is not None and example["b"] is not None:
            system_type = classify_system(example["A"], example["b"])
            st.markdown(f"**Classifica√ß√£o do Sistema**: {system_type}")
        
        # Visualiza√ß√£o gr√°fica quando aplic√°vel
        if example["A"] is not None and example["b"] is not None:
            if example["A"].shape[1] == 2:
                st.markdown("### Visualiza√ß√£o Gr√°fica")
                try:
                    fig = plot_2d_system(example["A"], example["b"])
                    if fig:
                        st.pyplot(fig)
                except:
                    st.warning("N√£o foi poss√≠vel gerar a visualiza√ß√£o do sistema.")
            elif example["A"].shape[1] == 3:
                st.markdown("### Visualiza√ß√£o 3D")
                try:
                    fig = plot_3d_system(example["A"], example["b"])
                    if fig:
                        st.plotly_chart(fig, use_container_width=True)
                except:
                    st.warning("N√£o foi poss√≠vel gerar a visualiza√ß√£o 3D do sistema.")
        
        st.markdown("### Solu√ß√£o")
        
        # Se o exemplo tem solu√ß√£o definida, mostrar
        if "solution" in example and example["solution"] is not None and example["solution"] != "":
            st.markdown(example["solution"])
        elif example["A"] is not None and example["b"] is not None:
            # Caso contr√°rio, calcular se poss√≠vel
            system_type = classify_system(example["A"], example["b"])
            
            if system_type == "Sistema Poss√≠vel e Determinado (SPD)":
                try:
                    solution = np.linalg.solve(example["A"], example["b"])
                    
                    var_names = ["x", "y", "z", "w"][:example["A"].shape[1]]
                    for i, var in enumerate(var_names):
                        if i < len(solution):
                            st.markdown(f"- {var} = {solution[i]:.4f}")
                except:
                    st.info("N√£o foi poss√≠vel calcular a solu√ß√£o exata.")
            elif system_type == "Sistema Poss√≠vel e Indeterminado (SPI)":
                st.markdown("Este sistema possui infinitas solu√ß√µes.")
                
                # Tentar obter solu√ß√£o simb√≥lica
                try:
                    symbolic_solution, var_symbols = sympy_solve_system(example["A"], example["b"])
                    
                    if symbolic_solution:
                        st.markdown("**Solu√ß√£o Param√©trica:**")
                        
                        if isinstance(symbolic_solution, dict):
                            for var, expr in symbolic_solution.items():
                                st.latex(f"{sp.latex(var)} = {sp.latex(expr)}")
                        else:
                            st.latex(sp.latex(symbolic_solution))
                except:
                    st.info("N√£o foi poss√≠vel determinar a forma param√©trica exata da solu√ß√£o.")
            else:  # SI
                st.markdown("Este sistema n√£o possui solu√ß√£o.")
        
        # Mostrar m√©todos de resolu√ß√£o selecionados
        st.markdown("### M√©todos de Resolu√ß√£o")
        
        if "Passo a Passo Detalhado" in selected_methods:
            with st.expander("üîç Passo a Passo Detalhado", expanded=True):
                st.markdown(example["explanation"])
        
        if example["A"] is not None and example["b"] is not None:
            A = example["A"]
            b = example["b"]
            
            if "Elimina√ß√£o de Gauss" in selected_methods:
                with st.expander("üìä Elimina√ß√£o de Gauss", expanded=False):
                    try:
                        steps, solution = gaussian_elimination_steps(A, b)
                        
                        for step in steps:
                            st.write(step)
                            
                        if solution is not None:
                            st.markdown("**Solu√ß√£o:**")
                            var_names = ["x", "y", "z", "w"][:A.shape[1]]
                            for i, var in enumerate(var_names):
                                if i < len(solution):
                                    st.markdown(f"- {var} = {solution[i]:.4f}")
                    except:
                        st.error("N√£o foi poss√≠vel aplicar o m√©todo de Elimina√ß√£o de Gauss para este sistema.")
            
            if "Gauss-Jordan" in selected_methods:
                with st.expander("üìä Gauss-Jordan", expanded=False):
                    try:
                        steps, solution = gauss_jordan_steps(A, b)
                        
                        for step in steps:
                            st.write(step)
                            
                        if solution is not None:
                            st.markdown("**Solu√ß√£o:**")
                            var_names = ["x", "y", "z", "w"][:A.shape[1]]
                            for i, var in enumerate(var_names):
                                if i < len(solution):
                                    st.markdown(f"- {var} = {solution[i]:.4f}")
                    except:
                        st.error("N√£o foi poss√≠vel aplicar o m√©todo de Gauss-Jordan para este sistema.")
            
            if "Regra de Cramer" in selected_methods and A.shape[0] == A.shape[1]:
                with st.expander("üìä Regra de Cramer", expanded=False):
                    try:
                        steps, solution = cramer_rule(A, b, detailed=True)
                        
                        for step in steps:
                            st.write(step)
                            
                        if solution is not None:
                            st.markdown("**Solu√ß√£o:**")
                            var_names = ["x", "y", "z", "w"][:A.shape[1]]
                            for i, var in enumerate(var_names):
                                if i < len(solution):
                                    st.markdown(f"- {var} = {solution[i]:.4f}")
                    except:
                        st.error("N√£o foi poss√≠vel aplicar a Regra de Cramer para este sistema.")
            
            if "Matriz Inversa" in selected_methods and A.shape[0] == A.shape[1]:
                with st.expander("üìä Matriz Inversa", expanded=False):
                    try:
                        steps, solution = matrix_inverse_method(A, b, detailed=True)
                        
                        for step in steps:
                            st.write(step)
                            
                        if solution is not None:
                            st.markdown("**Solu√ß√£o:**")
                            var_names = ["x", "y", "z", "w"][:A.shape[1]]
                            for i, var in enumerate(var_names):
                                if i < len(solution):
                                    st.markdown(f"- {var} = {solution[i]:.4f}")
                    except:
                        st.error("N√£o foi poss√≠vel aplicar o m√©todo da Matriz Inversa para este sistema.")
                        
            if "Decomposi√ß√£o LU" in selected_methods and A.shape[0] == A.shape[1]:
                with st.expander("üìä Decomposi√ß√£o LU", expanded=False):
                    try:
                        steps, solution = lu_decomposition_method(A, b, detailed=True)
                        
                        for step in steps:
                            st.write(step)
                            
                        if solution is not None:
                            st.markdown("**Solu√ß√£o:**")
                            var_names = ["x", "y", "z", "w"][:A.shape[1]]
                            for i, var in enumerate(var_names):
                                if i < len(solution):
                                    st.markdown(f"- {var} = {solution[i]:.4f}")
                    except:
                        st.error("N√£o foi poss√≠vel aplicar o m√©todo de Decomposi√ß√£o LU para este sistema.")
                        
            if "Jacobi" in selected_methods:
                with st.expander("üìä M√©todo de Jacobi", expanded=False):
                    try:
                        is_diag_dominant = True
                        for i in range(min(A.shape[0], A.shape[1])):
                            if i < A.shape[0] and i < A.shape[1]:
                                if abs(A[i, i]) <= np.sum(np.abs(A[i, :])) - abs(A[i, i]):
                                    is_diag_dominant = False
                                    break
                        
                        if is_diag_dominant:
                            steps, solution = jacobi_iteration_method(A, b, detailed=True)
                            
                            for step in steps:
                                st.write(step)
                                
                            if solution is not None:
                                st.markdown("**Solu√ß√£o:**")
                                var_names = ["x", "y", "z", "w"][:A.shape[1]]
                                for i, var in enumerate(var_names):
                                    if i < len(solution):
                                        st.markdown(f"- {var} = {solution[i]:.4f}")
                        else:
                            st.warning("O sistema n√£o √© diagonalmente dominante. O m√©todo de Jacobi pode n√£o convergir.")
                    except:
                        st.error("N√£o foi poss√≠vel aplicar o m√©todo de Jacobi para este sistema.")
            
            if "Gauss-Seidel" in selected_methods:
                with st.expander("üìä M√©todo de Gauss-Seidel", expanded=False):
                    try:
                        is_diag_dominant = True
                        for i in range(min(A.shape[0], A.shape[1])):
                            if i < A.shape[0] and i < A.shape[1]:
                                if abs(A[i, i]) <= np.sum(np.abs(A[i, :])) - abs(A[i, i]):
                                    is_diag_dominant = False
                                    break
                        
                        if is_diag_dominant:
                            steps, solution = gauss_seidel_method(A, b, detailed=True)
                            
                            for step in steps:
                                st.write(step)
                                
                            if solution is not None:
                                st.markdown("**Solu√ß√£o:**")
                                var_names = ["x", "y", "z", "w"][:A.shape[1]]
                                for i, var in enumerate(var_names):
                                    if i < len(solution):
                                        st.markdown(f"- {var} = {solution[i]:.4f}")
                        else:
                            st.warning("O sistema n√£o √© diagonalmente dominante. O m√©todo de Gauss-Seidel pode n√£o convergir.")
                    except:
                        st.error("N√£o foi poss√≠vel aplicar o m√©todo de Gauss-Seidel para este sistema.")
        
        # Op√ß√µes adicionais
        st.markdown("### Op√ß√µes Adicionais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìã Salvar nos Exemplos", key="save_example_btn"):
                if "favorites" not in st.session_state:
                    st.session_state.favorites = {"examples": []}
                
                # Verificar se j√° est√° nos favoritos
                already_saved = False
                if example["A"] is not None and example["b"] is not None:
                    for saved in st.session_state.favorites.get("examples", []):
                        if (np.array_equal(example["A"], np.array(saved["A"])) and 
                            np.array_equal(example["b"], np.array(saved["b"]))):
                            already_saved = True
                            break
                
                if already_saved:
                    st.info("Este exemplo j√° est√° nos seus favoritos.")
                else:
                    # Salvar exemplo
                    system_type = "SPD"
                    if example["A"] is not None and example["b"] is not None:
                        system_type = classify_system(example["A"], example["b"])
                        system_type = system_type.split(" ")[2][1:-1]  # Extrair SPD, SPI ou SI
                    
                    st.session_state.favorites.setdefault("examples", []).append({
                        "title": example["title"] if "title" in example else f"Sistema {example['A'].shape[0]}√ó{example['A'].shape[1]} ({system_type})",
                        "A": example["A"].tolist() if example["A"] is not None else None,
                        "b": example["b"].tolist() if example["b"] is not None else None,
                        "date": datetime.datetime.now().strftime("%d/%m/%Y %H:%M")
                    })
                    
                    st.success("Exemplo salvo com sucesso!")
        
        with col2:
            if st.button("üì• Baixar Solu√ß√£o (PDF)", key="download_pdf_btn"):
                st.success("Download iniciado! (Simula√ß√£o)")
                
        # Se houver um exemplo personalizado, oferecer a op√ß√£o de remov√™-lo
        if hasattr(st.session_state, 'custom_example') and st.session_state.custom_example:
            if st.button("‚ùå Remover Exemplo Personalizado", key="remove_custom_btn"):
                st.session_state.custom_example = None
                st.rerun()

def show_reference_page():
    st.markdown('<h1 class="main-header">Refer√™ncia R√°pida</h1>', unsafe_allow_html=True)
    
    reference_topics = [
        "Classifica√ß√£o de Sistemas",
        "M√©todo de Elimina√ß√£o de Gauss",
        "M√©todo de Gauss-Jordan",
        "Regra de Cramer",
        "M√©todo da Matriz Inversa",
        "Decomposi√ß√£o LU",
        "M√©todos Iterativos",
        "Interpreta√ß√£o Geom√©trica",
        "Sistemas Homog√™neos",
        "Teorema de Rouch√©-Capelli",
        "Estabilidade Num√©rica",
        "Aplica√ß√µes Pr√°ticas",
        "Sistemas N√£o-Lineares",
        "Sistemas Lineares em Programa√ß√£o Linear"
    ]
    
    col1, col2 = st.columns([1, 3])
    
    with col1:
        selected_topic = st.radio(
            "T√≥picos:",
            reference_topics,
            key="reference_topic"
        )
        
        st.markdown("---")
        
        # Adicionar funcionalidade de download do cart√£o de refer√™ncia
        st.markdown("### Exportar Refer√™ncia")
        
        if st.button("üì• Baixar como PDF", key="download_pdf_btn"):
            st.success(f"Download de '{selected_topic}.pdf' iniciado! (Simula√ß√£o)")
            
        if st.button("üì± Vers√£o para Celular", key="mobile_btn"):
            st.success("Vers√£o para celular dispon√≠vel! (Simula√ß√£o)")
            
        # Bot√£o para adicionar aos favoritos
        if st.button("‚≠ê Adicionar aos Favoritos", key="fav_btn"):
            if "favorites" not in st.session_state:
                st.session_state.favorites = {"reference_cards": []}
            
            # Verificar se j√° est√° nos favoritos
            already_saved = False
            for card in st.session_state.favorites.get("reference_cards", []):
                if card.get("title") == selected_topic:
                    already_saved = True
                    break
                    
            if already_saved:
                st.info(f"'{selected_topic}' j√° est√° nos seus favoritos.")
            else:
                st.session_state.favorites.setdefault("reference_cards", []).append(
                    {"title": selected_topic, "date": datetime.datetime.now().strftime("%d/%m/%Y %H:%M")}
                )
                st.success(f"'{selected_topic}' adicionado aos seus favoritos!")
        
        # Mostrar cart√µes favoritos
        st.markdown("### Meus Favoritos")
        if "favorites" in st.session_state and "reference_cards" in st.session_state.favorites:
            for i, card in enumerate(st.session_state.favorites["reference_cards"]):
                if st.button(f"{card['title']}", key=f"fav_card_{i}"):
                    # Selecionar cart√£o
                    st.session_state.reference_topic = card["title"]
                    st.rerun()
        else:
            st.info("Seus cart√µes de refer√™ncia favoritos aparecer√£o aqui.")
    
    with col2:
        st.markdown(get_reference_card(selected_topic))
        
        # Adicionar exemplos compactos
        if selected_topic == "Classifica√ß√£o de Sistemas":
            with st.expander("Exemplos de Classifica√ß√£o", expanded=False):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown("**SPD**")
                    st.latex(r"""
                    \begin{align}
                    x + y &= 5\\
                    2x - y &= 1
                    \end{align}
                    """)
                    st.markdown("Solu√ß√£o √∫nica: (2, 3)")
                
                with col2:
                    st.markdown("**SPI**")
                    st.latex(r"""
                    \begin{align}
                    2x + 3y &= 6\\
                    4x + 6y &= 12
                    \end{align}
                    """)
                    st.markdown("Infinitas solu√ß√µes: $x = t$, $y = \frac{6-2t}{3}$")
                
                with col3:
                    st.markdown("**SI**")
                    st.latex(r"""
                    \begin{align}
                    2x + 3y &= 6\\
                    2x + 3y &= 8
                    \end{align}
                    """)
                    st.markdown("Sem solu√ß√£o (inconsistente)")
        
        elif selected_topic == "M√©todo de Elimina√ß√£o de Gauss":
            with st.expander("Exemplo Passo a Passo", expanded=False):
                st.markdown("""
                **Sistema**:
                
                $x + y + z = 6$
                
                $2x - y + z = 3$
                
                $x + 2y + 3z = 14$
                
                **Matriz aumentada inicial**:
                
                $\\begin{bmatrix}
                1 & 1 & 1 & | & 6 \\\\
                2 & -1 & 1 & | & 3 \\\\
                1 & 2 & 3 & | & 14
                \\end{bmatrix}$
                
                **Passo 1**: Eliminar x da segunda linha
                
                $L_2 = L_2 - 2L_1$
                
                $\\begin{bmatrix}
                1 & 1 & 1 & | & 6 \\\\
                0 & -3 & -1 & | & -9 \\\\
                1 & 2 & 3 & | & 14
                \\end{bmatrix}$
                
                **Passo 2**: Eliminar x da terceira linha
                
                $L_3 = L_3 - L_1$
                
                $\\begin{bmatrix}
                1 & 1 & 1 & | & 6 \\\\
                0 & -3 & -1 & | & -9 \\\\
                0 & 1 & 2 & | & 8
                \\end{bmatrix}$
                
                **Passo 3**: Eliminar y da terceira linha
                
                $L_3 = L_3 + \\frac{1}{3}L_2$
                
                $\\begin{bmatrix}
                1 & 1 & 1 & | & 6 \\\\
                0 & -3 & -1 & | & -9 \\\\
                0 & 0 & \\frac{5}{3} & | & 5
                \\end{bmatrix}$
                
                **Substitui√ß√£o reversa**:
                
                $z = \\frac{5}{\\frac{5}{3}} = 3$
                
                $y = \\frac{-9 - (-1)(3)}{-3} = \\frac{-9 + 3}{-3} = 2$
                
                $x = 6 - 1(2) - 1(3) = 6 - 2 - 3 = 1$
                
                **Solu√ß√£o**: $(1, 2, 3)$
                """)
                
        elif selected_topic == "Regra de Cramer":
            with st.expander("Exemplo com Determinantes", expanded=False):
                st.markdown("""
                **Sistema**:
                
                $2x + 3y = 8$
                
                $4x - y = 1$
                
                **Determinante principal**:
                
                $D = \\begin{vmatrix} 2 & 3 \\\\ 4 & -1 \\end{vmatrix} = 2 \\times (-1) - 3 \\times 4 = -2 - 12 = -14$
                
                **Determinante para x**:
                
                $D_x = \\begin{vmatrix} 8 & 3 \\\\ 1 & -1 \\end{vmatrix} = 8 \\times (-1) - 3 \\times 1 = -8 - 3 = -11$
                
                **Determinante para y**:
                
                $D_y = \\begin{vmatrix} 2 & 8 \\\\ 4 & 1 \\end{vmatrix} = 2 \\times 1 - 8 \\times 4 = 2 - 32 = -30$
                
                **Solu√ß√£o**:
                
                $x = \\frac{D_x}{D} = \\frac{-11}{-14} = \\frac{11}{14} \\approx 0.786$
                
                $y = \\frac{D_y}{D} = \\frac{-30}{-14} = \\frac{15}{7} \\approx 2.143$
                """)

def show_videos_page():
    st.markdown('<h1 class="main-header">Videoaulas sobre Sistemas Lineares</h1>', unsafe_allow_html=True)
    
    try:
        # Obter lista de v√≠deos
        videos = get_youtube_videos()
        
        if not videos:
            st.warning("N√£o foi poss√≠vel carregar os v√≠deos. Por favor, tente novamente mais tarde.")
            return
        
        # Filtros
        col1, col2, col3 = st.columns(3)
        
        with col1:
            filter_level = st.multiselect(
                "N√≠vel:",
                ["B√°sico", "Intermedi√°rio", "Avan√ßado"],
                default=["B√°sico", "Intermedi√°rio", "Avan√ßado"]
            )
            
        with col2:
            filter_author = st.multiselect(
                "Autor:",
                list(set(video["author"] for video in videos)),
                default=list(set(video["author"] for video in videos))
            )
            
        with col3:
            sort_by = st.selectbox(
                "Ordenar por:",
                ["Relev√¢ncia", "Dura√ß√£o (menor)", "Dura√ß√£o (maior)"],
                index=0
            )
        
        # Filtrar e ordenar v√≠deos
        filtered_videos = [
            video for video in videos 
            if video["level"] in filter_level and video["author"] in filter_author
        ]
        
        if sort_by == "Dura√ß√£o (menor)":
            filtered_videos.sort(key=lambda x: convert_duration_to_seconds(x["duration"]))
        elif sort_by == "Dura√ß√£o (maior)":
            filtered_videos.sort(key=lambda x: convert_duration_to_seconds(x["duration"]), reverse=True)
        
        # Exibir v√≠deos em cards
        st.markdown("### Aulas Dispon√≠veis")
        
        if not filtered_videos:
            st.info("Nenhum v√≠deo encontrado com os filtros selecionados.")
            return
        
        # Dividir em linhas de 3 colunas
        for i in range(0, len(filtered_videos), 3):
            cols = st.columns(3)
            
            for j in range(3):
                if i + j < len(filtered_videos):
                    video = filtered_videos[i + j]
                    
                    with cols[j]:
                        st.markdown(f"""
                        <div style="border: 1px solid #e0e0e0; border-radius: 8px; padding: 10px; height: 100%;">
                            <div class="video-container" style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; margin-bottom: 10px;">
                                <iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="{video['url']}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                            </div>
                            <h4 style="margin-top: 0;">{video['title']}</h4>
                            <p style="font-size: 0.9rem; color: #666;">{video['description']}</p>
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 10px;">
                                <span style="font-size: 0.8rem; color: #1E88E5;">{video['author']}</span>
                                <span style="font-size: 0.8rem; background-color: #e3f2fd; padding: 2px 8px; border-radius: 10px;">{video['level']} ‚Ä¢ {video['duration']}</span>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
        
        # Se√ß√£o de playlists recomendadas
        st.markdown("### Playlists Recomendadas")
        
        playlists = [
            {
                "title": "Curso Completo de Sistemas Lineares",
                "author": "Matem√°tica Rio",
                "videos": 15,
                "level": "B√°sico ao Avan√ßado",
                "url": "https://www.youtube.com/playlist?list=example1"
            },
            {
                "title": "√Ålgebra Linear: Sistemas e Aplica√ß√µes",
                "author": "Prof. Ferretto",
                "videos": 12,
                "level": "Intermedi√°rio",
                "url": "https://www.youtube.com/playlist?list=example2"
            },
            {
                "title": "M√©todos Num√©ricos para Sistemas Lineares",
                "author": "Prof. Paulo Calculista",
                "videos": 8,
                "level": "Avan√ßado",
                "url": "https://www.youtube.com/playlist?list=example3"
            }
        ]
        
        col1, col2, col3 = st.columns(3)
        
        for i, (col, playlist) in enumerate(zip([col1, col2, col3], playlists)):
            with col:
                st.markdown(f"""
                <div style="border: 1px solid #e0e0e0; border-radius: 8px; padding: 15px;">
                    <h4 style="margin-top: 0;">{playlist['title']}</h4>
                    <p><strong>Autor:</strong> {playlist['author']}</p>
                    <p><strong>V√≠deos:</strong> {playlist['videos']}</p>
                    <p><strong>N√≠vel:</strong> {playlist['level']}</p>
                    <button style="background-color: #1E88E5; color: white; border: none; padding: 5px 15px; border-radius: 5px; width: 100%;">Ver Playlist</button>
                </div>
                """, unsafe_allow_html=True)
        
        # Recursos adicionais
        st.markdown("### Recursos Adicionais")
        
        resources = [
            {
                "title": "Notas de Aula - Sistemas Lineares",
                "description": "Material complementar com exerc√≠cios resolvidos e teoria aprofundada.",
                "type": "PDF",
                "size": "2.4 MB"
            },
            {
                "title": "Lista de Exerc√≠cios Resolvidos",
                "description": "Compila√ß√£o de 50 exerc√≠cios com solu√ß√µes detalhadas.",
                "type": "PDF",
                "size": "1.8 MB"
            },
            {
                "title": "Resumo dos M√©todos de Resolu√ß√£o",
                "description": "Guia r√°pido com todos os m√©todos e suas f√≥rmulas.",
                "type": "PDF",
                "size": "0.9 MB"
            }
        ]
        
        for resource in resources:
            st.markdown(f"""
            <div style="display: flex; align-items: center; background-color: #f8f9fa; padding: 10px; border-radius: 8px; margin-bottom: 10px;">
                <div style="background-color: #e3f2fd; color: #1E88E5; width: 40px; height: 40px; border-radius: 20px; display: flex; align-items: center; justify-content: center; margin-right: 15px;">
                    <span style="font-weight: bold;">{resource['type']}</span>
                </div>
                <div style="flex-grow: 1;">
                    <h4 style="margin: 0;">{resource['title']}</h4>
                    <p style="margin: 0; color: #666; font-size: 0.9rem;">{resource['description']}</p>
                </div>
                <div>
                    <span style="font-size: 0.8rem; color: #666; margin-right: 10px;">{resource['size']}</span>
                    <button style="background-color: #1E88E5; color: white; border: none; padding: 5px 15px; border-radius: 5px;">Baixar</button>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar os v√≠deos: {str(e)}")
        st.info("Enquanto isso, voc√™ pode acessar nosso conte√∫do te√≥rico na se√ß√£o 'Teoria' ou praticar na se√ß√£o 'Exerc√≠cios'.")

def get_youtube_videos():
    """Retorna uma lista de v√≠deos do YouTube sobre sistemas lineares"""
    videos = [
        {
            "title": "Sistemas Lineares - Introdu√ß√£o",
            "description": "Uma introdu√ß√£o aos sistemas de equa√ß√µes lineares e suas aplica√ß√µes.",
            "url": "https://www.youtube.com/embed/LhOHnLXolJc",
            "duration": "12:45",
            "author": "Matem√°tica Rio",
            "level": "B√°sico"
        },
        {
            "title": "M√©todo da Elimina√ß√£o de Gauss",
            "description": "Resolu√ß√£o passo a passo do m√©todo de elimina√ß√£o de Gauss.",
            "url": "https://www.youtube.com/embed/kaRWnHWL7nE",
            "duration": "18:22",
            "author": "Prof. Ferretto",
            "level": "Intermedi√°rio"
        },
        {
            "title": "Regra de Cramer Explicada",
            "description": "Tutorial detalhado sobre a aplica√ß√£o da regra de Cramer com exemplos.",
            "url": "https://www.youtube.com/embed/MQPx2c-NQYI",
            "duration": "15:10",
            "author": "Equaciona Matem√°tica",
            "level": "Intermedi√°rio"
        },
        {
            "title": "M√©todo da Substitui√ß√£o",
            "description": "Aprenda a resolver sistemas lineares pelo m√©todo da substitui√ß√£o.",
            "url": "https://www.youtube.com/embed/LUSa3yRTB9A",
            "duration": "14:30",
            "author": "Matem√°tica Rio",
            "level": "B√°sico"
        },
        {
            "title": "M√©todo da Adi√ß√£o",
            "description": "Como resolver sistemas usando o m√©todo da adi√ß√£o ou elimina√ß√£o.",
            "url": "https://www.youtube.com/embed/b-CvQvgBhvE",
            "duration": "16:15",
            "author": "Prof. Ferretto",
            "level": "B√°sico"
        },
        {
            "title": "M√©todo da Compara√ß√£o",
            "description": "Resolu√ß√£o de sistemas lineares pelo m√©todo da compara√ß√£o.",
            "url": "https://www.youtube.com/embed/Fx_HAbpX8-g",
            "duration": "13:45",
            "author": "Equaciona Matem√°tica",
            "level": "B√°sico"
        },
        {
            "title": "Aplica√ß√µes de Sistemas Lineares",
            "description": "Exemplos pr√°ticos de aplica√ß√µes de sistemas lineares em diversos campos.",
            "url": "https://www.youtube.com/embed/j2RbZzKMDnM",
            "duration": "20:35",
            "author": "Me Salva! ENEM",
            "level": "B√°sico"
        },
        {
            "title": "Matriz Inversa e Solu√ß√£o de Sistemas",
            "description": "Como encontrar a matriz inversa e us√°-la para resolver sistemas lineares.",
            "url": "https://www.youtube.com/embed/kuixJnmwJxo",
            "duration": "22:18",
            "author": "Prof. Marcos Aba",
            "level": "Avan√ßado"
        },
        {
            "title": "Sistemas Lineares 3x3 - Passo a Passo",
            "description": "Resolu√ß√£o completa de sistemas com tr√™s equa√ß√µes e tr√™s inc√≥gnitas.",
            "url": "https://www.youtube.com/embed/Hl-h_8TUXMo",
            "duration": "17:45",
            "author": "Matem√°tica Rio",
            "level": "Intermedi√°rio"
        },
        {
            "title": "M√©todos Iterativos: Jacobi e Gauss-Seidel",
            "description": "Explica√ß√£o sobre m√©todos iterativos para sistemas de grande porte.",
            "url": "https://www.youtube.com/embed/hGzWsQxYVK0",
            "duration": "25:30",
            "author": "Prof. Paulo Calculista",
            "level": "Avan√ßado"
        },
        {
            "title": "Sistemas Lineares e Matrizes",
            "description": "Rela√ß√£o entre sistemas lineares e opera√ß√µes matriciais.",
            "url": "https://www.youtube.com/embed/5J4upRPxEG8",
            "duration": "16:12",
            "author": "Prof. Ferretto",
            "level": "Intermedi√°rio"
        },
        {
            "title": "Classifica√ß√£o de Sistemas Lineares",
            "description": "Como identificar se um sistema √© SPD, SPI ou SI.",
            "url": "https://www.youtube.com/embed/3g_vGpwFGfY",
            "duration": "14:50",
            "author": "Equaciona Matem√°tica",
            "level": "B√°sico"
        }
    ]
    
    return videos

def convert_duration_to_seconds(duration):
    """Converte uma dura√ß√£o no formato 'MM:SS' para segundos"""
    try:
        parts = duration.split(':')
        if len(parts) == 2:
            minutes, seconds = parts
            return int(minutes) * 60 + int(seconds)
        else:
            return 0
    except:
        return 0
        
def show_progress_page():
    st.markdown('<h1 class="main-header">Meu Progresso</h1>', unsafe_allow_html=True)
    
    # Dados de progresso
    exercises_completed = st.session_state.user_progress["exercises_completed"]
    correct_answers = st.session_state.user_progress["correct_answers"]
    topics_studied = st.session_state.user_progress["topics_studied"]
    difficulty_levels = st.session_state.user_progress["difficulty_levels"]
    streak = st.session_state.user_progress["streak"]
    
    # Vis√£o geral
    st.markdown("### Vis√£o Geral do Progresso")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.markdown(f'<p class="metric-value">{exercises_completed}</p>', unsafe_allow_html=True)
        st.markdown('<p class="metric-label">Exerc√≠cios</p>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
    with col2:
        accuracy = int(correct_answers / max(1, exercises_completed) * 100)
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.markdown(f'<p class="metric-value">{accuracy}%</p>', unsafe_allow_html=True)
        st.markdown('<p class="metric-label">Precis√£o</p>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.markdown(f'<p class="metric-value">{len(topics_studied)}</p>', unsafe_allow_html=True)
        st.markdown('<p class="metric-label">T√≥picos</p>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
    with col4:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.markdown(f'<p class="metric-value">{streak}</p>', unsafe_allow_html=True)
        st.markdown('<p class="metric-label">Sequ√™ncia</p>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Dashboard principal
    tab1, tab2, tab3 = st.tabs(["üìä Estat√≠sticas", "üéØ Metas", "üèÜ Conquistas"])
    
    with tab1:
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de desempenho por dificuldade
            st.markdown("### Desempenho por Dificuldade")
            
            # Simular dados para o gr√°fico
            difficulty_data = {
                "F√°cil": min(100, 75 + difficulty_levels["F√°cil"] * 5),
                "M√©dio": min(100, 60 + difficulty_levels["M√©dio"] * 4),
                "Dif√≠cil": min(100, 40 + difficulty_levels["Dif√≠cil"] * 3)
            }
            
            fig, ax = plt.subplots(figsize=(8, 5))
            
            difficulties = list(difficulty_data.keys())
            accuracies = list(difficulty_data.values())
            colors = ['#4CAF50', '#FFC107', '#F44336']
            
            bars = ax.bar(difficulties, accuracies, color=colors)
            
            # Adicionar r√≥tulos
            ax.set_ylim(0, 100)
            ax.set_ylabel('Precis√£o (%)')
            ax.set_title('Precis√£o por N√≠vel de Dificuldade')
            
            # Adicionar valores nas barras
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}%',
                            xy=(bar.get_x() + bar.get_width() / 2, height),
                            xytext=(0, 3),  # 3 pontos de offset vertical
                            textcoords="offset points",
                            ha='center', va='bottom')
            
            st.pyplot(fig)
            
        with col2:
            # Gr√°fico de m√©todos mais utilizados
            st.markdown("### M√©todos Mais Utilizados")
            
            # Simular dados
            methods_data = {
                "Elimina√ß√£o de Gauss": 42,
                "Regra de Cramer": 28,
                "Matriz Inversa": 15,
                "Gauss-Jordan": 10,
                "M√©todos Iterativos": 5
            }
            
            fig, ax = plt.subplots(figsize=(8, 5))
            
            # Criar gr√°fico de pizza
            wedges, texts, autotexts = ax.pie(
                methods_data.values(), 
                labels=list(methods_data.keys()),
                autopct='%1.1f%%',
                startangle=90,
                colors=['#1E88E5', '#42A5F5', '#90CAF9', '#BBDEFB', '#E3F2FD']
            )
            
            # Ajustar propriedades do texto
            for text in texts:
                text.set_fontsize(9)
            for autotext in autotexts:
                autotext.set_fontsize(9)
                autotext.set_color('white')
            
            ax.set_title('M√©todos de Resolu√ß√£o Utilizados')
            ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
            
            st.pyplot(fig)
        
        # Gr√°fico de atividade ao longo do tempo
        st.markdown("### Atividade ao Longo do Tempo")
        
        # Simular dados para o gr√°fico
        dates = [f"Semana {i+1}" for i in range(6)]
        
        # Dados de exerc√≠cios por tipo
        easy_per_week = [5, 7, 4, 6, 3, 8]
        medium_per_week = [3, 4, 5, 3, 6, 5]
        hard_per_week = [1, 0, 2, 1, 3, 2]
        
        fig, ax = plt.subplots(figsize=(10, 5))
        
        ax.bar(dates, easy_per_week, label='F√°cil', color='#4CAF50', bottom=[0] * len(dates))
        ax.bar(dates, medium_per_week, label='M√©dio', color='#FFC107', bottom=easy_per_week)
        
        # Calcular as posi√ß√µes de bottom para o n√≠vel dif√≠cil
        hard_bottom = [easy + medium for easy, medium in zip(easy_per_week, medium_per_week)]
        ax.bar(dates, hard_per_week, label='Dif√≠cil', color='#F44336', bottom=hard_bottom)
        
        # Adicionar r√≥tulos
        ax.set_xlabel('Per√≠odo')
        ax.set_ylabel('N√∫mero de Exerc√≠cios')
        ax.set_title('Exerc√≠cios por Semana e N√≠vel de Dificuldade')
        ax.legend()
        
        st.pyplot(fig)
        
        # Heatmap de atividade
        st.markdown("### Mapa de Atividade")
        
        # Simular dados para o heatmap
        weekdays = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b', 'Dom']
        weeks = ['Semana 1', 'Semana 2', 'Semana 3', 'Semana 4']
        
        # Gerar dados aleat√≥rios para o heatmap
        data = np.zeros((len(weeks), len(weekdays)))
        for i in range(len(weeks)):
            for j in range(len(weekdays)):
                # Mais atividade nos dias da semana, menos nos finais de semana
                if j < 5:  # Dias de semana
                    data[i, j] = np.random.randint(0, 5)
                else:  # Finais de semana
                    data[i, j] = np.random.randint(0, 3)
        
        # Adicionar o dia atual com maior atividade
        today = datetime.datetime.now()
        weekday_today = today.weekday()
        week_idx = 3  # √öltima semana
        if weekday_today < len(weekdays):
            data[week_idx, weekday_today] = 7
        
        fig, ax = plt.subplots(figsize=(10, 4))
        
        # Criar um mapa de cores personalizado
        colors = ['#f5f5f5', '#e3f2fd', '#bbdefb', '#90caf9', '#64b5f6', '#42a5f5', '#2196f3', '#1e88e5', '#1976d2']
        cmap = LinearSegmentedColormap.from_list('blue_gradient', colors)
        
        im = ax.imshow(data, cmap=cmap)
        
        # Adicionar r√≥tulos nos eixos
        ax.set_xticks(np.arange(len(weekdays)))
        ax.set_yticks(np.arange(len(weeks)))
        ax.set_xticklabels(weekdays)
        ax.set_yticklabels(weeks)
        
        # Rotacionar r√≥tulos do eixo x
        plt.setp(ax.get_xticklabels(), rotation=45, ha="right", rotation_mode="anchor")
        
        # Adicionar barra de cores
        cbar = ax.figure.colorbar(im, ax=ax)
        cbar.set_label('N√∫mero de Exerc√≠cios')
        
        # Adicionar t√≠tulo
        ax.set_title("Mapa de Atividade Semanal")
        
        # Adicionar texto para cada c√©lula
        for i in range(len(weeks)):
            for j in range(len(weekdays)):
                ax.text(j, i, f"{int(data[i, j])}", ha="center", va="center", color="black" if data[i, j] < 5 else "white")
        
        plt.tight_layout()
        st.pyplot(fig)
    
    with tab2:
        st.markdown("### Metas e Objetivos")
        
        # Metas semanais
        st.markdown("#### Metas Semanais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Meta de exerc√≠cios
            progress = min(100, int(exercises_completed / 20 * 100))
            st.markdown(f"""
            <div style="background-color: #e3f2fd; border-radius: 10px; padding: 15px; margin-bottom: 15px;">
                <h5 style="margin-top: 0;">üìö Completar 20 exerc√≠cios</h5>
                <div style="background-color: #bbdefb; height: 10px; border-radius: 5px; margin-top: 10px;">
                    <div style="background-color: #1E88E5; width: {progress}%; height: 100%; border-radius: 5px;"></div>
                </div>
                <p style="text-align: right; margin-top: 5px; font-size: 0.9rem;">Progresso: {exercises_completed}/20 ({progress}%)</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Meta de precis√£o
            precision_goal = 80
            precision_current = accuracy
            precision_progress = min(100, int(precision_current / precision_goal * 100))
            st.markdown(f"""
            <div style="background-color: #e8f5e9; border-radius: 10px; padding: 15px; margin-bottom: 15px;">
                <h5 style="margin-top: 0;">üéØ Atingir {precision_goal}% de precis√£o</h5>
                <div style="background-color: #c8e6c9; height: 10px; border-radius: 5px; margin-top: 10px;">
                    <div style="background-color: #4CAF50; width: {precision_progress}%; height: 100%; border-radius: 5px;"></div>
                </div>
                <p style="text-align: right; margin-top: 5px; font-size: 0.9rem;">Progresso: {precision_current}/{precision_goal}% ({precision_progress}%)</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Meta de t√≥picos
            topics_goal = 10
            topics_current = len(topics_studied)
            topics_progress = min(100, int(topics_current / topics_goal * 100))
            st.markdown(f"""
            <div style="background-color: #fff3e0; border-radius: 10px; padding: 15px; margin-bottom: 15px;">
                <h5 style="margin-top: 0;">üìù Estudar {topics_goal} t√≥picos diferentes</h5>
                <div style="background-color: #ffe0b2; height: 10px; border-radius: 5px; margin-top: 10px;">
                    <div style="background-color: #FF9800; width: {topics_progress}%; height: 100%; border-radius: 5px;"></div>
                </div>
                <p style="text-align: right; margin-top: 5px; font-size: 0.9rem;">Progresso: {topics_current}/{topics_goal} ({topics_progress}%)</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Meta de sequ√™ncia
            streak_goal = 7
            streak_current = streak
            streak_progress = min(100, int(streak_current / streak_goal * 100))
            st.markdown(f"""
            <div style="background-color: #f3e5f5; border-radius: 10px; padding: 15px; margin-bottom: 15px;">
                <h5 style="margin-top: 0;">üî• Manter sequ√™ncia de {streak_goal} dias</h5>
                <div style="background-color: #e1bee7; height: 10px; border-radius: 5px; margin-top: 10px;">
                    <div style="background-color: #9C27B0; width: {streak_progress}%; height: 100%; border-radius: 5px;"></div>
                </div>
                <p style="text-align: right; margin-top: 5px; font-size: 0.9rem;">Progresso: {streak_current}/{streak_goal} ({streak_progress}%)</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Definir novas metas
        st.markdown("#### Definir Novas Metas")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            new_exercises_goal = st.number_input("Exerc√≠cios a completar:", min_value=5, max_value=100, value=20, step=5)
            
        with col2:
            new_precision_goal = st.number_input("Meta de precis√£o (%):", min_value=50, max_value=100, value=80, step=5)
            
        with col3:
            new_streak_goal = st.number_input("Meta de sequ√™ncia (dias):", min_value=3, max_value=30, value=7, step=1)
            
        if st.button("Salvar Novas Metas", key="save_goals_btn"):
            st.success("Metas atualizadas com sucesso! (Simula√ß√£o)")
    
    with tab3:
        st.markdown("### Conquistas e Certificados")
        
        # Lista de conquistas poss√≠veis
        achievements = [
            {
                "title": "Primeiros Passos",
                "description": "Complete 5 exerc√≠cios",
                "icon": "ü•â",
                "color": "#CD7F32",
                "achieved": exercises_completed >= 5
            },
            {
                "title": "Estudante Dedicado",
                "description": "Complete 20 exerc√≠cios",
                "icon": "ü•à",
                "color": "#C0C0C0",
                "achieved": exercises_completed >= 20
            },
            {
                "title": "Mestre em Sistemas Lineares",
                "description": "Complete 50 exerc√≠cios com mais de 80% de precis√£o",
                "icon": "ü•á",
                "color": "#FFD700",
                "achieved": exercises_completed >= 50 and accuracy >= 80
            },
            {
                "title": "Explorador de T√≥picos",
                "description": "Estude 8 t√≥picos diferentes",
                "icon": "üß≠",
                "color": "#4CAF50",
                "achieved": len(topics_studied) >= 8
            },
            {
                "title": "Sequ√™ncia de Fogo",
                "description": "Mantenha uma sequ√™ncia de estudo de 7 dias",
                "icon": "üî•",
                "color": "#FF5722",
                "achieved": streak >= 7
            },
            {
                "title": "Precis√£o Perfeita",
                "description": "Acerte 10 exerc√≠cios consecutivos",
                "icon": "üéØ",
                "color": "#2196F3",
                "achieved": accuracy >= 90 and exercises_completed >= 10
            }
        ]
        
        # Mostrar conquistas organizadas em grid
        achievs_per_row = 3
        for i in range(0, len(achievements), achievs_per_row):
            cols = st.columns(achievs_per_row)
            
            for j in range(achievs_per_row):
                if i + j < len(achievements):
                    achievement = achievements[i + j]
                    
                    with cols[j]:
                        bg_color = "#f8f9fa"
                        status = "BLOQUEADO"
                        status_color = "#9E9E9E"
                        opacity = "0.7"
                        
                        if achievement["achieved"]:
                            bg_color = achievement["color"] + "20"  # Adicionar transpar√™ncia √† cor
                            status = "CONQUISTADO"
                            status_color = achievement["color"]
                            opacity = "1"
                        
                        st.markdown(f"""
                        <div style="background-color: {bg_color}; border-radius: 10px; padding: 15px; text-align: center; margin-bottom: 15px; opacity: {opacity};">
                            <div style="font-size: 32px; margin-bottom: 10px;">{achievement["icon"]}</div>
                            <h4 style="margin-top: 0;">{achievement["title"]}</h4>
                            <p style="font-size: 0.9rem;">{achievement["description"]}</p>
                            <p style="color: {status_color}; font-weight: bold;">{status}</p>
                        </div>
                        """, unsafe_allow_html=True)
        
        # Certificados dispon√≠veis
        st.markdown("### Certificados Dispon√≠veis")
        
        certificates = [
            {
                "title": "Introdu√ß√£o aos Sistemas Lineares",
                "requirements": "Complete 20 exerc√≠cios de n√≠vel b√°sico",
                "progress": min(100, int(exercises_completed / 20 * 100)),
                "available": exercises_completed >= 20
            },
            {
                "title": "M√©todos de Resolu√ß√£o de Sistemas",
                "requirements": "Complete 15 exerc√≠cios usando diferentes m√©todos",
                "progress": min(100, int(exercises_completed / 15 * 100)),
                "available": exercises_completed >= 15
            },
            {
                "title": "Aplica√ß√µes Pr√°ticas de Sistemas Lineares",
                "requirements": "Complete 10 exerc√≠cios de aplica√ß√µes pr√°ticas",
                "progress": 30,
                "available": False
            }
        ]
        
        for cert in certificates:
            status_text = "DISPON√çVEL" if cert["available"] else "EM PROGRESSO"
            status_color = "#4CAF50" if cert["available"] else "#FFC107"
            btn_disabled = "" if cert["available"] else "disabled"
            
            st.markdown(f"""
            <div style="display: flex; align-items: center; background-color: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                <div style="margin-right: 15px; font-size: 24px;">üìú</div>
                <div style="flex-grow: 1;">
                    <h4 style="margin: 0;">{cert["title"]}</h4>
                    <p style="margin: 5px 0; color: #666; font-size: 0.9rem;">{cert["requirements"]}</p>
                    <div style="background-color: #e0e0e0; height: 10px; border-radius: 5px; margin-top: 10px; width: 100%;">
                        <div style="background-color: {status_color}; width: {cert["progress"]}%; height: 100%; border-radius: 5px;"></div>
                    </div>
                </div>
                <div style="margin-left: 15px;">
                    <span style="display: block; text-align: center; font-size: 0.8rem; color: {status_color}; margin-bottom: 5px;">{status_text}</span>
                    <button style="background-color: #1E88E5; color: white; border: none; padding: 5px 15px; border-radius: 5px; cursor: pointer; {btn_disabled}">Emitir</button>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # Compartilhar progresso
        st.markdown("### Compartilhar Progresso")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div style="background-color: #e3f2fd; border-radius: 10px; padding: 15px; text-align: center;">
                <h4 style="margin-top: 0;">Baixar Relat√≥rio de Progresso</h4>
                <p>Exporte seu hist√≥rico de atividades e conquistas para compartilhar ou guardar.</p>
                <button style="background-color: #1E88E5; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-top: 10px;">üì• Baixar PDF</button>
            </div>
            """, unsafe_allow_html=True)
            
        with col2:
            st.markdown("""
            <div style="background-color: #e8f5e9; border-radius: 10px; padding: 15px; text-align: center;">
                <h4 style="margin-top: 0;">Compartilhar nas Redes Sociais</h4>
                <p>Mostre seu progresso e conquistas para amigos e colegas.</p>
                <div style="display: flex; justify-content: center; gap: 10px; margin-top: 10px;">
                    <button style="background-color: #3b5998; color: white; border: none; padding: 10px; border-radius: 5px; cursor: pointer;">Facebook</button>
                    <button style="background-color: #1da1f2; color: white; border: none; padding: 10px; border-radius: 5px; cursor: pointer;">Twitter</button>
                    <button style="background-color: #0e76a8; color: white; border: none; padding: 10px; border-radius: 5px; cursor: pointer;">LinkedIn</button>
                </div>
            </div>
            """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
